name: ButtonsHud - Dimencia and Archaegeo v4.841 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        ResolutionX = 1920 --export: Default is 1920, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        ResolutionY = 1080 --export: Default is 1080, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        IgnoreEmergencyWarpDistance = 500 --export: Any targets within this distance are ignored for emergency warp.
        RequireLock = false --export: Set to true to require a target to lock onto you before starting an emergency warp.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.841;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;InAtmo=f()>0;APThrottleSet=false;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;CoreAltitude=core.getAltitude()AntigravTargetAltitude=CoreAltitude;ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;SpaceLand=false;SpaceLaunch=false;FinalLand=false;HovGndDet=-1;clearAllCheck=false;LockPitch=nil;local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=16;local S=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","RequireLock","StallAngle","ResolutionX","ResolutionY"}AutoVariables={"EmergencyWarp","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude"}if dbHud then local T=dbHud.hasKey;if not useTheseSettings then for U,V in pairs(SaveableVariables)do if T(V)then local W=c(dbHud.getStringValue(V))if W~=nil then system.print(V.." "..dbHud.getStringValue(V))_G[V]=W;A=true end end end end;for U,V in pairs(AutoVariables)do if T(V)then local W=c(dbHud.getStringValue(V))if W~=nil then system.print(V.." "..dbHud.getStringValue(V))_G[V]=W;A=true end end end;if useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;coroutine.yield()brakeToggle=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then MsgText="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick"end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local X=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]for U in pairs(ElementsID)do local type=h(ElementsID[U])if type=="landing gear"then HasGear=true end;if type=="dynamic core"then local Y=e(ElementsID[U])if Y>10000 then R=128 elseif Y>1000 then R=64 elseif Y>150 then R=32 end end;H=H+e(ElementsID[U])if fuelX~=0 and fuelY~=0 then if type=="atmospheric fuel-tank"or type=="space fuel-tank"or type=="rocket fuel-tank"then local Y=e(ElementsID[U])local Z=j(ElementsID[U])local a0=0;local a1=system.getTime()if type=="atmospheric fuel-tank"then local a2=400;local a3=35.03;if Y>10000 then a2=51200;a3=5480 elseif Y>1300 then a2=6400;a3=988.67 elseif Y>150 then a2=1600;a3=182.67 end;a0=Z-a3;if fuelTankHandlingAtmo>0 then a2=a2+a2*fuelTankHandlingAtmo*0.2 end;if a0>a2 then a2=a0 end;E[#E+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a2,a3,a0,a1}end;if type=="rocket fuel-tank"then local a2=320;local a3=173.42;if Y>65000 then a2=40000;a3=25740 elseif Y>6000 then a2=5120;a3=4720 elseif Y>700 then a2=640;a3=886.72 end;a0=Z-a3;if fuelTankHandlingRocket>0 then a2=a2+a2*fuelTankHandlingRocket*0.2 end;if a0>a2 then a2=a0 end;G[#G+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a2,a3,a0,a1}end;if type=="space fuel-tank"then local a2=2400;local a3=182.67;if Y>10000 then a2=76800;a3=5480 elseif Y>1300 then a2=9600;a3=988.67 end;a0=Z-a3;if fuelTankHandlingSpace>0 then a2=a2+a2*fuelTankHandlingSpace*0.2 end;if a0>a2 then a2=a0 end;F[#F+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a2,a3,a0,a1}end end end end;coroutine.yield()if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if InAtmo then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,V in pairs(door)do V.deactivate()end end;if forcefield then for _,V in pairs(forcefield)do V.deactivate()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if InAtmo and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=InAtmo;unit.hide()function refreshLastMaxBrake(a4,a5)if a4==nil then a4=core.g()end;a4=round(a4,5)if a5~=nil and a5 or(D==nil or D~=a4)then local a6=c(unit.getData()).maxBrake;if a6~=nil then LastMaxBrake=a6 end;if InAtmo then LastMaxBrakeInAtmo=a6 end;D=a4 end end;function MakeButton(a7,a8,a9,aa,ab,ac,ad,ae,af)local ag={enableName=a7,disableName=a8,width=a9,height=aa,x=ab,y=ac,toggleVar=ad,toggleFunction=ae,drawCondition=af,hovered=false}table.insert(r,ag)return ag end;function UpdateAtlasLocationsList()AtlasOrdered={}for U,V in pairs(atlas[0])do table.insert(AtlasOrdered,{name=V.name,index=U})end;local function ah(ai,aj)return ai.name<aj.name end;table.sort(AtlasOrdered,ah)end;function AddLocationsToAtlas()for U,V in pairs(SavedLocations)do table.insert(atlas[0],V)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local ak=planet.name..". "..#SavedLocations;if radar_1 then local al,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if al~=nil and al~=""then ak=ak.." "..radar_1.getConstructName(al)end end;local am={position=position,name=ak,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=am;table.insert(atlas[0],am)UpdateAtlasLocationsList()MsgText="Location saved as "..ak else MsgText="Databank must be installed to save locations"end end;function UpdatePosition()local an=-1;local am;for U,V in pairs(SavedLocations)do if V.name and V.name==CustomTarget.name then an=U;break end end;if an~=-1 then am={position=vec3(core.getConstructWorldPos()),name=SavedLocations[an].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[an]=am;an=-1;for U,V in pairs(atlas[0])do if V.name and V.name==CustomTarget.name then an=U end end;if an>-1 then atlas[0][an]=am end;UpdateAtlasLocationsList()MsgText=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local an=-1;for U,V in pairs(atlas[0])do if V.name and V.name==CustomTarget.name then an=U end end;if an>-1 then table.remove(atlas[0],an)end;an=-1;for U,V in pairs(SavedLocations)do if V.name and V.name==CustomTarget.name then MsgText=V.name.." saved location cleared"an=U;break end end;if an~=-1 then table.remove(SavedLocations,an)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(ao)ao[#ao+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ap,aq,ab,ac,a9,aa)if ap>ab and ap<ab+a9 and aq>ac and aq<ac+aa then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local ar=vec3(core.getConstructWorldOrientationForward())local as=vec3(core.getConstructWorldOrientationRight())local at=vec3(core.getWorldVertical())local au=getPitch(at,ar,as)LockPitch=au;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not InAtmo then AutoTakeoff=false;HoldAltitude=CoreAltitude;if not SpaceLaunch and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if SpaceLaunch then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else SpaceLand=true end else SpaceLaunch=true;RetrogradeIsOn=false;ProgradeIsOn=false;if unit.getAtmosphereDensity()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;APThrottleSet=false;LockPitch=nil else SpaceLaunch=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;APThrottleSet=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;autoRoll=autoRollPreference end end;function checkDamage(ao)local av=0;p=""local aw=H;local ax=0;local ay=0;local az=0;local aA=0;local aB=""for U in pairs(ElementsID)do local Y=0;local aC=0;aC=e(ElementsID[U])Y=g(ElementsID[U])ax=ax+Y;if Y<aC then if Y==0 then az=az+1 else ay=ay+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[U]))local ab=position.x-R;local ac=position.y-R;local aD=position.z-R;table.insert(m,core.spawnArrowSticker(ab,ac,aD+1,"down"))table.insert(m,core.spawnArrowSticker(ab,ac,aD+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ab+1,ac,aD,"north"))table.insert(m,core.spawnArrowSticker(ab+1,ac,aD,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ab-1,ac,aD,"south"))table.insert(m,core.spawnArrowSticker(ab-1,ac,aD,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ab,ac-1,aD,"east"))table.insert(m,core.spawnArrowSticker(ab,ac-1,aD,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ab,ac+1,aD,"west"))table.insert(m,core.spawnArrowSticker(ab,ac+1,aD,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[U])end elseif I and#m>0 and m[11]==ElementsID[U]then for aE in pairs(m)do core.deleteSticker(m[aE])end;m={}end end;av=a(ax/aw*100)if av<100 then ao[#ao+1]=[[<g class="pbright txt">]]aA=a(av*2.55)aB=b("rgb(%d,%d,%d)",255-aA,aA,0)if av<100 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aB,av)if az>0 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aB,az,ay)elseif ay>0 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aB,ay)end end;ao[#ao+1]=[[<\g>]]end end;function DrawCursorLine(ao)local aF=a(utils.clamp(Distance/(u/4)*255,0,255))ao[#ao+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aF,a(PrimaryG+0.5)-aF,a(PrimaryB+0.5)-aF)end;function getPitch(aG,aH,aj)local aI=aG:cross(aj):normalize_inplace()local au=math.acos(utils.clamp(aI:dot(-aH),-1,1))*constants.rad2deg;if aI:cross(-aH):dot(aj)<0 then au=-au end;return au end;function clearAll()if clearAllCheck then clearAllCheck=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;FollowMode=false;APThrottleSet=false;SpaceLand=false;SpaceLaunch=false;ReentryMode=false;autoRoll=autoRollPreference;EmergencyWarp=false;VectorToTarget=false;TurnBurn=false;GyroIsOn=false;LockPitch=nil else clearAllCheck=true end end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 else if B then for U,V in pairs(SaveableVariables)do dbHud.setStringValue(V,d(nil))end;for U,V in pairs(AutoVariables)do if V~="SavedLocations"then dbHud.setStringValue(V,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe of ALL data"B=true end end end;function CheckButtons()for _,V in pairs(r)do if V.hovered then if not V.drawCondition or V.drawCondition()then V.toggleFunction()end;V.hovered=false end end end;function SetButtonContains()local ab=SimulatedX+u/2;local ac=SimulatedY+v/2;for _,V in pairs(r)do V.hovered=Contains(ab,ac,V.x,V.y,V.width,V.height)end end;function DrawButton(ao,aJ,hover,ab,ac,aK,aL,aM,aN,aO,aP)if type(aO)=="function"then aO=aO()end;if type(aP)=="function"then aP=aP()end;ao[#ao+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ab,ac,aK,aL)if aJ then ao[#ao+1]=b("%s'",aM)else ao[#ao+1]=aN end;if hover then ao[#ao+1]=" style='stroke:white; stroke-width:2'"else ao[#ao+1]=" style='stroke:black; stroke-width:1'"end;ao[#ao+1]="></rect>"ao[#ao+1]=b("<text x='%f' y='%f' font-size='24' fill='",ab+aK/2,ac+aL/2+5)if aJ then ao[#ao+1]="black"else ao[#ao+1]="white"end;ao[#ao+1]="' text-anchor='middle' font-family='Montserrat'>"if aJ then ao[#ao+1]=b("%s</text>",aO)else ao[#ao+1]=b("%s</text>",aP)end end;function DrawButtons(ao)local aQ="rgb(50,50,50)'"local aR="rgb(210,200,200)"local aS=DrawButton;for _,V in pairs(r)do local a8=V.disableName;local a7=V.enableName;if type(a8)=="function"then a8=a8()end;if type(a7)=="function"then a7=a7()end;if not V.drawCondition or V.drawCondition()then aS(ao,V.toggleVar(),V.hovered,V.x,V.y,V.width,V.height,aR,aQ,a8,a7)end end end;function DrawTank(ao,Q,ab,aT,aU,aV,aW,aX)local aY=1;local aZ=2;local a_=3;local b0=4;local b1=5;local b2=6;local b3=""local b4=0;local b5=fuelY;local b6=fuelY+10;if l()==1 and not RemoteHud then b5=b5-50;b6=b6-50 end;ao[#ao+1]=[[<g class="pdim txtfuel">]]if aU=="ATMO"then b3="atmofueltank"elseif aU=="SPACE"then b3="spacefueltank"else b3="rocketfueltank"end;b4=_G[b3 .."_size"]if#aV>0 then for i=1,#aV do local ak=string.sub(aV[i][aZ],1,12)local b7=0;for aE=1,b4 do if aV[i][aZ]==json.decode(unit[b3 .."_"..aE].getData()).name then b7=aE;break end end;if Q or aW[i]==nil or aX[i]==nil then local b8=0;local b9=0;local ba=0;local bb=0;local a1=system.getTime()if b7~=0 then aX[i]=json.decode(unit[b3 .."_"..b7].getData()).percentage;aW[i]=json.decode(unit[b3 .."_"..b7].getData()).timeLeft;if aW[i]=="n/a"then aW[i]=0 end else ba=j(aV[i][aY])-aV[i][b0]b8=aV[i][a_]aX[i]=a(0.5+ba*100/b8)b9=aV[i][b1]bb=aV[i][b2]if b9<=ba then aW[i]=0 else aW[i]=a(0.5+ba/((b9-ba)/(a1-bb)))end;aV[i][b1]=ba;aV[i][b2]=a1 end end;if ak==aT then ak=b("%s %d",aU,i)end;if b7==0 then ak=ak.." *"end;local bc;if aW[i]==0 then bc="n/a"else bc=FormatTimeString(aW[i])end;if aX[i]~=nil then local aA=a(aX[i]*2.55)local aB=b("rgb(%d,%d,%d)",255-aA,aA,0)local bd=""if bc~="n/a"and aW[i]<120 or aX[i]<5 then if Q then bd=[[class="red"]]end end;ao[#ao+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ab,b5,bd,ak,ab,b6,aB,aX[i],bc)b5=b5+30;b6=b6+30 end end end;ao[#ao+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local au=-math.deg(math.atan(velocity.y,velocity.z))+180;au=au-90;if au<0 then au=360+au end;if au>180 then au=-180+au-180 end;return-au end;function getRelativeYaw(velocity)velocity=vec3(velocity)local be=math.deg(math.atan(velocity.y,velocity.x))-90;if be<-180 then be=360+be end;return be end;function AlignToWorldVector(bf,bg)if not InAtmo or RateOfChange>MinimumRateOfChange+0.08 or HovGndDet~=-1 then if bg==nil then bg=t end;bf=vec3(bf):normalize()local bh=vec3(core.getConstructWorldOrientationForward())-bf;local bi=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationRight())*s;local bj=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationUp())*s;if n==0 then n=bi/2 end;if o==0 then o=bj/2 end;YawInput2=YawInput2-(bi+(bi-n)*DampingMultiplier)PitchInput2=PitchInput2+bj+(bj-o)*DampingMultiplier;n=bi;o=bj;if math.abs(bi)<bg and math.abs(bj)<bg then return true end;return false end end;function getAPEnableName()local ak=AutopilotTargetName;if ak==nil then ak=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if ak==nil then ak="None"end;return"Engage Autopilot: "..ak end;function getAPDisableName()local ak=AutopilotTargetName;if ak==nil then ak=CustomTarget.name end;if ak==nil then ak="None"end;return"Disable Autopilot: "..ak end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif unit.getAtmosphereDensity()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bk=50;local bl=260;local bm=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bl,bk,u/2-bl/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bl,bk,u/2-bl/2-50-bm.width,v/2-bk+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bl,bk,u/2-bl/2+bm.width+50,v/2-bk+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bn=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bn.height,bn.x+bn.width+30,bn.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,bn.height,bn.x+bn.width+30,bn.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,bn.height,bn.x-200-30,bn.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bk=60;bl=300;local ab=10;local ac=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bl,bk,ab,ac,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bl,bk,ab+bl+20,ac,function()return AltitudeHold end,ToggleAltitudeHold)ac=ac+bk+20;MakeButton("Engage Autoland","Disable Autoland",bl,bk,ab,ac,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bl,bk,ab+bl+20,ac,function()return AutoTakeoff end,ToggleAutoTakeoff)ac=ac+bk+20;MakeButton("Show Orbit Display","Hide Orbit Display",bl,bk,ab,ac,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)MakeButton("Enable Emergency Warp","Disable Emergency Warp",bl,bk,ab+bl+20,ac,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)ac=ac+bk+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bl,bk,ab,ac,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bl,bk,ab+bl+20,ac,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)ac=ac+bk+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bl,bk,ab,ac,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bl,bk,ab+bl+20,ac,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)ac=ac+bk+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",bl,bk,ab,ac,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;ac=ac+bk+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bl*2,bk,ab,ac,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)coroutine.yield()function updateHud(ao)local bo=CoreAltitude;local velocity=core.getVelocity()local bp=vec3(velocity):len()local at=vec3(core.getWorldVertical())local ar=vec3(core.getConstructWorldOrientationForward())local as=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getConstructWorldOrientationUp())local br=getRoll(at,ar,as)local bs=br/180*math.pi;local bt=math.cos(bs)local bu=math.sin(bs)local au=getPitch(at,ar,as*bt+bq*bu)local bv=br;local bw=au;local bx=f()local by=a(unit.getThrottle())local bz=bp*3.6;local bA=unit.getAxisCommandValue(0)local bB=GetFlightStyle()local bC="ROLL"local bD=unit.getClosestPlanetInfluence()>0;if by==nil then by=0 end;if not bD then if bp>5 then au=getRelativePitch(velocity)br=getRelativeYaw(velocity)else au=0;br=0 end;bC="YAW"end;ao[#ao+1]=LastOdometerOutput;ao[#ao+1]=p;ao[#ao+1]=RadarMessage;if S%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(ao,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(ao,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(ao,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;S=0 end;S=S+1;DrawVerticalSpeed(ao,bo)if l()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if bD then DrawRollLines(ao,centerX,centerY,bv,bC,bD)DrawArtificialHorizon(ao,bw,bv,centerX,centerY,bD,a(getRelativeYaw(velocity)),bp)DrawAltitudeDisplay(ao,bo)else DrawRollLines(ao,centerX,centerY,br,bC,bD)DrawArtificialHorizon(ao,au,br,centerX,centerY,bD,a(br),bp)end;DrawPrograde(ao,velocity,bp,centerX,centerY)end end;DrawThrottle(ao,bB,by,bA)DrawSpeed(ao,bz)DrawWarnings(ao)DisplayOrbitScreen(ao)if screen_2 then local bE=vec3(core.getConstructWorldPos())local ab=960+bE.x/MapXRatio;local ac=450+bE.y/MapYRatio;screen_2.moveContent(YouAreHere,(ab-80)/19.2,(ac-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and l()==0 end;function HUDPrologue(ao)local bF=rgb;local bG=X;local bH=rgb;local bI=X;if IsInFreeLook()and not brightHud then bF=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bG=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;ao[#ao+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],bF,bF,bH,bH,bG,bG,bI,bI,ResolutionX,ResolutionY)end;function HUDEpilogue(ao)ao[#ao+1]="</svg>"end;function DrawSpeed(ao,bz)local bJ=throtPosY-10;local bK=throtPosX+10;ao[#ao+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bJ=75 end;ao[#ao+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bK,bJ,a(bz))end;function DrawOdometer(ao,TotalDistanceTrip,TotalDistanceTravelled,bB,bL,bx)local bM=1240;local bN=55;local bO=65;local bx=f()local a4=core.g()local bP=0;local bQ=0;refreshLastMaxBrake(a4)maxThrust=Nav:maxForceForward()C=k()if not ShowOdometer then return end;local bR=vec3(core.getWorldAcceleration()):len()/9.80665;if a4>0.1 then bQ=C*a4;bP=maxThrust/a4 end;ao[#ao+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bM=1120;bN=55;bO=65 elseif InAtmo then ao[#ao+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bx)end;ao[#ao+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bM,bN,bM,bO,a4/9.80665,bM,bN+20,bM,bO+20,bR)ao[#ao+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 or RemoteHud then ao[#ao+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="180">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bL),FormatTimeString(TotalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bB)if a4>0.1 then ao[#ao+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bP/1000,bQ/1000)else ao[#ao+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else ao[#ao+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bB)end;ao[#ao+1]="</g>"end;function DrawThrottle(ao,bB,by,bA)local b5=throtPosY+10;local b6=throtPosY+20;if l()==1 and not RemoteHud then b5=55;b6=65 end;local bS="CRUISE"local unit="km/h"local bT=bA;if bB=="TRAVEL"or bB=="AUTOPILOT"then bS="THROT"unit="%"bT=by;local bU="dim"if by<0 then bU="red"end;ao[#ao+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bU,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(by),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;ao[#ao+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,b5,bS,throtPosX+10,b6,bT,unit)end;function DrawVerticalSpeed(ao,bo)if bo<200000 and not InAtmo or bo and InAtmo then local bV=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local bW=0;if math.abs(bV)>1 then bW=45*math.log(math.abs(bV),10)if bV<0 then bW=-bW end end;ao[#ao+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bV),a(bW))end end;function getHeading(aH)local bX=-vec3(core.getWorldVertical())aH=aH-aH:project_on(bX)local bY=vec3(0,0,1)bY=bY-bY:project_on(bX)local bZ=bY:cross(bX)local bW=bY:angle_between(aH)*constants.rad2deg;if aH:dot(bZ)<0 then bW=360-bW end;return bW end;function DrawRollLines(ao,centerX,centerY,bv,bC,bD)local b_=circleRad;local c0=20;c0=math.floor(c0)local c1=a(bv)if bD then for i=-45,45,5 do local c2=i;ao[#ao+1]=b([[<g transform="rotate(%f,%d,%d)">]],c2,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;ao[#ao+1]=b([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+b_+c0-len,centerX,centerY+b_+c0)end;ao[#ao+1]=b([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+b_+c0-35,bC,centerX,centerY+b_+c0-25,c1)ao[#ao+1]=b([[<g transform="rotate(%f,%d,%d)">]],-bv,centerX,centerY)ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+b_+c0-20,centerX+5,centerY+b_+c0-20,centerX,centerY+b_+c0-15)ao[#ao+1]="</g>"end;local be=c1;if bD then be=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local c3=20;local c4=a(be)local c5=0;local c6=centerY+b_+c0+20;local c7=centerX;if bC~="YAW"then c6=130;c7=960 end;local c8=[[<path class="txttick line" d="]]for i=a(c4-(c3+10)-c4%5+0.5),a(c4+c3+10+c4%5+0.5),5 do local ab=c7+-i*5+be*5;if i%10==0 then c5=10;local c9=i;if c9==360 then c9=0 elseif c9>360 then c9=c9-360 elseif c9<0 then c9=c9+360 end;ao[#ao+1]=b([[
                                    <text x="%f" y="%f">%d</text>]],ab+5,c6-12,c9)elseif i%5==0 then c5=5 end;if c5==10 then c8=b([[%s M %f %f v %d]],c8,ab,c6-5,c5)else c8=b([[%s M %f %f v %d]],c8,ab,c6-2.5,c5)end end;ao[#ao+1]=c8 ..[["/>]]ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],c7-5,c6+10,c7+5,c6+10,c7,c6+5)if bD then bC="HDG"end;ao[#ao+1]=b([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],c7,c6+25,c4,c7,c6+35,bC)end;function DrawArtificialHorizon(ao,bw,bv,centerX,centerY,bD,ca,bp)local b_=circleRad;local cb=math.floor(b_*3/5)if b_>0 then local cc=a(bw)local len=0;local c8=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bv,centerX,centerY)if not InAtmo then c8=b([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;ao[#ao+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],b_-1,centerX,centerY)ao[#ao+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(cc-30-cc%5+0.5),a(cc+30+cc%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ac=centerY+-i*5+bw*5;if len==30 then c8=b([[%s M %d %f h %d]],c8,centerX-cb-len,ac,len)if InAtmo then ao[#ao+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bv,centerX,centerY,centerX-cb+10,ac,i)ao[#ao+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bv,centerX,centerY,centerX+cb-10,ac,i)if i==0 or i==180 or i==-180 then ao[#ao+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bv,centerX,centerY,centerX-cb+20,ac,cb*2-40)end else ao[#ao+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-cb+10,ac,i)ao[#ao+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+cb-10,ac,i)end;c8=b([[%s M %d %f h %d]],c8,centerX+cb,ac,len)else c8=b([[%s M %d %f h %d]],c8,centerX-cb-len,ac,len)c8=b([[%s M %d %f h %d]],c8,centerX+cb,ac,len)end end;ao[#ao+1]=c8 ..[["/>]]local cd="PITCH"if not bD then cd="REL PITCH"end;if bw>90 and not InAtmo then bw=90-(bw-90)elseif bw<-90 and not InAtmo then bw=-90-(bw+90)end;if b_>200 then if InAtmo then if bp>MinAutopilotSpeed then ao[#ao+1]=b([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ca)end;ao[#ao+1]=b([[<g transform="rotate(%f,%d,%d)">]],-bv,centerX,centerY)else ao[#ao+1]=b([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-cb+25,centerY-5,centerX-cb+20,centerY,centerX-cb+25,centerY+5,centerX-cb+50,centerY+4,cc)ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+cb-25,centerY-5,centerX+cb-20,centerY,centerX+cb-25,centerY+5,centerX+cb-30,centerY+4,cc)ao[#ao+1]="</g>"end;local ce=math.floor(b_/3)ao[#ao+1]=b([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ce,centerY,b_-ce)if not InAtmo and bD then ao[#ao+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bv,centerX,centerY,centerX-cb+10,centerY,cb*2-20)end;ao[#ao+1]="</g>"if b_<200 then if InAtmo and bp>MinAutopilotSpeed then ao[#ao+1]=b([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-b_,cd,centerX,centerY-b_+10,cc,centerX,centerY-15,"Yaw",centerX,centerY+20,ca)else ao[#ao+1]=b([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-b_,cd,centerX,centerY-b_+15,cc)end end end end;function DrawAltitudeDisplay(ao,bo)if bo<200000 and not InAtmo or bo and InAtmo then local cf=altMeterX;local cg=altMeterY;local ch=78;local ci=19;table.insert(ao,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],cf-1,cg-4,ch+2,ci+6,cf+1,cg-1,ch-4,ci))local an=0;local cj=1;local ck=0;local cl=bo<0;local cm=9;if cl then cm=0 end;local bo=math.abs(bo)while an<6 do local cn=11;local co=16;local cp=9;local cq=14;local bd="altsm"if an>2 then co=co+3;cn=cn+2;cq=cq+2;cp=cp-6;bd="altbig"end;if cl then bd=bd.." red"end;local cr=bo/cj%10;local cs=a(cr)local ct=a((cs+1)%10)local cu=ck;if an==0 then cu=cr-cs;if cl then cu=1-cu end end;if cl and(an==0 or ck~=0)then local cv=ct;ct=cs;cs=cv end;local cw=co*(cu-1)local cx=cw+co;local ab=cf+cp+(6-an)*cn;local ac=cg+cq;table.insert(ao,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bd,ab,ac+cw,ct,ab,ac+cx,cs))an=an+1;cj=cj*10;if cs==cm then ck=cu else ck=0 end end;table.insert(ao,[[</g></g>]])end end;function DrawPrograde(ao,velocity,bp,centerX,centerY)if bp>5 and not InAtmo or bp>MinAutopilotSpeed then local b_=circleRad;local cy=20;local cz=20;local cA=vec3(velocity)local cB=getRelativePitch(cA)local cC=getRelativeYaw(cA)local cD=-cC/cz*b_;local cE=cB/cy*b_;local ab=centerX+cD;local ac=centerY+cE;local cF=math.sqrt(cD^2+cE^2)if cF<b_ then ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ab,ac)else local bW=math.atan(cE,cD)local cG=centerX+b_*math.cos(bW)local cH=centerY+b_*math.sin(bW)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',cG,cH)end;cB=getRelativePitch(-cA)cC=getRelativeYaw(-cA)cD=-cC/cz*b_;cE=cB/cy*b_;ab=centerX+cD;ac=centerY+cE;cF=math.sqrt(cD^2+cE^2)if not InAtmo then if cF<b_ then ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ab,ac)else local bW=math.atan(cE,cD)local cG=centerX+b_*math.cos(bW)local cH=centerY+b_*math.sin(bW)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',cG,cH)end end end end;function DrawWarnings(ao)ao[#ao+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)ao[#ao+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ao[#ao+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]ao[#ao+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]ao[#ao+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cI=960;local cJ=860;local cK=880;local cL=900;local cM=960;local cN=200;local cO=150;local cP=960;if l()==1 and not RemoteHud then cJ=135;cK=155;cL=175;cN=115;cO=95 end;if BrakeIsOn then ao[#ao+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cI,cJ)end;if InAtmo and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then ao[#ao+1]=b([[<text x="%d" y="%d">** STALL WARNING **</text>]],cI,cN+25)end;if GyroIsOn then ao[#ao+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cI,cP)end;if GearExtended then if HasGear then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cI,cK)else ao[#ao+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cI,cK)end;ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cI,cL,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cI,cM)end;if IsBoosting then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],cI,cM+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(CoreAltitude-antigrav.getBaseAltitude())<501 then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cI,cN+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))else ao[#ao+1]=b([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cI,cN+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cI,cN,AutopilotStatus)elseif LockPitch~=nil then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],cI,cN,math.floor(LockPitch))elseif FollowMode then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cI,cN)elseif AltitudeHold then if AutoTakeoff then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cI,cN,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cI,cN+50)end else ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cI,cN,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cI,cN)end;if BrakeLanding then if StrongBrakes then ao[#ao+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cI,cN)else ao[#ao+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cI,cN)end end;if ProgradeIsOn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],cI,cN)end;if RetrogradeIsOn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],cI,cN)end;if TurnBurn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cI,cO)end;if VectorToTarget then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cI,cN+30,VectorStatus)end;ao[#ao+1]="</g>"end;function DisplayOrbitScreen(ao)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cQ=75;local cR=0;local cS=250;local cT=4;cR=cR+cT;local cU=15;local ab=cQ+cS+cQ/2+cT;local ac=cR+cS/2+5+cT;local cV,cW,cX,cY;cV=cS/4;cY=0;ao[#ao+1]=[[<g class="pbright txtorb txtmid">]]ao[#ao+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cS+cQ*2,cS+cR,cT,cT)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cX=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cV*2)cW=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cX*(1-orbit.eccentricity)cY=cV-orbit.periapsis.altitude/cX-planet.radius/cX;local cZ=""if orbit.periapsis.altitude<=0 then cZ='redout'end;ao[#ao+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cZ,cQ+cS/2+cY+cT,cR+cS/2+cT,cV,cW)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cQ+cS/2+cT,cR+cS/2+cT,planet.radius/cX)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ao[#ao+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ab-35,ac-5,cQ+cS/2+cV+cY,ac-5)ao[#ao+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ab,ac)ac=ac+cU;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getDistanceDisplayString(orbit.apoapsis.altitude))ac=ac+cU;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,FormatTimeString(orbit.timeToApoapsis))ac=ac+cU;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getSpeedDisplayString(orbit.apoapsis.speed))end;ac=cR+cS/2+5+cT;ab=cQ-cQ/2+10+cT;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ao[#ao+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ab+35,ac-5,cQ+cS/2-cV+cY,ac-5)ao[#ao+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ab,ac)ac=ac+cU;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getDistanceDisplayString(orbit.periapsis.altitude))ac=ac+cU;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,FormatTimeString(orbit.timeToPeriapsis))ac=ac+cU;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getSpeedDisplayString(orbit.periapsis.speed))end;ao[#ao+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cQ+cS/2+cT,20+cT,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local c_=orbit.timeToApoapsis/orbit.period*2*math.pi;local d0=cV*math.cos(c_)local d1=cW*math.sin(c_)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cQ+cS/2+d0+cY+cT,cR+cS/2+d1+cT)end;ao[#ao+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for U,V in pairs(atlas[0])do if w==nil or V.center.x<w then w=V.center.x end;if x==nil or V.center.x>x then x=V.center.x end;if y==nil or V.center.y<y then y=V.center.y end;if z==nil or V.center.y>z then z=V.center.y end end;GalaxyMapHTML=""local d2=1.1*(x-w)/1920;local d3=1.4*(z-y)/1080;for U,V in pairs(atlas[0])do local ab=960+V.center.x/d2;local ac=540+V.center.y/d3;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ab..'" cy="'..ac..'" r="'..V.radius/d2*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(V.name,"Moon")and not string.match(V.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ab.."' y='"..ac+V.radius/d2*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..V.name.."</text>"end end;local bE=vec3(core.getConstructWorldPos())local ab=960+bE.x/d2;local ac=540+bE.y/d3;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ab..'" cy="'..ac..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ab.."' y='"..ac-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=d2;MapYRatio=d3;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bE=vec3(core.getConstructWorldPos())local ab=960+bE.x/d2;local ac=540+bE.y/d3;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ab-80)/19.20,(ac-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function d4(d5)return type(d5)=='number'end;local function d6(d5)return type(tonumber(d5))=='number'end;local function d7(d8)return type(d8)=='table'end;local function d9(da)return type(da)=='string'end;local function db(V)return d7(V)and d4(V.x and V.y and V.z)end;local function dc(dd)return d7(dd)and d4(dd.latitude and dd.longitude and dd.altitude and dd.bodyId and dd.systemId)end;local de=math.pi/180;local df=180/math.pi;local dg=1e-10;local c9=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dh='::pos{'..c9 ..','..c9 ..','..c9 ..','..c9 ..','..c9 ..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local di=utils.clamp;local function dj(dk,dl)if dk==0 then return math.abs(dl)<1e-09 end;if dl==0 then return math.abs(dk)<1e-09 end;return math.abs(dk-dl)<math.max(math.abs(dk),math.abs(dl))*dg end;local function dm(d5)local W=string.gsub(string.reverse(b('%.4f',d5)),'^0*%.?','')return W==''and'0'or string.reverse(W)end;local function dn(dp)if db(dp)then return b('{x=%.3f,y=%.3f,z=%.3f}',dp.x,dp.y,dp.z)end;if d7(dp)and not getmetatable(dp)then local dq={}local dr=next(dp)if type(dr)=='nil'or dr==1 then dq=dp else for U,V in pairs(dp)do local bT=dn(V)if type(U)=='number'then table.insert(dq,b('[%s]=%s',U,bT))else table.insert(dq,b('%s=%s',U,bT))end end end;return b('{%s}',table.concat(dq,','))end;if d9(dp)then return b("'%s'",dp:gsub("'",[[\']]))end;return tostring(dp)end;local ds={}ds.__index=ds;ds.__tostring=function(dp,dt)local du={}for U in pairs(dp)do table.insert(du,U)end;table.sort(du)local dq={}for _,U in ipairs(du)do local bT=dn(dp[U])if type(U)=='number'then table.insert(dq,b('[%s]=%s',U,bT))else table.insert(dq,b('%s=%s',U,bT))end end;if dt then return b('%s%s',dt,table.concat(dq,',\n'..dt))end;return b('{%s}',table.concat(dq,','))end;ds.__eq=function(dv,dw)return dv.planetarySystemId==dw.planetarySystemId and dv.bodyId==dw.bodyId and dj(dv.radius,dw.radius)and dj(dv.center.x,dw.center.x)and dj(dv.center.y,dw.center.y)and dj(dv.center.z,dw.center.z)and dj(dv.GM,dw.GM)end;local function dx(dy,dz,dA,dB,dC)assert(d6(dy),'Argument 1 (planetarySystemId) must be a number:'..type(dy))assert(d6(dz),'Argument 2 (bodyId) must be a number:'..type(dz))assert(d6(dA),'Argument 3 (radius) must be a number:'..type(dA))assert(d7(dB),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dB))assert(d6(dC),'Argument 5 (GM) must be a number:'..type(dC))return setmetatable({planetarySystemId=tonumber(dy),bodyId=tonumber(dz),radius=tonumber(dA),center=vec3(dB),GM=tonumber(dC)},ds)end;local dD={}dD.__index=dD;dD.__tostring=function(dE)return b('::pos{%d,%d,%s,%s,%s}',dE.systemId,dE.bodyId,dm(dE.latitude*df),dm(dE.longitude*df),dm(dE.altitude))end;dD.__eq=function(dv,dw)return dv.bodyId==dw.bodyId and dv.systemId==dw.systemId and dj(dv.latitude,dw.latitude)and dj(dv.altitude,dw.altitude)and(dj(dv.longitude,dw.longitude)or dj(dv.latitude,math.pi/2)or dj(dv.latitude,-math.pi/2))end;local function dF(dG,dz,dH,dI,bo)local dy=dG;if d9(dG)and not dI and not bo and not dz and not dH then dy,dz,dH,dI,bo=string.match(dG,dh)assert(dy,'Argument 1 (position string) is malformed.')else assert(d6(dy),'Argument 1 (systemId) must be a number:'..type(dy))assert(d6(dz),'Argument 2 (bodyId) must be a number:'..type(dz))assert(d6(dH),'Argument 3 (latitude) must be in degrees:'..type(dH))assert(d6(dI),'Argument 4 (longitude) must be in degrees:'..type(dI))assert(d6(bo),'Argument 5 (altitude) must be in meters:'..type(bo))end;dy=tonumber(dy)dz=tonumber(dz)dH=tonumber(dH)dI=tonumber(dI)bo=tonumber(bo)if dz==0 then return setmetatable({latitude=dH,longitude=dI,altitude=bo,bodyId=dz,systemId=dy},dD)end;return setmetatable({latitude=de*di(dH,-90,90),longitude=de*(dI%360),altitude=bo,bodyId=dz,systemId=dy},dD)end;local dJ={}dJ.__index=dJ;dJ.__tostring=function(dp,dt)local dK=dt and dt..'  'local dL={}local du={}for U in pairs(dp)do table.insert(du,U)end;table.sort(du)for _,dM in ipairs(du)do bdy=dp[dM]local dN=ds.__tostring(bdy,dK)if dt then table.insert(dL,b('[%s]={\n%s\n%s}',dM,dN,dt))else table.insert(dL,b('  [%s]=%s',dM,dN))end end;if dt then return b('\n%s%s%s',dt,table.concat(dL,',\n'..dt),dt)end;return b('{\n%s\n}',table.concat(dL,',\n'))end;local function dO(dP)local atlas={}local pid;for _,V in pairs(dP)do local al=V.planetarySystemId;if type(al)~='number'then error('Invalid planetary system ID: '..tostring(al))elseif pid and al~=pid then error('Mismatch planetary system IDs: '..al..' and '..pid)end;local dQ=V.bodyId;if type(dQ)~='number'then error('Invalid body ID: '..tostring(dQ))elseif atlas[dQ]then error('Duplicate body ID: '..tostring(dQ))end;setmetatable(V.center,getmetatable(vec3.unit_x))atlas[dQ]=setmetatable(V,ds)pid=al end;return setmetatable(atlas,dJ)end;PlanetaryReference={}local function dR(dP)return setmetatable({galaxyAtlas=dP or{}},PlanetaryReference)end;PlanetaryReference.__index=function(d8,i)if type(i)=='number'then local system=d8.galaxyAtlas[i]return dO(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(dp)return function(d8,U)local dS,nv=next(d8,U)return dS,nv and dO(nv)end,dp.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(dp)local dT={}for _,dU in pairs(dp or{})do local dV=dU:getPlanetarySystemId()local dW=dJ.__tostring(dU,'    ')table.insert(dT,b('  [%s]={%s\n  }',dV,dW))end;return b('{\n%s\n}\n',table.concat(dT,',\n'))end;PlanetaryReference.BodyParameters=dx;PlanetaryReference.MapPosition=dF;PlanetaryReference.PlanetarySystem=dO;function PlanetaryReference.createBodyParameters(dX,dz,dY,dZ,d_,e0,e1)assert(d6(dX),'Argument 1 (planetarySystemId) must be a number:'..type(dX))assert(d6(dz),'Argument 2 (bodyId) must be a number:'..type(dz))assert(d6(dY),'Argument 3 (surfaceArea) must be a number:'..type(dY))assert(d7(dZ),'Argument 4 (aPosition) must be an array or vec3:'..type(dZ))assert(d7(d_),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(d_))assert(d6(e0),'Argument 6 (altitude) must be in meters:'..type(e0))assert(d6(e1),'Argument 7 (gravityAtPosition) must be number:'..type(e1))local dA=math.sqrt(dY/4/math.pi)local cF=dA+e0;local e2=vec3(dZ)+cF*vec3(d_)local dC=e1*cF*cF;return dx(dX,dz,dA,e2,dC)end;PlanetaryReference.isMapPosition=dc;function PlanetaryReference:getPlanetarySystem(dG)if i==nil then i=0 end;if nv==nil then nv=0 end;local dX=dG;if dc(dG)then dX=dG.systemId end;if type(dX)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dJ then system=dO(system)end;return system end end end;function dJ:castIntersections(e3,e4,e5,e6)local e5=e5 or function(e7)return 1.05*e7.radius end;local e8={}if e6 then for _,i in ipairs(e6)do e8[i]=self[i]end else e6={}for U,e7 in pairs(self)do table.insert(e6,U)e8[U]=e7 end end;local function e9(ea,eb)local ec=e8[ea].center-e3;local ed=e8[eb].center-e3;return ec:len()<ed:len()end;table.sort(e6,e9)local ee=e4:normalize()for i,al in ipairs(e6)do local e7=e8[al]local ef=e7.center-e3;local dA=e5(e7)local eg=ef:dot(ee)local eh=eg^2-(ef:len2()-dA^2)if eh>=0 then local ei=math.sqrt(eh)local ej=eg+ei;local ek=eg-ei;if ek>0 then return e7,ej,ek elseif ej>0 then return e7,ej,nil end end end;return nil,nil,nil end;function dJ:closestBody(el)assert(type(el)=='table','Invalid coordinates.')local em,e7;local en=vec3(el)for _,eo in pairs(self)do local ep=(eo.center-en):len2()if not e7 or ep<em then e7=eo;em=ep end end;return e7 end;function dJ:convertToBodyIdAndWorldCoordinates(dG)local eq=dG;if d9(dG)then eq=dF(dG)end;if eq.bodyId==0 then return 0,vec3(eq.latitude,eq.longitude,eq.altitude)end;local eo=self:getBodyParameters(eq)if eo then return eq.bodyId,eo:convertToWorldCoordinates(eq)end end;function dJ:getBodyParameters(dG)local dz=dG;if dc(dG)then dz=dG.bodyId end;assert(d6(dz),'Argument 1 (bodyId) must be a number:'..type(dz))return self[dz]end;function dJ:getPlanetarySystemId()local _,V=next(self)return V and V.planetarySystemId end;function ds:convertToMapPosition(dB)assert(d7(dB),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dB))local er=vec3(dB)if self.bodyId==0 then return setmetatable({latitude=er.x,longitude=er.y,altitude=er.z,bodyId=0,systemId=self.planetarySystemId},dD)end;local es=er-self.center;local cF=es:len()local bo=cF-self.radius;local dH=0;local dI=0;if not dj(cF,0)then local et=math.atan(es.y,es.x)dI=et>=0 and et or 2*math.pi+et;dH=math.pi/2-math.acos(es.z/cF)end;return setmetatable({latitude=dH,longitude=dI,altitude=bo,bodyId=self.bodyId,systemId=self.planetarySystemId},dD)end;function ds:convertToWorldCoordinates(dG)local eq=d9(dG)and dF(dG)or dG;if eq.bodyId==0 then return vec3(eq.latitude,eq.longitude,eq.altitude)end;assert(dc(eq),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(eq.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(eq.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local eu=math.cos(eq.latitude)return self.center+(self.radius+eq.altitude)*vec3(eu*math.cos(eq.longitude),eu*math.sin(eq.longitude),math.sin(eq.latitude))end;function ds:getAltitude(dB)return(vec3(dB)-self.center):len()-self.radius end;function ds:getDistance(dB)return(vec3(dB)-self.center):len()end;function ds:getGravity(dB)local ev=self.center-vec3(dB)local ew=ev:len2()return self.GM/ew*ev/math.sqrt(ew)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dR(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function d9(da)return type(da)=='string'end;local function d7(d8)return type(d8)=='table'end;local function dj(dk,dl)if dk==0 then return math.abs(dl)<1e-09 end;if dl==0 then return math.abs(dk)<1e-09 end;return math.abs(dk-dl)<math.max(math.abs(dk),math.abs(dl))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bo)assert(self.body)local cF=bo+self.body.radius;if not dj(cF,0)then local orbit=math.sqrt(self.body.GM/cF)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dG,velocity)assert(self.body)assert(d7(dG)or d9(dG))assert(d7(velocity))local bE=(d9(dG)or PlanetRef.isMapPosition(dG))and self.body:convertToWorldCoordinates(dG)or vec3(dG)local V=vec3(velocity)local ex=bE-self.body.center;local ed=V:len2()local ey=ex:len()local ez=self.body.GM;local eA=((ed-ez/ey)*ex-ex:dot(V)*V)/ez;local dk=ez/(2*ez/ey-ed)local eB=eA:len()local ee=eA:normalize()local eC=dk*(1-eB)local eD=dk*(1+eB)local eE=eC*ee+self.body.center;local eF=eB<=1 and-eD*ee+self.body.center or nil;local eG=math.sqrt(dk*ez*(1-eB*eB))local eH=eF and 2*math.pi*math.sqrt(dk^3/ez)local eI=math.acos(eA:dot(ex)/(eB*ey))if ex:dot(V)<0 then eI=-(eI-2*math.pi)end;local eJ=math.acos((math.cos(eI)+eB)/(1+eB*math.cos(eI)))local eK=eJ;if eK<0 then eK=eK+2*math.pi end;local eL=eK-eB*math.sin(eK)local eM=0;local eN=0;local eO=0;if eH~=nil then eM=eL/(2*math.pi/eH)eN=eH-eM;eO=eN+eH/2;if eI-math.pi>0 then eN=eM;eO=eN+eH/2 end;if eO>eH then eO=eO-eH end end;return{periapsis={position=eE,speed=eG/eC,circularOrbitSpeed=math.sqrt(ez/eC),altitude=eC-self.body.radius},apoapsis=eF and{position=eF,speed=eG/eD,circularOrbitSpeed=math.sqrt(ez/eD),altitude=eD-self.body.radius},currentVelocity=V,currentPosition=bE,eccentricity=eB,period=eH,eccentricAnomaly=eJ,meanAnomaly=eL,timeToPeriapsis=eN,timeToApoapsis=eO}end;local function eP(eQ)local eo=PlanetRef.BodyParameters(eQ.planetarySystemId,eQ.bodyId,eQ.radius,eQ.center,eQ.GM)return setmetatable({body=eo},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eP(...)end})end;function Kinematics()local Kinematic={}local eR=30000000/3600;local eS=eR*eR;local eT=100;local function eU(V)return 1/math.sqrt(1-V*V/eS)end;function Kinematic.computeAccelerationTime(eV,eW,eX)local eY=eR*math.asin(eV/eR)return(eR*math.asin(eX/eR)-eY)/eW end;function Kinematic.computeDistanceAndTime(eV,eX,eZ,e_,f0,f1)f0=f0 or 0;f1=f1 or 0;local f2=eV<=eX;local f3=e_*(f2 and 1 or-1)/eZ;local f4=-f1/eZ;local f5=f3+f4;if f2 and f5<=0 or not f2 and f5>=0 then return-1,-1 end;local f6,f7=0,0;if f3~=0 and f0>0 then local eY=math.asin(eV/eR)local f8=math.pi*(f3/2+f4)local f9=f3*f0;local fa=eR*math.pi;local V=function(d8)local aK=(f8*d8-f9*math.sin(math.pi*d8/2/f0)+fa*eY)/fa;local fb=math.tan(aK)return eR*fb/math.sqrt(fb*fb+1)end;local fc=f2 and function(da)return da>=eX end or function(da)return da<=eX end;f7=2*f0;if fc(V(f7))then local fd=0;while math.abs(f7-fd)>0.5 do local d8=(f7+fd)/2;if fc(V(d8))then f7=d8 else fd=d8 end end end;local fe=eV;local ff=f7/eT;for fg=1,eT do local bp=V(fg*ff)f6=f6+(bp+fe)*ff/2;fe=bp end;if f7<2*f0 then return f6,f7 end;eV=fe end;local eY=eR*math.asin(eV/eR)local fh=(eR*math.asin(eX/eR)-eY)/f5;local fi=eS*math.cos(eY/eR)/f5;local cF=fi-eS*math.cos((f5*fh+eY)/eR)/f5;return cF+f6,fh+f7 end;function Kinematic.computeTravelTime(eV,eW,cF)if cF==0 then return 0 end;if eW>0 then local eY=eR*math.asin(eV/eR)local fi=eS*math.cos(eY/eR)/eW;return(eR*math.acos(eW*(fi-cF)/eS)-eY)/eW end;assert(eV>0,'Acceleration and initial speed are both zero.')return cF/eV end;function Kinematic.lorentz(V)return eU(V)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(cF)local fj=cF>100000;local W=""if fj then W=round(cF/1000/200,1).." SU"elseif cF<1000 then W=round(cF,1).." M"else W=round(cF/1000,1).." KM"end;return W end;function getDistanceDisplayString2(cF)local fj=cF>100000;local W=""if fj then W=round(cF/1000/200,2).." SU"elseif cF<1000 then W=round(cF,2).." M"else W=round(cF/1000,2).." KM"end;return W end;function getSpeedDisplayString(bp)return a(round(bp*3.6,0)+0.5).." km/h"end;function FormatTimeString(fk)local fl=a(fk/86400)local fm=a(fk/3600)local fn=a(fk/60%60)local fk=a(fk%60)if fk<0 or fm<0 or fn<0 then return"0s"end;if fl>0 then return fl.."d "..fm.."h "elseif fm>0 then return fm.."h "..fn.."m "elseif fn>0 then return fn.."m "..fk.."s"else return fk.."s"end end;function getMagnitudeInDirection(bf,e4)bf=vec3(bf)e4=vec3(e4):normalize()local W=bf*e4;return W.x+W.y+W.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local fo=AtlasOrdered[AutopilotTargetIndex].index;local fp=atlas[0][fo]if fp.center then AutopilotTargetName=fp.name;AutopilotTargetPlanet=galaxyReference[0][fo]if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=fp;for _,V in pairs(galaxyReference[0])do if V.name==CustomTarget.planetname then AutopilotTargetPlanet=V;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fq=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return fq end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local bp=vec3(velocity):len()local fr,fs=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local ft,fu;if not TurnBurn then ft,fu=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else ft,fu=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fv;if not TurnBurn then _,fv=GetAutopilotBrakeDistanceAndTime(bp)else _,fv=GetAutopilotTBBrakeDistanceAndTime(bp)end;local fw=0;local fx=0;if AutopilotCruising or not Autopilot and bp>5 then fx=Kinematic.computeTravelTime(bp,0,AutopilotDistance)elseif ft+fr<AutopilotDistance then fw=AutopilotDistance-(ft+fr)fx=Kinematic.computeTravelTime(8333.0556,0,fw)else local fy=(AutopilotDistance-ft)/fr;fr=AutopilotDistance-ft;fs=fs*fy end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fx elseif AutopilotBraking then return fv elseif AutopilotCruising then return fx+fv else return fs+fu+fx end end;function GetAutopilotBrakeDistanceAndTime(bp)if not InAtmo then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(bp,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(bp,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bp)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(bp,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local fz=Nav.axisCommandManager:getAxisCommandType(0)local bB="TRAVEL"if fz==1 then bB="CRUISE"end;if Autopilot then bB="AUTOPILOT"end;return bB end;function hoverDetectGround()local fA=-1;if vBooster then fA=vBooster.distance()elseif hover then fA=hover.distance()end;return fA end;function round(c9,fB)local fC=10^(fB or 0)return a(c9*fC+0.5)/fC end;function tablelength(fD)local fE=0;for _ in pairs(fD)do fE=fE+1 end;return fE end;function BeginProfile(fF)ProfileTimeStart=system.getTime()end;function EndProfile(fF)local fG=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fG;ProfileCount=ProfileCount+1;if fG>ProfileTimeMax then ProfileTimeMax=fG end;if fG<ProfileTimeMin then ProfileTimeMin=fG end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fH=ProfileTimeSum;local fI=ProfileTimeSum/ProfileCount;local fJ=ProfileTimeMin;local fK=ProfileTimeMax;local fL=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fH,fI,fJ,fK,fL))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fM=radar_1.getEntries()local fN=radar_1.getData()if#fM>0 then if HasSpaceRadar and EmergencyWarp then local fO=fN:gmatch('{"constructId[^}]*}[^}]*}')for V in fO do local al,cF=V:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*)]])if al~=nil and al~=""then cF=math.floor(cF)if cF<EmergencyWarpDistance and cF>IgnoreEmergencyWarpDistance then if NotTriedEmergencyWarp and json.decode(warpdrive.getData()).errorMsg~="PLANET TOO CLOSE"then if radar_1.hasMatchingTransponder(al)~=1 then if RequireLock then if not V:find('targetThreatState":0')then InEmergencyWarp=true;NotTriedEmergencyWarp=false;break end else InEmergencyWarp=true;NotTriedEmergencyWarp=false;break end end end end end end end;local fP=fN:find('identifiedConstructs":%[%]')if fP==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fP~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fM)local fQ={}for U,V in pairs(fM)do if radar_1.hasMatchingTransponder(V)==1 then fQ[#fQ+1]=V end end;if#fQ>0 then local ac=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,ac)for U,V in pairs(fQ)do ac=ac+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,ac,radar_1.getConstructName(V))end end else local fO;fO=fN:find('worksInEnvironment":false')if fO then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end end end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fR=unit.getAtmosphereDensity()if door and(fR>0 or fR==0 and CoreAltitude<10000)then for _,V in pairs(door)do V.activate()end end;if forcefield and(fR>0 or fR==0 and CoreAltitude<10000)then for _,V in pairs(forcefield)do V.activate()end end;if dbHud then if not WipedDatabank then for U,V in pairs(AutoVariables)do dbHud.setStringValue(V,json.encode(_G[V]))end;for U,V in pairs(SaveableVariables)do dbHud.setStringValue(V,json.encode(_G[V]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fS)if fS=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local fT=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if fT then Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else Distance=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;EmergencyWarp=false;InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).destination~="Unknown"and json.decode(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif fS=="oneSecond"then clearAllCheck=false;refreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local ao={}local bB=GetFlightStyle()DrawOdometer(ao,TotalDistanceTrip,TotalDistanceTravelled,bB,FlightTime)checkDamage(ao)LastOdometerOutput=table.concat(ao,"")collectgarbage("collect")elseif fS=="reEmergencyWarp"then if EmergencyWarp then NotTriedEmergencyWarp=true;InEmergencyWarp=true end;unit.stopTimer("reEmergencyWarp")elseif fS=="msgTick"then local ao={}DisplayMessage(ao,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fS=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fS=="apTick"then local l=Nav.control.isRemoteControlled;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())InAtmo=unit.getAtmosphereDensity()>0;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)HovGndDet=hoverDetectGround()local fU=system.getMouseDeltaX()local fV=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fW=velMag>8334;if not fW and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fW;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local ao={}HUDPrologue(ao)if showHud then updateHud(ao)else DisplayOrbitScreen(ao)DrawWarnings(ao)end;HUDEpilogue(ao)ao[#ao+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(ao,MsgText)end;if l()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(ao)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(ao)if screen_1.getMouseState()==1 then CheckButtons()end;ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fU;SimulatedY=SimulatedY+fV end;SetButtonContains()DrawButtons(ao)if not Animating and not Animated then local fX=table.concat(ao,"")ao={}ao[#ao+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ao[#ao+1]=GalaxyMapHTML;ao[#ao+1]=fX;ao[#ao+1]="</body>"Animating=true;ao[#ao+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ao,"")system.setScreen(content)elseif Animated then local fX=table.concat(ao,"")ao={}ao[#ao+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ao[#ao+1]=GalaxyMapHTML;ao[#ao+1]=fX;ao[#ao+1]="</body>"end;if not Animating then ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fU;SimulatedY=SimulatedY+fV;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="virtual joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fV,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fU,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(ao)end else SetButtonContains()DrawButtons(ao)end;ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;ao[#ao+1]=[[</svg></body>]]content=table.concat(ao,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then local fY=AlignToWorldVector(vec3(velocity),0.01)if SpaceLand then autoRoll=true;if fY then ProgradeIsOn=false;ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if InAtmo then RetrogradeIsOn=false elseif velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and SpaceLand then if unit.getAtmosphereDensity()==0 then ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true else SpaceLand=false;ToggleAutopilot()end end;if FinalLand and CoreAltitude<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()FinalLand=false end;if Autopilot and unit.getAtmosphereDensity()==0 then local ft,fu;if not TurnBurn then ft,fu=GetAutopilotBrakeDistanceAndTime(velMag)else ft,fu=GetAutopilotTBBrakeDistanceAndTime(velMag)end;ft=ft;fu=fu;local fZ=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local f_=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local g0=getMagnitudeInDirection(f_,AutopilotShipUp)local g1=getMagnitudeInDirection(f_,AutopilotShipRight)local g2=-g1*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local g3=-g0*AutopilotDistance*velMag*TrajectoryAlignmentStrength;fZ=AutopilotTargetCoords+-g2*vec3(AutopilotShipRight)+-g3*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fZ)-vec3(core.getConstructWorldPos())):len()local g4=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(g4)..'", "unit":""}')local g5=true;local g6=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(g6)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then g5=AlignToWorldVector((fZ-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then g5=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not g5 or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false elseif not APThrottleSet then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(g6-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and APThrottleSet then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end;if AutopilotDistance<=ft then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"MsgText="Autopilot completed, orbit established"BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false;if CustomTarget~=nil then ProgradeIsOn=true;SpaceLand=true end end end elseif AutopilotCruising then if AutopilotDistance<=ft then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if g5 then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif g5 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not APThrottleSet then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true;BrakeIsOn=false end end end end end;if FollowMode then autoRoll=true;local g7=0;local bE=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local g8=bE-vec3(core.getConstructWorldPos())local g9=vec3(g8):project_on(vec3(core.getConstructWorldOrientationForward())):len()local ga=vec3(g8):project_on(vec3(core.getConstructWorldOrientationRight())):len()local cF=math.sqrt(g9*g9+ga*ga)AlignToWorldVector(g8:normalize())local gb=40;local gc=cF<gb;local gd=100;local ge=utils.clamp((cF-gb)/2,10,gd)PitchInput2=0;local g5=math.abs(YawInput2)<0.1;if g5 and velMag<ge and not gc then BrakeIsOn=false;g7=-20 else BrakeIsOn=true;g7=0 end;local ar=vec3(core.getConstructWorldOrientationForward())local as=vec3(core.getConstructWorldOrientationRight())local at=vec3(core.getWorldVertical())local au=getPitch(at,ar,as)local gf=1.0;if math.abs(g7-au)>gf then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(g7-au)local gg=pitchPID:get()PitchInput2=gg end end;local bX=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local bD=unit.getClosestPlanetInfluence()>0;local bo=CoreAltitude;local gh=HoldAltitude-bo;local gi=500+velMag;local g7=(utils.smoothstep(gh,-gi,gi)-0.5)*2*MaxPitch;if not AltitudeHold then g7=0 end;if LockPitch~=nil then if bD then g7=LockPitch else LockPitch=nil end end;autoRoll=true;if Reentry then local gj=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=gj then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,gj)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then g7=-80;if unit.getAtmosphereDensity()>0.02 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;g7=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false;autoRoll=autoRollPreference end end;local gk=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bh=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bh)local gl=bh:len()-bh:project_on(bX):len()local a6=json.decode(unit.getData()).maxBrake;local bV=velocity.x*bX.x+velocity.y*bX.y+velocity.z*bX.z;local gm=velocity:len()-math.abs(bV)local gn=vec3(core.getWorldAirFrictionAcceleration())if a6~=nil then LastMaxBrake=a6;BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gm,0,core.getConstructMass(),0,0,a6+(gn:len()-gn:project_on(bX):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gm,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if gl<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and gl>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=gl end;PitchInput2=gk;local ar=vec3(core.getConstructWorldOrientationForward())local as=vec3(core.getConstructWorldOrientationRight())local at=vec3(core.getWorldVertical())local fA=-1;local au=getPitch(at,ar,as)local gf=0.1;if BrakeLanding then g7=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bV=velocity.x*bX.x+velocity.y*bX.y+velocity.z*bX.z;fA=HovGndDet;if fA>-1 then if math.abs(g7-au)<gf then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-bX)<0.99 then BrakeIsOn=true elseif bV<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or SpaceLaunch then if g7<20 then AutoTakeoff=false;if not SpaceLaunch then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;SpaceLaunch=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif SpaceLaunch and unit.getAtmosphereDensity()==0 and CoreAltitude>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(g7-au)>gf then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(g7-au)local gg=pitchPID:get()PitchInput2=PitchInput2+gg end end;LastEccentricity=orbit.eccentricity;if antigrav and not ExternalAGG and CoreAltitude<200000 then if antigrav.getState()==1 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end else if AntigravTargetAltitude==nil then desiredBaseAltitude=CoreAltitude else desiredBaseAltitude=AntigravTargetAltitude end end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local go=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)go=math.max(go,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local gp=utils.clamp(PitchInput+PitchInput2+system.getControlDeviceForwardInput(),-1,1)local gq=utils.clamp(RollInput+RollInput2+system.getControlDeviceYawInput(),-1,1)local gr=utils.clamp(YawInput+YawInput2-system.getControlDeviceLeftRightInput(),-1,1)local gs=BrakeInput;local gt=vec3(core.getWorldVertical())local gu=vec3(core.getConstructWorldOrientationUp())local gv=vec3(core.getConstructWorldOrientationForward())local gw=vec3(core.getConstructWorldOrientationRight())local gx=vec3(core.getWorldVelocity())local gy=vec3(core.getWorldVelocity()):normalize()local gz=getRoll(gt,gv,gw)local gA=math.abs(gz)local gB=utils.sign(gz)local f=unit.getAtmosphereDensity()local gC=vec3(core.getWorldAngularVelocity())local gD=gp*pitchSpeedFactor*gw+gq*rollSpeedFactor*gv+gr*yawSpeedFactor*gu;if gt:len()>0.01 and f>0.0 or ProgradeIsOn then local gE=1.0;if autoRoll==true and gA>gE and gq==0 then local gF=utils.clamp(0,gA-30,gA+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gF-gz)local gG=rollPID:get()gD=gD+gG*gv end end;if gt:len()>0.01 and f>0.0 then local gH=20.0;if turnAssist==true and gA>gH and gp==0 and gr==0 then local gI=turnAssistFactor*0.1;local gJ=turnAssistFactor*0.025;local gK=(gA-gH)/(180-gH)*180;local gL=0;if gK<90 then gL=gK/90 elseif gK<180 then gL=(180-gK)/90 end;gL=gL*gL;local gM=-gB*gJ*(1.0-gL)local gN=gI*gL;gD=gD+gN*gw+gM*gu end end;local gO=1;local gP=0;local gQ=1;local gR=go*(gD-gC)local gS=vec3(core.getWorldAirFrictionAngularAcceleration())gR=gR-gS;Nav:setEngineTorqueCommand('torque',gR,gO,'airfoil','','',gQ)local gT=-gs*(brakeSpeedFactor*gx+brakeFlatFactor*gy)Nav:setEngineForceCommand('brake',gT)local gU=''local gV=vec3()local gW=false;local gX='thrust analog longitudinal'local gY=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gY==axisCommandType.byThrottle then local gZ=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gX,axisCommandId.longitudinal)Nav:setEngineForceCommand(gX,gZ,gO)elseif gY==axisCommandType.byTargetSpeed then local gZ=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gU=gU..' , '..gX;gV=gV+gZ;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gW=true end end;local g_='thrust analog lateral'local h0=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if h0==axisCommandType.byThrottle then local h1=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(g_,axisCommandId.lateral)Nav:setEngineForceCommand(g_,h1,gO)elseif h0==axisCommandType.byTargetSpeed then local h2=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gU=gU..' , '..g_;gV=gV+h2 end;local h3='thrust analog vertical'local h4=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if h4==axisCommandType.byThrottle then local h5=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(h3,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(h3,h5,gO,'airfoil','ground','',gQ)else Nav:setEngineForceCommand(h3,vec3(),gO)Nav:setEngineForceCommand('airfoil vertical',h5,gO,'airfoil','','',gQ)Nav:setEngineForceCommand('ground vertical',h5,gO,'ground','','',gQ)end elseif h4==axisCommandType.byTargetSpeed then if UpAmount==0 then Nav:setEngineForceCommand('hover',vec3(),gO)end;local h6=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gU=gU..' , '..h3;gV=gV+h6 end;if gV:len()>constants.epsilon then if BrakeInput~=0 or gW or math.abs(gy:dot(gv))<0.95 then gU=gU..', brake'end;Nav:setEngineForceCommand(gU,gV,gP,'','','',gQ)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting then local bp=vec3(core.getVelocity()):len()local h7=unit.setEngineThrust;local h8=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local h9=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bp*3.6>h9*(1-h8)then h7('rocket_engine',0)elseif IsBoosting then h7('rocket_engine',1)end else local ha=unit.getThrottle()local ge=ha/100;if f==0 then ge=ge*MaxGameVelocity;if bp>=ge*(1-h8)then h7('rocket_engine',0)elseif IsBoosting then h7('rocket_engine',1)end else ge=ge*1050/3.6;if bp>=ge*(1-h8)then h7('rocket_engine',0)elseif IsBoosting then h7('rocket_engine',1)end end end end end;function script.onUpdate()if not SetupComplete then local _,W=coroutine.resume(beginSetup)if W then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(hb)if hb=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and HovGndDet==-1 and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif hb=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif hb=="forward"then PitchInput=PitchInput-1 elseif hb=="backward"then PitchInput=PitchInput+1 elseif hb=="left"then RollInput=RollInput-1 elseif hb=="right"then RollInput=RollInput+1 elseif hb=="yawright"then YawInput=YawInput-1 elseif hb=="yawleft"then YawInput=YawInput+1 elseif hb=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif hb=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif hb=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif hb=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif hb=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif hb=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif hb=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif hb=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif hb=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif hb=="option4"then ToggleAutopilot()ToggleView=false elseif hb=="option5"then ToggleLockPitch()ToggleView=false elseif hb=="option6"then ToggleAltitudeHold()ToggleView=false elseif hb=="option7"then wipeSaveVariables()ToggleView=false elseif hb=="option8"then ToggleFollowMode()ToggleView=false elseif hb=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif hb=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif hb=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif hb=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif hb=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif hb=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif hb=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif hb=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif hb=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end elseif hb=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(hb)if hb=="forward"then PitchInput=0 elseif hb=="backward"then PitchInput=0 elseif hb=="left"then RollInput=0 elseif hb=="right"then RollInput=0 elseif hb=="yawright"then YawInput=0 elseif hb=="yawleft"then YawInput=0 elseif hb=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif hb=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif hb=="up"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif hb=="down"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif hb=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif hb=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif hb=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif hb=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif hb=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(hb)if hb=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif hb=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif hb=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif hb=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(ao,hc)if hc~="empty"then ao[#ao+1]=[[<text class="msg" x="50%%" y="310" >]]for hd in string.gmatch(hc,"([^\n]+)")do ao[#ao+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],hd)end;ao[#ao+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a1=system.getTime()local velocity=vec3(core.getWorldVelocity())local bz=vec3(velocity):len()local he=a1-LastTravelTime;if bz>1.38889 then bz=bz/1000;local hf=bz*(a1-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+hf;TotalDistanceTrip=TotalDistanceTrip+hf end;FlightTime=FlightTime+he;TotalFlightTime=TotalFlightTime+he;LastTravelTime=a1 end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
