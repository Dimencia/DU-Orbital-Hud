name: ButtonsHud - Dimencia and Archaegeo v5.451 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 350 --export: (Default: 350)
        circleRad = 400 --export: (Default: 400)
        DeadZone = 50 --export: (Default: 50)
        DisplayOrbit = true --export: (Default: true) 
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        ReentrySpeed = 1050 --export: (Default: 1050)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        ReentryAltitude = 2500 --export: (Default: 2500)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollPreference = false --export: (Default: false)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        turnAssist = true --export: (Default: true)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        autoRollRollThreshold = 0 --export: (Default: 0)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        minRollVelocity = 150 --export: (Default: 150)
        VertTakeOffEngine = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=math.atan;function round(q,r)local s=10^(r or 0)return d(q*s+0.5)/s end;local t=SafeR;local u=SafeB;local v=SafeG;local w=false;local x=0;local y=""local z=0;local A=0;local B=false;local C=0;local D=false;local E=round(ResolutionX/2,0)local F=round(ResolutionY/2,0)local G=false;local H=true;local I=55;local J=false;local K=1;local L=1;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=5;local Y=5;local Z=X;local a0=Y;local a1=false;local a2,a3=0;local a4,a5=0;local a6=nil;local a7=0;local a8=0;local a9=false;local aa=0;local ab=0;local ac=0;local ad=3;local ae=0;local af=""local ag=""local ah=0;local ai=false;local aj=false;local ak=false;local al=-1;local am=false;local an=""local ao=j()>0;local ap=core.getAltitude()local aq=core.getElementIdList()local ar=system.getTime()local as=nil;local at=false;local au=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]local av=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local aw={}local ax=0;local ay=0;local az=""local aA=true;local aB={}local aC=1;local aD=0.001;local aE=ResolutionX;local aF=ResolutionY;local aG=nil;local aH=nil;local aI=nil;local aJ=nil;local aK=false;local aL=false;local aM=0;local aN=nil;local aO={}local aP={}local aQ={}local aR=0;local aS=false;local aT={}local aU={}local aV=d(1/apTickRate)*2;local aW={}local aX={}local aY={}local aZ={}local a_=false;local b0=16;local b1=0;local b2=nil;local b3=""local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=nil;local bb=nil;local bc=false;local bd=false;local be=autoRollPreference;local bf=vec3(core.getWorldVelocity())local bg=vec3(bf):len()local bh=LandingGearGroundHeight;local bi=system.getMouseDeltaX()local bj=system.getMouseDeltaY()local bk=false;local bl=system.getTime()local bm=0;local bn=0;local bo=0;local bp=AtmoSpeedLimit;local bq=0;local br=nil;local bs=0;local bt=0;local bu=false;local bv=false;local bw={VectorToTarget=false}local bx=false;local by=0;local bz=nil;local bA=false;local bB=false;local bC=false;local bD=false;local bE=0;local bF=2000;function LoadVariables()if dbHud_1 then local bG=dbHud_1.hasKey;if not useTheseSettings then for bH,bI in pairs(a)do if bG(bI)then local bJ=f(dbHud_1.getStringValue(bI))if bJ~=nil then c(bI.." "..dbHud_1.getStringValue(bI))_G[bI]=bJ;aK=true end end end end;coroutine.yield()for bH,bI in pairs(b)do if bG(bI)then local bJ=f(dbHud_1.getStringValue(bI))if bJ~=nil then c(bI.." "..dbHud_1.getStringValue(bI))_G[bI]=bJ;aK=true end end end;if useTheseSettings then W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ad=5 elseif aK then W="Loaded Saved Variables (see Lua Chat Tab for list)"else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bK=system.getTime()if LastStartTime+180<bK then LastMaxBrakeInAtmo=0 end;if aK then E=round(ResolutionX/2,0)F=round(ResolutionY/2,0)aE=ResolutionX;aF=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)be=autoRollPreference end;LastStartTime=bK;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ad=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;au=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]av=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]bp=AtmoSpeedLimit end;function CalculateFuelVolume(bL,bM)if bL>bM then bM=bL end;if ContainerOptimization>0 then bM=bM-bM*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bM=bM-bM*FuelTankOptimization*0.05 end;return bM end;function ProcessElements()local bN=fuelX~=0 and fuelY~=0;for bH in pairs(aq)do local type=l(aq[bH])if string.match(type,'^.*Space Engine$')then bD=true;if string.match(tostring(core.getElementTagsById(aq[bH])),'^.*vertical.*$')then local bO=core.getElementRotationById(aq[bH])if bO[4]<0 then if utils.round(-bO[4],0.1)==0.5 then bB=true;system.print("Space Engine Up detected")end else if utils.round(bO[4],0.1)==0.5 then bC=true;system.print("Space Engine Down detected")end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local bP=h(aq[bH])if bP>10000 then b0=128 elseif bP>1000 then b0=64 elseif bP>150 then b0=32 end end;aR=aR+h(aq[bH])if bN and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bP=h(aq[bH])local bQ=m(aq[bH])local bL=0;local bR=system.getTime()if type=="Atmospheric Fuel Tank"then local bM=400;local bS=35.03;if bP>10000 then bM=51200;bS=5480 elseif bP>1300 then bM=6400;bS=988.67 elseif bP>150 then bM=1600;bS=182.67 end;bL=bQ-bS;if fuelTankHandlingAtmo>0 then bM=bM+bM*fuelTankHandlingAtmo*0.2 end;bM=CalculateFuelVolume(bL,bM)aO[#aO+1]={aq[bH],core.getElementNameById(aq[bH]),bM,bS,bL,bR}end;if type=="Rocket Fuel Tank"then local bM=320;local bS=173.42;if bP>65000 then bM=40000;bS=25740 elseif bP>6000 then bM=5120;bS=4720 elseif bP>700 then bM=640;bS=886.72 end;bL=bQ-bS;if fuelTankHandlingRocket>0 then bM=bM+bM*fuelTankHandlingRocket*0.1 end;bM=CalculateFuelVolume(bL,bM)aQ[#aQ+1]={aq[bH],core.getElementNameById(aq[bH]),bM,bS,bL,bR}end;if type=="Space Fuel Tank"then local bM=2400;local bS=182.67;if bP>10000 then bM=76800;bS=5480 elseif bP>1300 then bM=9600;bS=988.67 end;bL=bQ-bS;if fuelTankHandlingSpace>0 then bM=bM+bM*fuelTankHandlingSpace*0.2 end;bM=CalculateFuelVolume(bL,bM)aP[#aP+1]={aq[bH],core.getElementNameById(aq[bH]),bM,bS,bL,bR}end end end end;function SetupChecks()if gyro~=nil then as=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;local bT=j()if door and(bT>0 or bT==0 and ap<10000)then for _,bI in pairs(door)do bI.toggle()end end;if switch then for _,bI in pairs(switch)do bI.toggle()end end;if forcefield and(bT>0 or bT==0 and ap<10000)then for _,bI in pairs(forcefield)do bI.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bU=AboveGroundLevel()if bU~=-1 or not ao and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if bh~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bh)if bh==0 and not M then GearExtended=true;BrakeIsOn=true end else bh=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ao and bU~=-1 then ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=ao end;function ConvertResolutionX(bI)if ResolutionX==1920 then return bI else return round(ResolutionX*bI/1920,0)end end;function ConvertResolutionY(bI)if ResolutionY==1080 then return bI else return round(ResolutionY*bI/1080,0)end end;function RefreshLastMaxBrake(bV,bW)if bV==nil then bV=core.g()end;bV=round(bV,5)local bX=j()if bW~=nil and bW or(aN==nil or aN~=bV)then local bf=core.getVelocity()local bY=vec3(bf):len()local bZ=f(unit.getData()).maxBrake;if bZ~=nil and bZ>0 and ao then bZ=bZ/utils.clamp(bY/100,0.1,1)bZ=bZ/bX;if bX>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bZ)/2 else LastMaxBrakeInAtmo=bZ end end end;if bZ~=nil and bZ>0 then LastMaxBrake=bZ end;aN=bV end end;function MakeButton(b_,c0,c1,c2,c3,c4,c5,c6,c7)local c8={enableName=b_,disableName=c0,width=c1,height=c2,x=c3,y=c4,toggleVar=c5,toggleFunction=c6,drawCondition=c7,hovered=false}table.insert(aB,c8)return c8 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bH,bI in pairs(b2[0])do table.insert(AtlasOrdered,{name=bI.name,index=bH})end;local function c9(ca,cb)return ca.name<cb.name end;table.sort(AtlasOrdered,c9)end;function AddLocationsToAtlas()for bH,bI in pairs(SavedLocations)do table.insert(b2[0],bI)end;UpdateAtlasLocationsList()end;function float_eq(cc,cd)if cc==0 then return math.abs(cd)<1e-09 end;if cd==0 then return math.abs(cc)<1e-09 end;return math.abs(cc-cd)<math.max(math.abs(cc),math.abs(cd))*epsilon end;function zeroConvertToMapPosition(ce,cf)local cg=vec3(cf)if ce.bodyId==0 then return setmetatable({latitude=cg.x,longitude=cg.y,altitude=cg.z,bodyId=0,systemId=ce.planetarySystemId},MapPosition)end;local ch=cg-ce.center;local ae=ch:len()local ci=ae-ce.radius;local cj=0;local ck=0;if not float_eq(ae,0)then local cl=math.atan(ch.y,ch.x)ck=cl>=0 and cl or 2*math.pi+cl;cj=math.pi/2-math.acos(ch.z/ae)end;return setmetatable({latitude=math.deg(cj),longitude=math.deg(ck),altitude=ci,bodyId=ce.bodyId,systemId=ce.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cm)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cn='::pos{'..q..','..q..','..q..','..q..','..q..'}'local co,cp,cj,ck,ci=string.match(cm,cn)if co=="0"and cp=="0"then return vec3(tonumber(cj),tonumber(ck),tonumber(ci))end;ck=math.rad(ck)cj=math.rad(cj)local planet=b2[tonumber(co)][tonumber(cp)]local cq=math.cos(cj)local cr=vec3(cq*math.cos(ck),cq*math.sin(ck),math.sin(cj))return planet.center+(planet.radius+ci)*cr end;function AddNewLocationByWaypoint(cs,planet,cm)if dbHud_1 then local ct={}local position=zeroConvertToWorldCoordinates(cm)if planet.name=="Space"then ct={position=position,name=cs,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bT=false;if planet.hasAtmosphere then bT=true else bT=false end;ct={position=position,name=cs,atmosphere=bT,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=ct;table.insert(b2[0],ct)UpdateAtlasLocationsList()else W="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cu=planet.name..". "..#SavedLocations;if radar_1 then local cv,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cv~=nil and cv~=""then cu=cu.." "..radar_1.getConstructName(cv)end end;local ct={}local bT=false;if planet.hasAtmosphere then bT=true end;ct={position=position,name=cu,atmosphere=bT,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=ct;table.insert(b2[0],ct)UpdateAtlasLocationsList()W="Location saved as "..cu else W="Databank must be installed to save locations"end end;function UpdatePosition(cw)local cx=-1;local ct;for bH,bI in pairs(SavedLocations)do if bI.name and bI.name==CustomTarget.name then cx=bH;break end end;if cx~=-1 then local cy;if cw~=nil then ct={position=SavedLocations[cx].position,name=cw,atmosphere=SavedLocations[cx].atmosphere,planetname=SavedLocations[cx].planetname,gravity=SavedLocations[cx].gravity}else ct={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cx].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cx]=ct;cx=-1;for bH,bI in pairs(b2[0])do if bI.name and bI.name==CustomTarget.name then cx=bH end end;if cx>-1 then b2[0][cx]=ct end;UpdateAtlasLocationsList()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else W="Name Not Found"end end;function ClearCurrentPosition()local cx=-1;for bH,bI in pairs(b2[0])do if bI.name and bI.name==CustomTarget.name then cx=bH end end;if cx>-1 then table.remove(b2[0],cx)end;cx=-1;for bH,bI in pairs(SavedLocations)do if bI.name and bI.name==CustomTarget.name then W=bI.name.." saved location cleared"cx=bH;break end end;if cx~=-1 then table.remove(SavedLocations,cx)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cz)cz[#cz+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and ah==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if ah==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;ah=0 end end;function ToggleWidgets()if aA then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;aA=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;aA=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ao then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cA,cB,c3,c4,c1,c2)if cA>c3 and cA<c3+c1 and cB>c4 and cB<c4+c2 then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ap+AutoTakeoffAltitude end;bA=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if j()==0 then if IntoOrbit then bA=false;IntoOrbit=false;bu=false;bs=nil;bt=nil;bz=nil;bE=0;be=autoRollPreference;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end;bw.VectorToTarget=false;bw.AutopilotAlign=false;bx=false elseif unit.getClosestPlanetInfluence()>0 then IntoOrbit=true;be=true;bA=false;bs=nil;bt=nil;bE=0;if bz==nil then bz=planet end;if AltitudeHold then AltitudeHold=false;AutoTakeoff=false end else CancelIntoOrbit=true end;bA=false;IntoOrbit=false;bu=false;bs=nil;bt=nil;bz=nil;bE=0;be=autoRollPreference;if AltitudeHold then ToggleAltitudeHold()end;bw.VectorToTarget=false;bw.AutopilotAlign=false;bx=false end end;function ToggleLockPitch()if LockPitch==nil then local cC=vec3(core.getConstructWorldOrientationForward())local cD=vec3(core.getConstructWorldOrientationRight())local cE=vec3(core.getWorldVertical())local cF=getPitch(cE,cC,cD)LockPitch=cF;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bK=system.getTime()if bK-bn<1.5 then local cG=false;if planet.hasAtmosphere and(j()>0 and HoldAltitude==planet.spaceEngineMinAltitude-50)then cG=true;if IntoOrbit then ToggleIntoOrbit()end;bn=0;return end;if planet.hasAtmosphere and not cG then if j()>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+bF;by=HoldAltitude;bx=true;if not IntoOrbit then ToggleIntoOrbit()end;bu=true end end;bn=-1;if AltitudeHold or IntoOrbit then return end end else bn=bK end;if unit.getClosestPlanetInfluence()>0 and j()==0 then by=ap;bx=true;bu=true;ToggleIntoOrbit()if IntoOrbit then bn=bK else bn=0 end;return end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;BrakeLanding=false;Reentry=false;be=true;LockPitch=nil;bA=false;if hoverDetectGround()==-1 then AutoTakeoff=false;if bn>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=ap end end;if not ao then bA=false;bx=true;IntoOrbit=true;if not aj and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bn>-1 then HoldAltitude=ap+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if aj then HoldAltitude=100000 end;bn=bK else if IntoOrbit then ToggleIntoOrbit()end;be=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false;if IntoOrbit then ToggleIntoOrbit()end;bn=0 end end;function ToggleFollowMode()if o()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;be=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;function ToggleAutopilot()local bK=system.getTime()if bK-bo<1.5 and ao then if not bD then W="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+bF end;bo=-1;if Autopilot or VectorToTarget then return end end else bo=bK end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not aj then UpdateAutopilotTarget()local cH=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cH="::pos{"..cH.systemId..","..cH.bodyId..","..cH.latitude..","..cH.longitude..","..cH.altitude.."}"system.setWaypoint(cH)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then if bo==-1 then bn=0 end;HoldAltitude=ap;if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if ap>100000 or ap==0 then bA=false;Autopilot=true elseif ap<=100000 then if IntoOrbit then ToggleIntoOrbit()end;by=planet.noAtmosphericDensityAltitude+bF;bx=true;bw.AutopilotAlign=true;bw.VectorToTarget=true;bu=false;if not IntoOrbit then ToggleIntoOrbit()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then aj=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then local cI=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a6.name==planet.name and cI)then bA=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false end else aj=true;ToggleAltitudeHold()end else aj=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ap;TargetSet=false;Reentry=false;if IntoOrbit then ToggleIntoOrbit()end end;bo=bK end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;be=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;be=autoRollPreference;ai=false;ak=false;aa=0 end end;function CheckDamage(cz)local cJ=0;az=""local cK=aR;local cL=0;local cM=0;local cN=0;local cO=0;local cP=""for bH in pairs(aq)do local bP=0;local cQ=0;cQ=h(aq[bH])bP=k(aq[bH])cL=cL+bP;if bP<cQ then if bP==0 then cN=cN+1 else cM=cM+1 end;if aS and#aw==0 then position=vec3(core.getElementPositionById(aq[bH]))local c3=position.x-b0;local c4=position.y-b0;local cR=position.z-b0;table.insert(aw,core.spawnArrowSticker(c3,c4,cR+1,"down"))table.insert(aw,core.spawnArrowSticker(c3,c4,cR+1,"down"))core.rotateSticker(aw[2],0,0,90)table.insert(aw,core.spawnArrowSticker(c3+1,c4,cR,"north"))table.insert(aw,core.spawnArrowSticker(c3+1,c4,cR,"north"))core.rotateSticker(aw[4],90,90,0)table.insert(aw,core.spawnArrowSticker(c3-1,c4,cR,"south"))table.insert(aw,core.spawnArrowSticker(c3-1,c4,cR,"south"))core.rotateSticker(aw[6],90,-90,0)table.insert(aw,core.spawnArrowSticker(c3,c4-1,cR,"east"))table.insert(aw,core.spawnArrowSticker(c3,c4-1,cR,"east"))core.rotateSticker(aw[8],90,0,90)table.insert(aw,core.spawnArrowSticker(c3,c4+1,cR,"west"))table.insert(aw,core.spawnArrowSticker(c3,c4+1,cR,"west"))core.rotateSticker(aw[10],-90,0,90)table.insert(aw,aq[bH])end elseif aS and#aw>0 and aw[11]==aq[bH]then for cS in pairs(aw)do core.deleteSticker(aw[cS])end;aw={}end end;cJ=d(cL/cK*100)if cJ<100 then cz[#cz+1]=[[<g class="pbright txt">]]cO=d(cJ*2.55)cP=e("rgb(%d,%d,%d)",255-cO,cO,0)if cJ<100 then cz[#cz+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cP,cJ)if cN>0 then cz[#cz+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cP,cN,cM)elseif cM>0 then cz[#cz+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cP,cM)end end;cz[#cz+1]=[[<\g>]]end end;function DrawCursorLine(cz)local cT=d(utils.clamp(ae/(aE/4)*255,0,255))cz[#cz+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",ab,ac,d(t+0.5)+cT,d(v+0.5)-cT,d(u+0.5)-cT)end;function getPitch(cU,cV,cb)local cW=cU:cross(cb):normalize_inplace()local cF=math.acos(utils.clamp(cW:dot(-cV),-1,1))*constants.rad2deg;if cW:cross(-cV):dot(cb)<0 then cF=-cF end;return cF end;local function cX(cY,cZ,c_)cZ=cZ:project_on_plane(cY)c_=c_:project_on_plane(cY)return p(cZ:cross(c_):dot(cY),cZ:dot(c_))end;function clearAll()if am then am=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;G=false;ai=false;aj=false;J=false;be=autoRollPreference;VectorToTarget=false;TurnBurn=false;as=false;LockPitch=nil else am=true end end;function wipeSaveVariables()if not dbHud_1 then W="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ad=5 else if aL then for bH,bI in pairs(a)do dbHud_1.setStringValue(bI,g(nil))end;for bH,bI in pairs(b)do if bI~="SavedLocations"then dbHud_1.setStringValue(bI,g(nil))end end;W="Databank wiped. New variables will save after re-enter seat and exit"ad=5;aL=false;aK=false;a9=true else W="Press ALT-7 again to confirm wipe of ALL data"aL=true end end end;function CheckButtons()for _,bI in pairs(aB)do if bI.hovered then if not bI.drawCondition or bI.drawCondition()then bI.toggleFunction()end;bI.hovered=false end end end;function SetButtonContains()local c3=ab+aE/2;local c4=ac+aF/2;for _,bI in pairs(aB)do bI.hovered=Contains(c3,c4,bI.x,bI.y,bI.width,bI.height)end end;function DrawButton(cz,d0,hover,c3,c4,d1,d2,d3,d4,d5,d6)if type(d5)=="function"then d5=d5()end;if type(d6)=="function"then d6=d6()end;cz[#cz+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c3,c4,d1,d2)if d0 then cz[#cz+1]=e("%s'",d3)else cz[#cz+1]=d4 end;if hover then cz[#cz+1]=" style='stroke:white; stroke-width:2'"else cz[#cz+1]=" style='stroke:black; stroke-width:1'"end;cz[#cz+1]="></rect>"cz[#cz+1]=e("<text x='%f' y='%f' font-size='24' fill='",c3+d1/2,c4+d2/2+5)if d0 then cz[#cz+1]="black"else cz[#cz+1]="white"end;cz[#cz+1]="' text-anchor='middle' font-family='Montserrat'>"if d0 then cz[#cz+1]=e("%s</text>",d5)else cz[#cz+1]=e("%s</text>",d6)end end;function DrawButtons(cz)local d7="rgb(50,50,50)'"local d8="rgb(210,200,200)"local d9=DrawButton;for _,bI in pairs(aB)do local c0=bI.disableName;local b_=bI.enableName;if type(c0)=="function"then c0=c0()end;if type(b_)=="function"then b_=b_()end;if not bI.drawCondition or bI.drawCondition()then d9(cz,bI.toggleVar(),bI.hovered,bI.x,bI.y,bI.width,bI.height,d8,d7,c0,b_)end end end;function DrawTank(cz,a_,c3,da,db,dc,dd,de)local df=1;local dg=2;local dh=3;local di=4;local dj=5;local dk=6;local dl=""local dm=0;local dn=fuelY;local dp=fuelY+10;if o()==1 and not RemoteHud then dn=dn-50;dp=dp-50 end;cz[#cz+1]=[[<g class="pdim txtfuel">]]if db=="ATMO"then dl="atmofueltank"elseif db=="SPACE"then dl="spacefueltank"else dl="rocketfueltank"end;dm=_G[dl.."_size"]if#dc>0 then for i=1,#dc do local cu=string.sub(dc[i][dg],1,12)local dq=0;for cS=1,dm do if dc[i][dg]==f(unit[dl.."_"..cS].getData()).name then dq=cS;break end end;if a_ or dd[i]==nil or de[i]==nil then local dr=0;local ds=0;local dt=0;local du=0;local bR=system.getTime()if dq~=0 then de[i]=f(unit[dl.."_"..dq].getData()).percentage;dd[i]=f(unit[dl.."_"..dq].getData()).timeLeft;if dd[i]=="n/a"then dd[i]=0 end else dt=m(dc[i][df])-dc[i][di]dr=dc[i][dh]de[i]=d(0.5+dt*100/dr)ds=dc[i][dj]du=dc[i][dk]if ds<=dt then dd[i]=0 else dd[i]=d(0.5+dt/((ds-dt)/(bR-du)))end;dc[i][dj]=dt;dc[i][dk]=bR end end;if cu==da then cu=e("%s %d",db,i)end;if dq==0 then cu=cu.." *"end;local dv;if dd[i]==0 then dv="n/a"else dv=FormatTimeString(dd[i])end;if de[i]~=nil then local cO=d(de[i]*2.55)local cP=e("rgb(%d,%d,%d)",255-cO,cO,0)local dw=""if dv~="n/a"and dd[i]<120 or de[i]<5 then if a_ then dw=[[class="red"]]end end;cz[#cz+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],c3,dn,dw,cu,c3,dp,cP,de[i],dv)dn=dn+30;dp=dp+30 end end end;cz[#cz+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bf)bf=vec3(bf)local cF=-math.deg(math.atan(bf.y,bf.z))+180;cF=cF-90;if cF<0 then cF=360+cF end;if cF>180 then cF=-180+cF-180 end;return-cF end;function getRelativeYaw(bf)bf=vec3(bf)local dx=math.deg(math.atan(bf.y,bf.x))-90;if dx<-180 then dx=360+dx end;return dx end;function AlignToWorldVector(dy,dz,dA)if not ao or not bk or al~=-1 or bg<I then local dB=dA;if dB==nil then dB=DampingMultiplier end;if dz==nil then dz=aD end;dy=vec3(dy):normalize()local dC=vec3(core.getConstructWorldOrientationForward())-dy;local dD=-getMagnitudeInDirection(dC,core.getConstructWorldOrientationRight())*aC;local dE=-getMagnitudeInDirection(dC,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dD/2 end;if ay==0 then ay=dE/2 end;if math.abs(dD)<0.1 then P=P-dD*2 else P=P-(dD+(dD-ax)*dB)end;if math.abs(dE)<0.1 then O=O+dE*2 else O=O+dE+(dE-ay)*dB end;ax=dD;ay=dE;if math.abs(dD)<dz and math.abs(dE)<dz then return true end;return false elseif bk and al==-1 then dy=vec3(core.getWorldVelocity())local dB=dA;if dB==nil then dB=DampingMultiplier end;if dz==nil then dz=aD end;dy=vec3(dy):normalize()local dC=vec3(core.getConstructWorldOrientationForward())-dy;local dD=-getMagnitudeInDirection(dC,core.getConstructWorldOrientationRight())*aC;local dE=-getMagnitudeInDirection(dC,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dD/2 end;if ay==0 then ay=dE/2 end;if math.abs(dD)<0.1 then P=P-dD*5 else P=P-(dD+(dD-ax)*dB)end;if math.abs(dE)<0.1 then O=O+dE*5 else O=O+dE+(dE-ay)*dB end;ax=dD;ay=dE;if math.abs(dD)<dz and math.abs(dE)<dz then return true end;return false end end;function getAPEnableName()local cu=AutopilotTargetName;if cu==nil then local dF,dG=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())cu=CustomTarget.name.." "..dF..dG end;if cu==nil then cu="None"end;return"Engage Autopilot: "..cu end;function getAPDisableName()local cu=AutopilotTargetName;if cu==nil then cu=CustomTarget.name end;if cu==nil then cu="None"end;return"Disable Autopilot: "..cu end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then W="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ad=5 elseif not J then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dH,dI=getDistanceDisplayString(HoldAltitude)W="Beginning Re-entry.  Target speed: "..bp.." Target Altitude: "..dH..dI;cmdCruise(math.floor(bp))end;AutoTakeoff=false end;function SetupButtons()local dJ=50;local dK=260;local dL=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dK,dJ,aE/2-dK/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dK,dJ,aE/2-dK/2-50-dL.width,aF/2-dJ+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dK,dJ,aE/2-dK/2+dL.width+50,aF/2-dJ+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dM=MakeButton(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dM.height,dM.x+dM.width+30,dM.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dM.height,dM.x+dM.width+30,dM.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dM.height,dM.x-200-30,dM.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dJ=60;dK=300;local c3=10;local c4=aF/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dK,dJ,c3,c4,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dK,dJ,c3+dK+20,c4,function()return AltitudeHold end,ToggleAltitudeHold)c4=c4+dJ+20;MakeButton("Engage Autoland","Disable Autoland",dK,dJ,c3,c4,function()return AutoLanding end,ToggleAutoLanding)local dN,dO,dP;if VertTakeOffEngine then dN="Engage Vertical Takeoff"dO="Disable Vertical Takeoff"dP=VertTakeOff else dN="Engage Auto Takeoff"dO="Disable Auto Takeoff"dP=AutoTakeoff end;MakeButton(dN,dO,dK,dJ,c3+dK+20,c4,function()return dP end,ToggleAutoTakeoff)c4=c4+dJ+20;MakeButton("Show Orbit Display","Hide Orbit Display",dK,dJ,c3,c4,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dK,dJ,c3+dK+20,c4,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)c4=c4+dJ+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dK,dJ,c3,c4,function()return Reentry end,function()ai=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dK,dJ,c3+dK+20,c4,function()return Reentry end,BeginReentry,function()return ap>ReentryAltitude end)c4=c4+dJ+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dK,dJ,c3,c4,function()return U end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dK,dJ,c3+dK+20,c4,function()return aS end,function()aS=not aS;if aS then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return o()==1 end)c4=c4+dJ+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dK,dJ,c3,c4,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;c4=c4+dJ+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dK*2,dJ,c3,c4,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dQ=Nav.axisCommandManager:getAxisCommandType(0)local dR="TRAVEL"if dQ==1 then dR="CRUISE"end;if Autopilot then dR="AUTOPILOT"end;return dR end;function UpdateHud(cz)local ci=ap;local bf=core.getVelocity()local bY=vec3(bf):len()local cE=vec3(core.getWorldVertical())local cC=vec3(core.getConstructWorldOrientationForward())local cD=vec3(core.getConstructWorldOrientationRight())local dS=vec3(core.getConstructWorldOrientationUp())local dT=getRoll(cE,cC,cD)local dU=dT/180*math.pi;local dV=math.cos(dU)local dW=math.sin(dU)local cF=getPitch(cE,cC,cD*dV+dS*dW)local dX=dT;local dY=cF;local dZ=j()local d_=d(unit.getThrottle())local e0=bY*3.6;local e1=unit.getAxisCommandValue(0)local e2=ConvertResolutionX(1770)local e3=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then e1=z;d_=z*100 end;local dR=GetFlightStyle()local e4="ROLL"local cI=unit.getClosestPlanetInfluence()>0;if d_==nil then d_=0 end;if not cI then if bY>5 then cF=getRelativePitch(bf)dT=getRelativeYaw(bf)else cF=0;dT=0 end;e4="YAW"end;if x>50000 and not ao then local e5;if x>200000 then e5=round(x/200000,2).." su"else e5=round(x/1000,1).." km"end;cz[#cz+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],e2,e3,e5)end;cz[#cz+1]=ag;cz[#cz+1]=az;cz[#cz+1]=af;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cz,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cz,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cz,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cz,ci)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cI then DrawRollLines(cz,centerX,centerY,dX,e4,cI)DrawArtificialHorizon(cz,dY,dX,centerX,centerY,cI,d(getRelativeYaw(bf)),bY)else DrawRollLines(cz,centerX,centerY,dT,e4,cI)DrawArtificialHorizon(cz,cF,dT,centerX,centerY,cI,d(dT),bY)end;DrawAltitudeDisplay(cz,ci,cI)DrawPrograde(cz,bf,bY,centerX,centerY)end end;DrawThrottle(cz,dR,d_,e1)DrawSpeed(cz,e0)DrawWarnings(cz)DisplayOrbitScreen(cz)if screen_2 then local cm=vec3(core.getConstructWorldPos())local c3=960+cm.x/b4;local c4=450+cm.y/b5;screen_2.moveContent(b6,(c3-80)/19.2,(c4-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cz)if not w then t=PvPR;v=PvPG;u=PvPB else t=SafeR;v=SafeG;u=SafeB end;au=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]av=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local e6=au;local e7=av;local e8=au;local e9=av;if IsInFreeLook()and not brightHud then e6=[[rgb(]]..d(t*0.4+0.5)..","..d(v*0.4+0.5)..","..d(u*0.3+0.5)..[[)]]e7=[[rgb(]]..d(t*0.3+0.5)..","..d(v*0.3+0.5)..","..d(u*0.2+0.5)..[[)]]end;cz[#cz+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],e6,e6,e8,e8,e7,e7,e9,e9,ResolutionX,ResolutionY)end;function HUDEpilogue(cz)cz[#cz+1]="</svg>"end;function DrawSpeed(cz,e0)local ea=throtPosY-10;local eb=throtPosX+10;cz[#cz+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then ea=75 end;cz[#cz+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],eb,ea,d(e0))end;function DrawOdometer(cz,a7,TotalDistanceTravelled,dR,a8,dZ)local ec=ConvertResolutionX(1240)local ed=ConvertResolutionY(55)local ee=ed+10;local dZ=j()local bV=core.g()local ef=0;local eg=0;local eh=0;RefreshLastMaxBrake(bV)if ao then eh=LastMaxBrakeInAtmo else eh=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=n()if not ShowOdometer then return end;local ei=vec3(core.getWorldAcceleration()):len()/9.80665;if bV>0.1 then eg=aM*bV;ef=maxThrust/bV end;cz[#cz+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then ec=ConvertResolutionX(1120)ed=ConvertResolutionY(55)ee=ed+10 elseif ao then local ej=ConvertResolutionX(770)cz[#cz+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],ej,ed,ej,ee,dZ)end;cz[#cz+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],ec,ed,ec,ee,bV/9.80665,ec,ed+20,ec,ee+20,ei)cz[#cz+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cz[#cz+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a7,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a8),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aM/1000,ConvertResolutionX(1240),ConvertResolutionY(10),eh/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dR)if bV>0.1 then cz[#cz+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ef/1000,ConvertResolutionX(1240),ConvertResolutionY(20),eg/1000)else cz[#cz+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cz[#cz+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dR)end;cz[#cz+1]="</g>"end;function DrawThrottle(cz,dR,d_,e1)d_=math.floor(d_+0.5)local dn=throtPosY+10;local dp=throtPosY+20;if o()==1 and not RemoteHud then dn=55;dp=65 end;local ek="CRUISE"local unit="km/h"local el=e1;if dR=="TRAVEL"or dR=="AUTOPILOT"then ek="THROT"unit="%"el=d_;local em="dim"if d_<0 then em="red"end;cz[#cz+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],em,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d_),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cz[#cz+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,dn,ek,throtPosX+10,dp,el,unit)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then d_=math.floor(C*100+0.5)local em="red"if d_<0 then em="red"end;cz[#cz+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],em,1-math.abs(d_),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cz[#cz+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,dn+40,"LIMIT",throtPosX+10,dp+40,d_,"%")end;if ao and AtmoSpeedAssist or Reentry then cz[#cz+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dn-40,"LIMIT: ",bp.." km/h")elseif not ao and Autopilot then cz[#cz+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dn-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cz,ci)if ci<200000 and not ao or ci and ao then local en=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local eo=0;if math.abs(en)>1 then eo=45*math.log(math.abs(en),10)if en<0 then eo=-eo end end;cz[#cz+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(en),d(eo))end end;function getHeading(cV)local ep=-vec3(core.getWorldVertical())cV=cV-cV:project_on(ep)local eq=vec3(0,0,1)eq=eq-eq:project_on(ep)local er=eq:cross(ep)local eo=eq:angle_between(cV)*constants.rad2deg;if cV:dot(er)<0 then eo=360-eo end;return eo end;function DrawRollLines(cz,centerX,centerY,dX,e4,cI)local es=circleRad;local et=20;et=d(et)local eu=d(dX)if cI then for i=-45,45,5 do local ev=i;cz[#cz+1]=e([[<g transform="rotate(%f,%d,%d)">]],ev,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cz[#cz+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+es+et-len,centerX,centerY+es+et)end;cz[#cz+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+es+et-35,e4,centerX,centerY+es+et-25,eu)cz[#cz+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dX,centerX,centerY)cz[#cz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+es+et-20,centerX+5,centerY+es+et-20,centerX,centerY+es+et-15)cz[#cz+1]="</g>"end;local dx=eu;if cI then dx=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local ew=20;local ex=d(dx)local ey=0;local ez=centerY+es+et+20;local eA=centerX;if e4~="YAW"then ez=ConvertResolutionY(130)eA=ConvertResolutionX(960)end;local eB=[[<path class="txttick line" d="]]for i=d(ex-(ew+10)-ex%5+0.5),d(ex+ew+10+ex%5+0.5),5 do local c3=eA+-i*5+dx*5;if i%10==0 then ey=10;local q=i;if q==360 then q=0 elseif q>360 then q=q-360 elseif q<0 then q=q+360 end;cz[#cz+1]=e([[
                            <text x="%f" y="%f">%d</text>]],c3+5,ez-12,q)elseif i%5==0 then ey=5 end;if ey==10 then eB=e([[%s M %f %f v %d]],eB,c3,ez-5,ey)else eB=e([[%s M %f %f v %d]],eB,c3,ez-2.5,ey)end end;cz[#cz+1]=eB..[["/>]]cz[#cz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],eA-5,ez+10,eA+5,ez+10,eA,ez+5)if cI then e4="HDG"end;cz[#cz+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],eA,ez+25,ex,eA,ez+35,e4)end;function DrawArtificialHorizon(cz,dY,dX,centerX,centerY,cI,eC,bY)local es=circleRad;local eD=d(es*3/5)if es>0 then local eE=d(dY)local len=0;local eB=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dX,centerX,centerY)if not ao then eB=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cz[#cz+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],es-1,centerX,centerY)cz[#cz+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(eE-30-eE%5+0.5),d(eE+30+eE%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local c4=centerY+-i*5+dY*5;if len==30 then eB=e([[%s M %d %f h %d]],eB,centerX-eD-len,c4,len)if ao then cz[#cz+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dX,centerX,centerY,centerX-eD+10,c4,i)cz[#cz+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dX,centerX,centerY,centerX+eD-10,c4,i)if i==0 or i==180 or i==-180 then cz[#cz+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dX,centerX,centerY,centerX-eD+20,c4,eD*2-40)end else cz[#cz+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-eD+10,c4,i)cz[#cz+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+eD-10,c4,i)end;eB=e([[%s M %d %f h %d]],eB,centerX+eD,c4,len)else eB=e([[%s M %d %f h %d]],eB,centerX-eD-len,c4,len)eB=e([[%s M %d %f h %d]],eB,centerX+eD,c4,len)end end;cz[#cz+1]=eB..[["/>]]local eF="PITCH"if not cI then eF="REL PITCH"end;if dY>90 and not ao then dY=90-(dY-90)elseif dY<-90 and not ao then dY=-90-(dY+90)end;if es>200 then if ao then if bY>I then cz[#cz+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,eC)end;cz[#cz+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dX,centerX,centerY)else cz[#cz+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cz[#cz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-eD+25,centerY-5,centerX-eD+20,centerY,centerX-eD+25,centerY+5,centerX-eD+50,centerY+4,eE)cz[#cz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+eD-25,centerY-5,centerX+eD-20,centerY,centerX+eD-25,centerY+5,centerX+eD-30,centerY+4,eE)cz[#cz+1]="</g>"end;local eG=d(es/3)cz[#cz+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eG,centerY,es-eG)if not ao and cI then cz[#cz+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dX,centerX,centerY,centerX-eD+10,centerY,eD*2-20)end;cz[#cz+1]="</g>"if es<200 then if ao and bY>I then cz[#cz+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-es,eF,centerX,centerY-es+10,eE,centerX,centerY-15,"Yaw",centerX,centerY+20,eC)else cz[#cz+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-es,eF,centerX,centerY-es+15,eE)end end end end;function DrawAltitudeDisplay(cz,ci,cI)local eH=altMeterX;local eI=altMeterY;local eJ=78;local eK=19;local eL=AboveGroundLevel()if eL~=-1 then table.insert(cz,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],eH+eJ,eI+eK+20,eL))end;if cI and(ci<200000 and not ao or ci and ao)then table.insert(cz,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],eH-1,eI-4,eJ+2,eK+6,eH+1,eI-1,eJ-4,eK))local cx=0;local eM=1;local eN=0;local eO=ci<0;local eP=9;if eO then eP=0 end;local ci=math.abs(ci)while cx<6 do local eQ=11;local eR=16;local eS=9;local eT=14;local dw="altsm"if cx>2 then eR=eR+3;eQ=eQ+2;eT=eT+2;eS=eS-6;dw="altbig"end;if eO then dw=dw.." red"end;local eU=ci/eM%10;local eV=d(eU)local eW=d((eV+1)%10)local eX=eN;if cx==0 then eX=eU-eV;if eO then eX=1-eX end end;if eO and(cx==0 or eN~=0)then local eY=eW;eW=eV;eV=eY end;local eZ=eR*(eX-1)local e_=eZ+eR;local c3=eH+eS+(6-cx)*eQ;local c4=eI+eT;table.insert(cz,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dw,c3,c4+eZ,eW,c3,c4+e_,eV))cx=cx+1;eM=eM*10;if eV==eP then eN=eX else eN=0 end end;table.insert(cz,[[</g></g>]])end end;function DrawPrograde(cz,bf,bY,centerX,centerY)if bY>5 and not ao or bY>I then local es=circleRad;local f0=20;local f1=20;local f2=vec3(bf)local f3=getRelativePitch(f2)local f4=getRelativeYaw(f2)local f5=14;local f6=f5/2;local f7=-f4/f1*es;local f8=f3/f0*es;local c3=centerX+f7;local c4=centerY+f8;local ae=math.sqrt(f7^2+f8^2)local f9=[[<circle
                cx="]]..c3 ..[["
                cy="]]..c4 ..[["
                r="]]..f6/f5 ..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..c3 ..[["
                cy="]]..c4 ..[["
                r="]]..f6 ..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..c3-f5 ..[[,]]..c4 ..[[ h ]]..f6 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c3+f6 ..[[,]]..c4 ..[[ h ]]..f6 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c3 ..[[,]]..c4-f5 ..[[ v ]]..f6 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ae<es then cz[#cz+1]=f9 else local eo=math.atan(f8,f7)local fa=4;local fb=centerX+es*math.cos(eo)local fc=centerY+es*math.sin(eo)cz[#cz+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',eo*180/math.pi,fb,fc,fb-fa,fc-fa/2,fa*2,fa,fb+fa,fc-fa,fa,fa,-fa,fa)end;if not ao then f3=getRelativePitch(-f2)f4=getRelativeYaw(-f2)f7=-f4/f1*es;f8=f3/f0*es;c3=centerX+f7;c4=centerY+f8;ae=math.sqrt(f7^2+f8^2)if ae<es then local fd=[[<circle
                        cx="]]..c3 ..[["
                        cy="]]..c4 ..[["
                        r="]]..f6 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..c3 ..[[,]]..c4-f5 ..[[ v ]]..f6 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..c3 ..[[,]]..c4 ..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..c3 ..[[,]]..c4 ..[[)" />
                     <path
                        d="M ]]..c3-f6 ..[[,]]..c4 ..[[ h ]]..f5 ..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..c3 ..[[,]]..c4 ..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..c3 ..[[,]]..c4 ..[[)"/>]]cz[#cz+1]=fd end end end end;function DrawWarnings(cz)cz[#cz+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cz[#cz+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cz[#cz+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cz[#cz+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cz[#cz+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local fe=ConvertResolutionX(960)local ff=ConvertResolutionY(860)local fg=ConvertResolutionY(880)local fh=ConvertResolutionY(900)local fi=ConvertResolutionY(960)local fj=ConvertResolutionY(200)local fk=ConvertResolutionY(150)local fl=ConvertResolutionY(960)if o()==1 and not RemoteHud then ff=ConvertResolutionY(135)fg=ConvertResolutionY(155)fh=ConvertResolutionY(175)fj=ConvertResolutionY(115)fk=ConvertResolutionY(95)end;if BrakeIsOn then cz[#cz+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],fe,ff)elseif A>0 then cz[#cz+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fe,ff,A)end;if ao and bk and hoverDetectGround()==-1 then cz[#cz+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],fe,fj+50)end;if as then cz[#cz+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],fe,fl)end;if GearExtended then if M then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fe,fg)else cz[#cz+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fe,fg)end;local dF,dG=getDistanceDisplayString(Nav:getTargetGroundAltitude())cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fe,fh,dF..dG)end;if a1 then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fe,fi+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ap-antigrav.getBaseAltitude())<501 then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fe,fj+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cz[#cz+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fe,fj+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fe,fj+20,AutopilotStatus)elseif LockPitch~=nil then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fe,fj+20,d(LockPitch))elseif U then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fe,fj+20)elseif Reentry then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fe,fj+20)end;local fm,fn,fo=b8:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bf:normalize(),function(fp)if fp.noAtmosphericDensityAltitude>0 then return fp.radius+fp.noAtmosphericDensityAltitude else return fp.radius+fp.surfaceMaxAltitude*1.5 end end)local fq=fn;if fo~=nil and fn~=nil then fq=math.min(fo,fn)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local dF,dG=getDistanceDisplayString(HoldAltitude)cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],fe,fj,dF..dG)if BrakeIsOn then cz[#cz+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fe,fj+50)end else local dF,dG=getDistanceDisplayString2(HoldAltitude)cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fe,fj,dF..dG)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if j()>0.1 then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fe,fj)elseif j()<0.09 and j()>0.05 then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fe,fj)elseif j()<0.05 then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fe,fj)end end;if IntoOrbit then if br~=nil then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fe,fj,br)end end;if BrakeLanding then if StrongBrakes then cz[#cz+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],fe,fj)else cz[#cz+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],fe,fj)end end;if ProgradeIsOn then cz[#cz+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fe,fj)end;if RetrogradeIsOn then cz[#cz+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fe,fj)end;if TurnBurn then cz[#cz+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],fe,fk)elseif fq~=nil and j()==0 then local dF,dG=getDistanceDisplayString(fq)local travelTime=b9.computeTravelTime(bg,0,fq)local fr="Collision"if fm.noAtmosphericDensityAltitude>0 then fr="Atmosphere"end;cz[#cz+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fe,fk,fm.name,fr,FormatTimeString(travelTime),dF..dG)end;if VectorToTarget and not IntoOrbit then cz[#cz+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fe,fj+30,VectorStatus)end;cz[#cz+1]="</g>"end;function DisplayOrbitScreen(cz)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fs=OrbitMapX;local ft=OrbitMapY;local fu=OrbitMapSize;local fv=4;ft=ft+fv;local fw=15;local c3=fs+fu+fs/2+fv;local c4=ft+fu/2+5+fv;local fx,fy,fz,fA;fx=fu/4;fA=0;cz[#cz+1]=[[<g class="pbright txtorb txtmid">]]cz[#cz+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fu+fs*2,fu+ft,fv,fv)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fz=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(fx*2)fy=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fz*(1-orbit.eccentricity)fA=fx-orbit.periapsis.altitude/fz-planet.radius/fz;local fB=""if orbit.periapsis.altitude<=0 then fB='redout'end;cz[#cz+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fB,fs+fu/2+fA+fv,ft+fu/2+fv,fx,fy)cz[#cz+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fs+fu/2+fv,ft+fu/2+fv,planet.radius/fz)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cz[#cz+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c3-35,c4-5,fs+fu/2+fx+fA,c4-5)cz[#cz+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],c3,c4)c4=c4+fw;local dF,dG=getDistanceDisplayString(orbit.apoapsis.altitude)cz[#cz+1]=e([[<text x="%f" y="%f">%s</text>]],c3,c4,dF..dG)c4=c4+fw;cz[#cz+1]=e([[<text x="%f" y="%f">%s</text>]],c3,c4,FormatTimeString(orbit.timeToApoapsis))c4=c4+fw;cz[#cz+1]=e([[<text x="%f" y="%f">%s</text>]],c3,c4,getSpeedDisplayString(orbit.apoapsis.speed))end;c4=ft+fu/2+5+fv;c3=fs-fs/2+10+fv;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cz[#cz+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c3+35,c4-5,fs+fu/2-fx+fA,c4-5)cz[#cz+1]=e([[<text x="%f" y="%f">Periapsis</text>]],c3,c4)c4=c4+fw;local dF,dG=getDistanceDisplayString(orbit.periapsis.altitude)cz[#cz+1]=e([[<text x="%f" y="%f">%s</text>]],c3,c4,dF..dG)c4=c4+fw;cz[#cz+1]=e([[<text x="%f" y="%f">%s</text>]],c3,c4,FormatTimeString(orbit.timeToPeriapsis))c4=c4+fw;cz[#cz+1]=e([[<text x="%f" y="%f">%s</text>]],c3,c4,getSpeedDisplayString(orbit.periapsis.speed))end;cz[#cz+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fs+fu/2+fv,20+fv,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fC=orbit.timeToApoapsis/orbit.period*2*math.pi;local fD=fx*math.cos(fC)local fE=fy*math.sin(fC)cz[#cz+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fs+fu/2+fD+fA+fv,ft+fu/2+fE+fv)end;cz[#cz+1]=[[</g>]]end end;function getDistanceDisplayString(ae)local fF=ae>100000;local bJ,dG=""if fF then bJ,dG=round(ae/1000/200,1),"SU"elseif ae<1000 then bJ,dG=round(ae,1),"m"else bJ,dG=round(ae/1000,1),"Km"end;return bJ,dG end;function getDistanceDisplayString2(ae)local fF=ae>100000;local bJ,dG=""if fF then bJ,dG=round(ae/1000/200,2)," SU"elseif ae<1000 then bJ,dG=round(ae,2)," M"else bJ,dG=round(ae/1000,2)," KM"end;return bJ,dG end;function getSpeedDisplayString(bY)return d(round(bY*3.6,0)+0.5).." km/h"end;function FormatTimeString(fG)local fH=0;local fI=0;local fJ=0;if fG<60 then fG=d(fG)elseif fG<3600 then fH=d(fG/60)fG=d(fG%60)elseif fG<86400 then fI=d(fG/3600)fH=d(fG%3600/60)else fJ=d(fG/86400)fI=d(fG%86400/3600)end;if fJ>0 then return fJ.."d "..fI.."h "elseif fI>0 then return fI.."h "..fH.."m "elseif fH>0 then return fH.."m "..fG.."s"elseif fG>0 then return fG.."s"else return"0s"end end;function getMagnitudeInDirection(dy,fK)dy=vec3(dy)fK=vec3(fK):normalize()local bJ=dy*fK;return bJ.x+bJ.y+bJ.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a6=nil;CustomTarget=nil;return true end;local fL=AtlasOrdered[AutopilotTargetIndex].index;local fM=b2[0][fL]if fM.center then AutopilotTargetName=fM.name;a6=b8[0][fL]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fM;for _,bI in pairs(b8[0])do if bI.name==CustomTarget.planetname then a6=bI;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a6.center)else AutopilotTargetCoords=CustomTarget.position end;if a6.planetname~="Space"then if a6.hasAtmosphere then AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a6.radius*(TargetOrbitRadius-1)+a6.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fL=AtlasOrdered[AutopilotTargetIndex].index;local fM=b2[0][fL]if fM.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fL=AtlasOrdered[AutopilotTargetIndex].index;local fM=b2[0][fL]if fM.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fN=LastMaxBrakeInAtmo/a6:getGravity(a6.center+vec3(0,0,1)*a6.radius):len()return fN end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a6.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bf=core.getWorldVelocity()local bY=vec3(bf):len()local fO=unit.getThrottle()/100;if AtmoSpeedAssist then fO=z end;local fP,fQ=b9.computeDistanceAndTime(vec3(bf):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fO,warmup,0)local a2,a3;if not TurnBurn then a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fR;if not TurnBurn and bY>0 then _,fR=GetAutopilotBrakeDistanceAndTime(bY)else _,fR=GetAutopilotTBBrakeDistanceAndTime(bY)end;local fS=0;local fT=0;if AutopilotCruising or not Autopilot and bY>5 then fT=b9.computeTravelTime(bY,0,AutopilotDistance)elseif a2+fP<AutopilotDistance then fS=AutopilotDistance-(a2+fP)fT=b9.computeTravelTime(8333.0556,0,fS)else local fU=(AutopilotDistance-a2)/fP;fP=AutopilotDistance-a2;fQ=fQ*fU end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fT elseif AutopilotBraking then return fR elseif AutopilotCruising then return fT+fR else return fQ+a3+fT end end;function GetAutopilotBrakeDistanceAndTime(bY)if not ao then RefreshLastMaxBrake()return b9.computeDistanceAndTime(bY,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b9.computeDistanceAndTime(bY,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bY)RefreshLastMaxBrake()return b9.computeDistanceAndTime(bY,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fV=-1;local fW=-1;if vBooster then fV=vBooster.distance()end;if hover then fW=hover.distance()end;if fV~=-1 and fW~=-1 then if fV<fW then return fV else return fW end elseif fV~=-1 then return fV elseif fW~=-1 then return fW else return-1 end end;function AboveGroundLevel()local fX=-1;local fY=hoverDetectGround()if telemeter_1 then fX=telemeter_1.getDistance()end;if fY~=-1 and fX~=-1 then if fY<fX then return fY else return fX end elseif fY~=-1 then return fY else return fX end end;function tablelength(fZ)local f_=0;for _ in pairs(fZ)do f_=f_+1 end;return f_ end;function BeginProfile(g0)ProfileTimeStart=system.getTime()end;function EndProfile(g0)local g1=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+g1;ProfileCount=ProfileCount+1;if g1>ProfileTimeMax then ProfileTimeMax=g1 end;if g1<ProfileTimeMin then ProfileTimeMin=g1 end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local g2=ProfileTimeSum;local g3=ProfileTimeSum/ProfileCount;local g4=ProfileTimeMin;local g5=ProfileTimeMax;local g6=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",g2,g3,g4,g5,g6))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local g7=radar_1.getEntries()local g8=radar_1.getData()local g9=ConvertResolutionX(1770)local ga=ConvertResolutionY(330)if#g7>0 then local gb=g8:find('identifiedConstructs":%[%]')if gb==nil and perisPanelID==nil then ah=1;ToggleRadarPanel()end;if gb~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;af=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],g9,ga,#g7)local gc={}for bH,bI in pairs(g7)do if radar_1.hasMatchingTransponder(bI)==1 then table.insert(gc,bI)end end;if#gc>0 then local c4=ConvertResolutionY(15)local c3=ConvertResolutionX(1370)af=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],af,c3,c4)for bH,bI in pairs(gc)do c4=c4+20;af=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],af,c3,c4,radar_1.getConstructName(bI))end end else local gd;gd=g8:find('worksInEnvironment":false')if gd then af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],g9,ga)else af=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],g9,ga)end;if radarPanelID~=nil then ah=0;ToggleRadarPanel()end end end end;function DisplayMessage(cz,dF)if dF~="empty"then cz[#cz+1]=[[<text class="msg" x="50%%" y="310" >]]for ge in string.gmatch(dF,"([^\n]+)")do cz[#cz+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],ge)end;cz[#cz+1]=[[</text>]]end;if ad~=0 then unit.setTimer("msgTick",ad)ad=0 end end;function updateDistance()local bR=system.getTime()local bf=vec3(core.getWorldVelocity())local e0=vec3(bf):len()local gf=bR-ar;if e0>1.38889 then e0=e0/1000;local gg=e0*(bR-ar)TotalDistanceTravelled=TotalDistanceTravelled+gg;a7=a7+gg end;a8=a8+gf;TotalFlightTime=TotalFlightTime+gf;ar=bR end;function composeAxisAccelerationFromTargetSpeedV(gh,gi)local gj=vec3()local gk=vec3()if gh==axisCommandId.longitudinal then gj=vec3(core.getConstructOrientationForward())gk=vec3(core.getConstructWorldOrientationForward())elseif gh==axisCommandId.vertical then gj=vec3(core.getConstructOrientationUp())gk=vec3(core.getConstructWorldOrientationUp())elseif gh==axisCommandId.lateral then gj=vec3(core.getConstructOrientationRight())gk=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gl=vec3(core.getWorldGravity())local gm=gl:dot(gk)local gn=vec3(core.getWorldAirFrictionAcceleration())local go=gn:dot(gk)local gp=vec3(core.getVelocity())local gq=gp:dot(gj)local gr=gi*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gr-gq)local gs=targetSpeedPID2:get()local gt=(gs-go-gm)*gk;return gt end;function composeAxisAccelerationFromTargetSpeed(gh,gi)local gj=vec3()local gk=vec3()if gh==axisCommandId.longitudinal then gj=vec3(core.getConstructOrientationForward())gk=vec3(core.getConstructWorldOrientationForward())elseif gh==axisCommandId.vertical then gj=vec3(core.getConstructOrientationUp())gk=vec3(core.getConstructWorldOrientationUp())elseif gh==axisCommandId.lateral then gj=vec3(core.getConstructOrientationRight())gk=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gl=vec3(core.getWorldGravity())local gm=gl:dot(gk)local gn=vec3(core.getWorldAirFrictionAcceleration())local go=gn:dot(gk)local gp=vec3(core.getVelocity())local gq=gp:dot(gj)local gr=gi*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gr-gq)local gs=targetSpeedPID:get()local gt=(gs-go-gm)*gk;return gt end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b2=Atlas()for bH,bI in pairs(b2[0])do if aG==nil or bI.center.x<aG then aG=bI.center.x end;if aH==nil or bI.center.x>aH then aH=bI.center.x end;if aI==nil or bI.center.y<aI then aI=bI.center.y end;if aJ==nil or bI.center.y>aJ then aJ=bI.center.y end end;b3=""local gu=1.1*(aH-aG)/1920;local gv=1.4*(aJ-aI)/1080;for bH,bI in pairs(b2[0])do local c3=960+bI.center.x/gu;local c4=540+bI.center.y/gv;b3=b3 ..'<circle cx="'..c3 ..'" cy="'..c4 ..'" r="'..bI.radius/gu*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bI.name,"Moon")and not string.match(bI.name,"Sanctuary")and not string.match(bI.name,"Space")then b3=b3 .."<text x='"..c3 .."' y='"..c4+bI.radius/gu*30+20 .."' font-size='28' fill="..au.." text-anchor='middle' font-family='Montserrat'>"..bI.name.."</text>"end end;local cm=vec3(core.getConstructWorldPos())local c3=960+cm.x/gu;local c4=540+cm.y/gv;b3=b3 ..'<circle cx="'..c3 ..'" cy="'..c4 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='"..c3 .."' y='"..c4-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b3=b3 ..[[</svg>]]b4=gu;b5=gv;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b3)local cm=vec3(core.getConstructWorldPos())local c3=960+cm.x/gu;local c4=540+cm.y/gv;b3='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b3=b3 .."<text x='80' y='105' font-size='18' fill="..au.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b6=screen_2.addContent((c3-80)/19.20,(c4-80)/10.80,b3)end end;function PlanetRef()local function gw(gx)return type(gx)=='number'end;local function gy(gx)return type(tonumber(gx))=='number'end;local function gz(gA)return type(gA)=='table'end;local function gB(gC)return type(gC)=='string'end;local function gD(bI)return gz(bI)and gw(bI.x and bI.y and bI.z)end;local function gE(gF)return gz(gF)and gw(gF.latitude and gF.longitude and gF.altitude and gF.bodyId and gF.systemId)end;local gG=math.pi/180;local gH=180/math.pi;local epsilon=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cn='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gI=utils.clamp;local function float_eq(cc,cd)if cc==0 then return math.abs(cd)<1e-09 end;if cd==0 then return math.abs(cc)<1e-09 end;return math.abs(cc-cd)<math.max(math.abs(cc),math.abs(cd))*epsilon end;local function gJ(gx)local bJ=string.gsub(string.reverse(e('%.4f',gx)),'^0*%.?','')return bJ==''and'0'or string.reverse(bJ)end;local function gK(gL)if gD(gL)then return e('{x=%.3f,y=%.3f,z=%.3f}',gL.x,gL.y,gL.z)end;if gz(gL)and not getmetatable(gL)then local gM={}local gN=next(gL)if type(gN)=='nil'or gN==1 then gM=gL else for bH,bI in pairs(gL)do local el=gK(bI)if type(bH)=='number'then table.insert(gM,e('[%s]=%s',bH,el))else table.insert(gM,e('%s=%s',bH,el))end end end;return e('{%s}',table.concat(gM,','))end;if gB(gL)then return e("'%s'",gL:gsub("'",[[\']]))end;return tostring(gL)end;local gO={}gO.__index=gO;gO.__tostring=function(gL,gP)local gQ={}for bH in pairs(gL)do table.insert(gQ,bH)end;table.sort(gQ)local gM={}for _,bH in ipairs(gQ)do local el=gK(gL[bH])if type(bH)=='number'then table.insert(gM,e('[%s]=%s',bH,el))else table.insert(gM,e('%s=%s',bH,el))end end;if gP then return e('%s%s',gP,table.concat(gM,',\n'..gP))end;return e('{%s}',table.concat(gM,','))end;gO.__eq=function(gR,gS)return gR.planetarySystemId==gS.planetarySystemId and gR.bodyId==gS.bodyId and float_eq(gR.radius,gS.radius)and float_eq(gR.center.x,gS.center.x)and float_eq(gR.center.y,gS.center.y)and float_eq(gR.center.z,gS.center.z)and float_eq(gR.GM,gS.GM)end;local function gT(co,cp,gU,cf,gV)assert(gy(co),'Argument 1 (planetarySystemId) must be a number:'..type(co))assert(gy(cp),'Argument 2 (bodyId) must be a number:'..type(cp))assert(gy(gU),'Argument 3 (radius) must be a number:'..type(gU))assert(gz(cf),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cf))assert(gy(gV),'Argument 5 (GM) must be a number:'..type(gV))return setmetatable({planetarySystemId=tonumber(co),bodyId=tonumber(cp),radius=tonumber(gU),center=vec3(cf),GM=tonumber(gV)},gO)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gW)return e('::pos{%d,%d,%s,%s,%s}',gW.systemId,gW.bodyId,gJ(gW.latitude*gH),gJ(gW.longitude*gH),gJ(gW.altitude))end;MapPosition.__eq=function(gR,gS)return gR.bodyId==gS.bodyId and gR.systemId==gS.systemId and float_eq(gR.latitude,gS.latitude)and float_eq(gR.altitude,gS.altitude)and(float_eq(gR.longitude,gS.longitude)or float_eq(gR.latitude,math.pi/2)or float_eq(gR.latitude,-math.pi/2))end;local function gX(gY,cp,cj,ck,ci)local co=gY;if gB(gY)and not ck and not ci and not cp and not cj then co,cp,cj,ck,ci=string.match(gY,cn)assert(co,'Argument 1 (position string) is malformed.')else assert(gy(co),'Argument 1 (systemId) must be a number:'..type(co))assert(gy(cp),'Argument 2 (bodyId) must be a number:'..type(cp))assert(gy(cj),'Argument 3 (latitude) must be in degrees:'..type(cj))assert(gy(ck),'Argument 4 (longitude) must be in degrees:'..type(ck))assert(gy(ci),'Argument 5 (altitude) must be in meters:'..type(ci))end;co=tonumber(co)cp=tonumber(cp)cj=tonumber(cj)ck=tonumber(ck)ci=tonumber(ci)if cp==0 then return setmetatable({latitude=cj,longitude=ck,altitude=ci,bodyId=cp,systemId=co},MapPosition)end;return setmetatable({latitude=gG*gI(cj,-90,90),longitude=gG*(ck%360),altitude=ci,bodyId=cp,systemId=co},MapPosition)end;local gZ={}gZ.__index=gZ;gZ.__tostring=function(gL,gP)local g_=gP and gP..'  'local h0={}local gQ={}for bH in pairs(gL)do table.insert(gQ,bH)end;table.sort(gQ)for _,h1 in ipairs(gQ)do bdy=gL[h1]local h2=gO.__tostring(bdy,g_)if gP then table.insert(h0,e('[%s]={\n%s\n%s}',h1,h2,gP))else table.insert(h0,e('  [%s]=%s',h1,h2))end end;if gP then return e('\n%s%s%s',gP,table.concat(h0,',\n'..gP),gP)end;return e('{\n%s\n}',table.concat(h0,',\n'))end;local function h3(h4)local b2={}local pid;for _,bI in pairs(h4)do local cv=bI.planetarySystemId;if type(cv)~='number'then error('Invalid planetary system ID: '..tostring(cv))elseif pid and cv~=pid then error('Mismatch planetary system IDs: '..cv..' and '..pid)end;local h5=bI.bodyId;if type(h5)~='number'then error('Invalid body ID: '..tostring(h5))elseif b2[h5]then error('Duplicate body ID: '..tostring(h5))end;setmetatable(bI.center,getmetatable(vec3.unit_x))b2[h5]=setmetatable(bI,gO)pid=cv end;return setmetatable(b2,gZ)end;b7={}local function h6(h4)return setmetatable({galaxyAtlas=h4 or{}},b7)end;b7.__index=function(gA,i)if type(i)=='number'then local system=gA.galaxyAtlas[i]return h3(system)end;return rawget(b7,i)end;b7.__pairs=function(gL)return function(gA,bH)local h7,nv=next(gA,bH)return h7,nv and h3(nv)end,gL.galaxyAtlas,nil end;b7.__tostring=function(gL)local h8={}for _,h9 in pairs(gL or{})do local ha=h9:getPlanetarySystemId()local hb=gZ.__tostring(h9,'    ')table.insert(h8,e('  [%s]={%s\n  }',ha,hb))end;return e('{\n%s\n}\n',table.concat(h8,',\n'))end;b7.BodyParameters=gT;b7.MapPosition=gX;b7.PlanetarySystem=h3;function b7.createBodyParameters(hc,cp,hd,he,hf,hg,hh)assert(gy(hc),'Argument 1 (planetarySystemId) must be a number:'..type(hc))assert(gy(cp),'Argument 2 (bodyId) must be a number:'..type(cp))assert(gy(hd),'Argument 3 (surfaceArea) must be a number:'..type(hd))assert(gz(he),'Argument 4 (aPosition) must be an array or vec3:'..type(he))assert(gz(hf),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(hf))assert(gy(hg),'Argument 6 (altitude) must be in meters:'..type(hg))assert(gy(hh),'Argument 7 (gravityAtPosition) must be number:'..type(hh))local gU=math.sqrt(hd/4/math.pi)local ae=gU+hg;local hi=vec3(he)+ae*vec3(hf)local gV=hh*ae*ae;return gT(hc,cp,gU,hi,gV)end;b7.isMapPosition=gE;function b7:getPlanetarySystem(gY)if i==nil then i=0 end;if nv==nil then nv=0 end;local hc=gY;if gE(gY)then hc=gY.systemId end;if type(hc)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gZ then system=h3(system)end;return system end end end;function gZ:castIntersections(hj,fK,hk,hl)local hk=hk or function(fp)return 1.05*fp.radius end;local hm={}if hl then for _,i in ipairs(hl)do hm[i]=self[i]end else hl={}for bH,fp in pairs(self)do table.insert(hl,bH)hm[bH]=fp end end;local function hn(ho,hp)local hq=hm[ho].center-hj;local hr=hm[hp].center-hj;return hq:len()<hr:len()end;table.sort(hl,hn)local hs=fK:normalize()for i,cv in ipairs(hl)do local fp=hm[cv]local ht=fp.center-hj;local gU=hk(fp)local hu=ht:dot(hs)local hv=hu^2-(ht:len2()-gU^2)if hv>=0 then local hw=math.sqrt(hv)local fn=hu+hw;local fo=hu-hw;if fo>0 then return fp,fn,fo elseif fn>0 then return fp,fn,nil end end end;return nil,nil,nil end;function gZ:closestBody(hx)assert(type(hx)=='table','Invalid coordinates.')local hy,fp;local hz=vec3(hx)for _,hA in pairs(self)do local hB=(hA.center-hz):len2()if(not fp or hB<hy)and hA.name~="Space"then fp=hA;hy=hB end end;return fp end;function gZ:convertToBodyIdAndWorldCoordinates(gY)local hC=gY;if gB(gY)then hC=gX(gY)end;if hC.bodyId==0 then return 0,vec3(hC.latitude,hC.longitude,hC.altitude)end;local hA=self:getBodyParameters(hC)if hA then return hC.bodyId,hA:convertToWorldCoordinates(hC)end end;function gZ:getBodyParameters(gY)local cp=gY;if gE(gY)then cp=gY.bodyId end;assert(gy(cp),'Argument 1 (bodyId) must be a number:'..type(cp))return self[cp]end;function gZ:getPlanetarySystemId()local _,bI=next(self)return bI and bI.planetarySystemId end;function gO:convertToMapPosition(cf)assert(gz(cf),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cf))local cg=vec3(cf)if self.bodyId==0 then return setmetatable({latitude=cg.x,longitude=cg.y,altitude=cg.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ch=cg-self.center;local ae=ch:len()local ci=ae-self.radius;local cj=0;local ck=0;if not float_eq(ae,0)then local cl=math.atan(ch.y,ch.x)ck=cl>=0 and cl or 2*math.pi+cl;cj=math.pi/2-math.acos(ch.z/ae)end;return setmetatable({latitude=cj,longitude=ck,altitude=ci,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gO:convertToWorldCoordinates(gY)local hC=gB(gY)and gX(gY)or gY;if hC.bodyId==0 then return vec3(hC.latitude,hC.longitude,hC.altitude)end;assert(gE(hC),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hC.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hC.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cq=math.cos(hC.latitude)return self.center+(self.radius+hC.altitude)*vec3(cq*math.cos(hC.longitude),cq*math.sin(hC.longitude),math.sin(hC.latitude))end;function gO:getAltitude(cf)return(vec3(cf)-self.center):len()-self.radius end;function gO:getDistance(cf)return(vec3(cf)-self.center):len()end;function gO:getGravity(cf)local hD=self.center-vec3(cf)local hE=hD:len2()return self.GM/hE*hD/math.sqrt(hE)end;return setmetatable(b7,{__call=function(_,...)return h6(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gB(gC)return type(gC)=='string'end;local function gz(gA)return type(gA)=='table'end;local function float_eq(cc,cd)if cc==0 then return math.abs(cd)<1e-09 end;if cd==0 then return math.abs(cc)<1e-09 end;return math.abs(cc-cd)<math.max(math.abs(cc),math.abs(cd))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ci)assert(self.body)local ae=ci+self.body.radius;if not float_eq(ae,0)then local orbit=math.sqrt(self.body.GM/ae)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gY,bf)assert(self.body)assert(gz(gY)or gB(gY))assert(gz(bf))local cm=(gB(gY)or PlanetRef.isMapPosition(gY))and self.body:convertToWorldCoordinates(gY)or vec3(gY)local bI=vec3(bf)local hF=cm-self.body.center;local hr=bI:len2()local hG=hF:len()local hH=self.body.GM;local hI=((hr-hH/hG)*hF-hF:dot(bI)*bI)/hH;local cc=hH/(2*hH/hG-hr)local hJ=hI:len()local hs=hI:normalize()local hK=cc*(1-hJ)local hL=cc*(1+hJ)local hM=hK*hs+self.body.center;local hN=hJ<=1 and-hL*hs+self.body.center or nil;local hO=math.sqrt(cc*hH*(1-hJ*hJ))local hP=hN and 2*math.pi*math.sqrt(cc^3/hH)local hQ=math.acos(hI:dot(hF)/(hJ*hG))if hF:dot(bI)<0 then hQ=-(hQ-2*math.pi)end;local hR=math.acos((math.cos(hQ)+hJ)/(1+hJ*math.cos(hQ)))local hS=hR;if hS<0 then hS=hS+2*math.pi end;local hT=hS-hJ*math.sin(hS)local hU=0;local hV=0;local hW=0;if hP~=nil then hU=hT/(2*math.pi/hP)hV=hP-hU;hW=hV+hP/2;if hQ-math.pi>0 then hV=hU;hW=hV+hP/2 end;if hW>hP then hW=hW-hP end end;return{periapsis={position=hM,speed=hO/hK,circularOrbitSpeed=math.sqrt(hH/hK),altitude=hK-self.body.radius},apoapsis=hN and{position=hN,speed=hO/hL,circularOrbitSpeed=math.sqrt(hH/hL),altitude=hL-self.body.radius},currentVelocity=bI,currentPosition=cm,eccentricity=hJ,period=hP,eccentricAnomaly=hR,meanAnomaly=hT,timeToPeriapsis=hV,timeToApoapsis=hW}end;local function hX(hY)local hA=PlanetRef.BodyParameters(hY.planetarySystemId,hY.bodyId,hY.radius,hY.center,hY.GM)return setmetatable({body=hA},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hX(...)end})end;function Kinematics()local b9={}local hZ=30000000/3600;local h_=hZ*hZ;local i0=100;local function i1(bI)return 1/math.sqrt(1-bI*bI/h_)end;function b9.computeAccelerationTime(i2,i3,i4)local i5=hZ*math.asin(i2/hZ)return(hZ*math.asin(i4/hZ)-i5)/i3 end;function b9.computeDistanceAndTime(i2,i4,i6,i7,i8,i9)i8=i8 or 0;i9=i9 or 0;local ia=i2<=i4;local ib=i7*(ia and 1 or-1)/i6;local ic=-i9/i6;local id=ib+ic;if ia and id<=0 or not ia and id>=0 then return-1,-1 end;local ie,ig=0,0;if ib~=0 and i8>0 then local i5=math.asin(i2/hZ)local ih=math.pi*(ib/2+ic)local ii=ib*i8;local ij=hZ*math.pi;local bI=function(gA)local d1=(ih*gA-ii*math.sin(math.pi*gA/2/i8)+ij*i5)/ij;local ik=math.tan(d1)return hZ*ik/math.sqrt(ik*ik+1)end;local il=ia and function(gC)return gC>=i4 end or function(gC)return gC<=i4 end;ig=2*i8;if il(bI(ig))then local im=0;while math.abs(ig-im)>0.5 do local gA=(ig+im)/2;if il(bI(gA))then ig=gA else im=gA end end end;local io=i2;local ip=ig/i0;for iq=1,i0 do local bY=bI(iq*ip)ie=ie+(bY+io)*ip/2;io=bY end;if ig<2*i8 then return ie,ig end;i2=io end;local i5=hZ*math.asin(i2/hZ)local bK=(hZ*math.asin(i4/hZ)-i5)/id;local ir=h_*math.cos(i5/hZ)/id;local ae=ir-h_*math.cos((id*bK+i5)/hZ)/id;return ae+ie,bK+ig end;function b9.computeTravelTime(i2,i3,ae)if ae==0 then return 0 end;if i3>0 then local i5=hZ*math.asin(i2/hZ)local ir=h_*math.cos(i5/hZ)/i3;return(hZ*math.acos(i3*(ir-ae)/h_)-i5)/i3 end;if i2==0 then return-1 end;assert(i2>0,'Acceleration and initial speed are both zero.')return ae/i2 end;function b9.lorentz(bI)return i1(bI)end;return b9 end;function safeZone(is)local gU=500000;local it,iu,iv=math.huge;local iw=false;local ix=vec3({13771471,7435803,-128971})local iy=18000000;it=vec3(is):dist(ix)if it<iy then return true,math.abs(it-iy),"Safe Zone",0 end;iu=vec3(is):dist(vec3(planet.center))if iu<gU then iw=true end;if math.abs(iu-gU)<math.abs(it-iy)then return iw,math.abs(iu-gU),planet.name,planet.bodyId else return iw,math.abs(it-iy),"Safe Zone",0 end end;function cmdThrottle(el,iz)if iz==nil then iz=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not iz then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,el)z=round(el*100,0)end;function cmdCruise(el,iz)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not iz then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,el)end;function SaveDataBank(iA)if dbHud_1 then if not a9 then for bH,bI in pairs(b)do dbHud_1.setStringValue(bI,g(_G[bI]))if iA and dbHud_2 then dbHud_2.setStringValue(bI,g(_G[bI]))end end;for bH,bI in pairs(a)do dbHud_1.setStringValue(bI,g(_G[bI]))if iA and dbHud_2 then dbHud_2.setStringValue(bI,g(_G[bI]))end end;c("Saved Variables to Datacore")if iA and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;function script.onStart()VERSION_NUMBER=5.451;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b7=PlanetRef()b8=b7(Atlas())b9=Kinematics()bb=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bT=j()if door and(bT>0 or bT==0 and ap<10000)then for _,bI in pairs(door)do bI.toggle()end end;if switch then for _,bI in pairs(switch)do bI.toggle()end end;if forcefield and(bT>0 or bT==0 and ap<10000)then for _,bI in pairs(forcefield)do bI.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(iB)if iB=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local iC=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if iC and not Autopilot then ae=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ae=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a2,a3=GetAutopilotBrakeDistanceAndTime(bg)a4,a5=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a2,a3=GetAutopilotTBBrakeDistanceAndTime(bg)a4,a5=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dF,dG=getDistanceDisplayString(ae)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dF..'", "unit":"'..dG..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dF,dG=getDistanceDisplayString(a2)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dF..'", "unit":"'..dG..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')dF,dG=getDistanceDisplayString(a4)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dF..'", "unit":"'..dG..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a5)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dF,dG=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dF)..'", "unit":"'..dG..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif iB=="oneSecond"then am=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cz={}local dR=GetFlightStyle()DrawOdometer(cz,a7,TotalDistanceTravelled,dR,a8)if ShouldCheckDamage then CheckDamage(cz)end;ag=table.concat(cz,"")collectgarbage("collect")elseif iB=="fiveSecond"then an=dbHud_1.getStringValue("SPBAutopilotTargetName")if an~=nil and an~=""and an~="SatNavNotChanged"then local bJ=json.decode(dbHud_1.getStringValue("SavedLocations"))if bJ~=nil then _G["SavedLocations"]=bJ;local cx=-1;local ct;for bH,bI in pairs(SavedLocations)do if bI.name and bI.name=="SatNav Location"then cx=bH;break end end;if cx~=-1 then ct=SavedLocations[cx]cx=-1;for bH,bI in pairs(b2[0])do if bI.name and bI.name=="SatNav Location"then cx=bH;break end end;if cx>-1 then b2[0][cx]=ct end;UpdateAtlasLocationsList()W=ct.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==an then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif iB=="msgTick"then local cz={}DisplayMessage(cz,"empty")W="empty"unit.stopTimer("msgTick")ad=3 elseif iB=="animateTick"then bd=true;bc=false;ab=0;ac=0;unit.stopTimer("animateTick")elseif iB=="hudTick"then local cz={}HUDPrologue(cz)if showHud then UpdateHud(cz)else DisplayOrbitScreen(cz)DrawWarnings(cz)end;HUDEpilogue(cz)cz[#cz+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if W~="empty"then DisplayMessage(cz,W)end;if o()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then DrawDeadZone(cz)end end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cz)if screen_1.getMouseState()==1 then CheckButtons()end;cz[#cz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ab,ac)elseif system.isViewLocked()==0 then if o()==1 and V then SetButtonContains()DrawButtons(cz)if not bc and not bd then local iD=table.concat(cz,"")cz={}cz[#cz+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cz[#cz+1]=b3;cz[#cz+1]=iD;cz[#cz+1]="</body>"bc=true;cz[#cz+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cz,"")system.setScreen(content)elseif bd then local iD=table.concat(cz,"")cz={}cz[#cz+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cz[#cz+1]=b3;cz[#cz+1]=iD;cz[#cz+1]="</body>"end;if not bc then cz[#cz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ab,ac)end else CheckButtons()end else if not V and o()==0 then CheckButtons()if ae>DeadZone then if DisplayDeadZone then DrawCursorLine(cz)end end else SetButtonContains()DrawButtons(cz)end;cz[#cz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,ab,ac)end;cz[#cz+1]=[[</svg></body>]]content=table.concat(cz,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif iB=="apTick"then ao=j()>0;local bK=system.getTime()local iE=bK-bl;bl=bK;local cC=vec3(core.getConstructWorldOrientationForward())local cD=vec3(core.getConstructWorldOrientationRight())local iF=vec3(core.getConstructWorldOrientationUp())local cE=vec3(core.getWorldVertical())local iG=vec3(core.getConstructWorldPos())local dT=getRoll(cE,cC,cD)local dU=dT/180*math.pi;local dV=math.cos(dU)local dW=math.sin(dU)local cF=getPitch(cE,cC,cD)local iH=getPitch(cE,cC,cD*dV+iF*dW)local iI=-math.deg(cX(iF,bf,cC))local iJ=math.deg(cX(cD,bf,cC))bk=ao and iI<-YawStallAngle or iI>YawStallAngle or iJ<-PitchStallAngle or iJ>PitchStallAngle;bi=system.getMouseDeltaX()bj=system.getMouseDeltaY()if InvertMouse and not V then bj=-bj end;P=0;T=0;O=0;bf=vec3(core.getWorldVelocity())bg=vec3(bf):len()sys=b8[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=bb(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bf)al=hoverDetectGround()local bV=planet:getGravity(core.getConstructWorldPos()):len()*n()bm=0;ba=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]w,x,y,_=safeZone(iG)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then ab=screen_1.getMouseX()*ResolutionX;ac=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and V then if not bc then ab=ab+bi;ac=ac+bj end else ab=0;ac=0 end else ab=ab+bi;ac=ac+bj;ae=math.sqrt(ab*ab+ac*ac)if not V and o()==0 then if userControlScheme=="virtual joystick"then if ab>0 and ab>DeadZone then P=P-(ab-DeadZone)*MouseXSensitivity elseif ab<0 and ab<DeadZone*-1 then P=P-(ab+DeadZone)*MouseXSensitivity else P=0 end;if ac>0 and ac>DeadZone then O=O-(ac-DeadZone)*MouseYSensitivity elseif ac<0 and ac<DeadZone*-1 then O=O-(ac+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then ab=0;ac=0;O=(-utils.smoothstep(bj,-100,100)+0.5)*2*K;P=(-utils.smoothstep(bi,-100,100)+0.5)*2*L else ab=0;ac=0 end end end;local iK=bg>8334;if bg>SpaceSpeedLimit/3.6 and not ao and not Autopilot and not iK then W="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not iK and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iK;if ao and j()>0.09 then if bg>bp/3.6 and not AtmoSpeedAssist and not at then BrakeIsOn=true;at=true elseif not AtmoSpeedAssist and at then if bg<bp/3.6 then BrakeIsOn=false;at=false end end end;if BrakeIsOn then S=1 else S=0 end;ap=core.getAltitude()if ap==0 then ap=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ai then BrakeIsOn=false;local iL=false;if CustomTarget~=nil then iL=AlignToWorldVector(CustomTarget.position-iG,0.01)else iL=AlignToWorldVector(vec3(bf),0.01)end;be=true;if iL and(math.abs(dT)<2 or math.abs(iH)>85)and bg>=bp/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;J=true;ai=false;ak=true;Autopilot=false;BeginReentry()elseif ao and AtmoSpeedAssist then cmdThrottle(1)else cmdCruise(math.floor(bp))z=0 end elseif bg>I then AlignToWorldVector(vec3(bf),0.01)end end;if RetrogradeIsOn then if ao then RetrogradeIsOn=false elseif bg>I then AlignToWorldVector(-vec3(bf))end end;if not ProgradeIsOn and ai then if j()==0 then J=true;BeginReentry()ai=false;ak=true else ai=false;ToggleAutopilot()end end;local ep=vec3(core.getWorldVertical())*-1;local en=bf.x*ep.x+bf.y*ep.y+bf.z*ep.z;if ak and CustomTarget~=nil and(ap<HoldAltitude+200 and ap>HoldAltitude-200)and bg*3.6>bp-100 and math.abs(en)<20 and j()>=0.1 and(CustomTarget.position-iG):len()>2000+ap then ToggleAutopilot()ak=false end;if VertTakeOff then be=true;if en<-30 then W="Unable to achieve lift. Safety Landing."aa=0;be=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if ap<antigrav.getBaseAltitude()-100 then bq=0;aa=15;BrakeIsOn=false elseif en>0 then BrakeIsOn=true;aa=0 elseif en<-30 then BrakeIsOn=true;aa=15 elseif ap>=antigrav.getBaseAltitude()then BrakeIsOn=true;aa=0;VertTakeOff=false;W="Takeoff complete. Singularity engaged"end else if j()>0.08 then bq=0;BrakeIsOn=false;aa=20 elseif j()<0.08 and j()>0 then BrakeIsOn=false;if bC then bq=0;aa=20 else aa=0;bq=36;cmdCruise(3500)end else be=autoRollPreference;IntoOrbit=true;bA=false;CancelIntoOrbit=false;bu=false;bs=nil;bt=nil;if bz==nil then bz=planet end;VertTakeOff=false end end;if bq~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iM=utils.clamp(bq-iH,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(iM)local iN=utils.clamp(vTpitchPID:get(),-1,1)O=iN end end;if IntoOrbit then if bz==nil then if VectorToTarget then bz=a6 else bz=planet end end;if not bx then if bz.hasAtmosphere then by=math.floor(bz.radius+bz.noAtmosphericDensityAltitude+1000)else by=math.floor(bz.radius+bz.surfaceMaxAltitude+1000)end;bx=true end;local dC;local iO=false;local iP,iQ=getDistanceDisplayString2(by)local iR=iP..iQ;if bw.VectorToTarget then dC=CustomTarget.position-iG end;local iS,iT=bb(bz):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bz.center):len()-bz.radius)local iU=dT;if not bu then cmdThrottle(0)bt=0;br="Aligning to orbital path - OrbitHeight: "..iR;local iV=false;local iW=false;if bw.VectorToTarget then AlignToWorldVector(dC:normalize():project_on_plane(cE))iO=cC:dot(dC:project_on_plane(iF):normalize())>0.95 else AlignToWorldVector(bf)iO=iI<0.5;if bg<150 then iO=true end end;O=0;bs=0;if iH<=bs+1 and iH>=bs-1 then iV=true else iV=false end;if iU<=bt+1 and iU>=bt-1 then iW=true else iW=false end;if iV and iW and iO then bs=nil;bt=nil;bu=true end else if bw.VectorToTarget then AlignToWorldVector(dC:normalize():project_on_plane(cE))elseif bg>150 then AlignToWorldVector(bf)end;O=0;if bw.VectorToTarget then local a2,_=b9.computeDistanceAndTime(bg,bp/3.6,n(),0,0,LastMaxBrake)if bA and bf:normalize():dot(dC:normalize())>0.5 and dC:len()>15000+a2+ap then br="Orbiting to Target"elseif bA or dC:len()<15000+a2+ap then W="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;J=true;ak=true;bw.VectorToTarget,bw.AutopilotAlign=false,false;ToggleIntoOrbit()BeginReentry()end end;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and ap>by*0.9 and ap<by*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=by*0.99 and orbit.apoapsis.altitude>=by*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or bA then if bA then BrakeIsOn=false;z=0;cmdThrottle(0)bA=true;bs=0;if not bw.VectorToTarget then ToggleIntoOrbit()end end;if not bw.VectorToTarget then br=nil;bv=false;bx=false;bz=nil;be=autoRollPreference;if not ak then W="Orbit established"end;bw.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bu=false;bs=nil;bt=nil;bz=nil;bA=false;bE=0 end else br="Adjusting Orbit - OrbitHeight: "..iR;bv=true;cmdCruise(iT*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local iX=en;local iY=ap-by;local iZ=math.abs(iY)if en<10 and math.abs(iH)<10 and iZ<100 then iX=en*2 end;if iX<10 and math.abs(iH)<10 and iZ<100 then iX=iX*2 end;if iX<5 and math.abs(iH)<5 and iZ<100 then iX=iX*4 end;VSpdPID:inject(iX)bs=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.15,0,5*0.1)end;OrbitAltPID:inject(iY)bs=utils.clamp(bs-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local i_=2.75;local pcs=math.abs(utils.round(iS*i_))local j0=pcs%50;if j0>0 then pcs=pcs-j0+50 end;BrakeIsOn=false;if ap<by*0.8 then br="Escaping planet gravity - OrbitHeight: "..iR;bs=utils.map(en,200,0,-15,80)elseif ap>=by*0.8 and ap<by*1.15 then br="Approaching orbital corridor - OrbitHeight: "..iR;pcs=pcs*0.75;bs=utils.map(en,100,-100,-15,65)elseif ap>=by*1.15 and ap<by*1.5 then br="Approaching orbital corridor - OrbitHeight: "..iR;pcs=pcs*0.75;if en<0 or bv then bs=utils.map(ap,by*1.5,by*1.01,-30,0)else bs=utils.map(ap,by*0.99,by*1.5,0,30)end elseif ap>by*1.5 then br="Reentering orbital corridor - OrbitHeight: "..iR;bs=-85;local j1=utils.map(en,-150,-400,1,0.55)pcs=pcs*j1 end end;cmdCruise(math.floor(pcs))end;if bs~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local j2=bs-iH;OrbitPitchPID:inject(j2)local j3=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)O=j3 end;if bt~=nil then if iH<85 then local j4=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(j4*0.01,0,j4*0.1)end;local j5=bt-iU;OrbitRollPID:inject(j5)local j6=utils.clamp(OrbitRollPID:get(),-0.5,0.5)T=j6 end end elseif CancelIntoOrbit then bx=false;bz=nil;cmdThrottle(0)CancelIntoOrbit=false end;if Autopilot and j()==0 and not ai then local j7,j8=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local j9=(CustomTarget.position-a6.center):normalize()local ja=j9:project_on_plane((a6.center-iG):normalize()):normalize()local jb=a6.center+ja*(a6.radius+AutopilotTargetOrbit)local jc=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))if(iG-jb):len()<(iG-jc):len()then j7=jb;AutopilotTargetCoords=j7 else j7=CustomTarget.position+(CustomTarget.position-a6.center):normalize()*(AutopilotTargetOrbit-a6:getAltitude(CustomTarget.position))AutopilotTargetCoords=j7 end;local cH=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cH="::pos{"..cH.systemId..","..cH.bodyId..","..cH.latitude..","..cH.longitude..","..cH.altitude.."}"system.setWaypoint(cH)j8=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;j8=true;TargetSet=true;AutopilotRealigned=true;j7=CustomTarget.position+(iG-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local j9=(iG+bf*100000-a6.center):normalize()local ja=j9:project_on_plane((a6.center-iG):normalize()):normalize()if ja:len()<1 then j9=(iG+vec3(core.getConstructWorldOrientationForward())*100000-a6.center):normalize()ja=j9:project_on_plane((a6.center-iG):normalize()):normalize()end;j7=a6.center+ja*(a6.radius+AutopilotTargetOrbit)AutopilotTargetCoords=j7;TargetSet=true;j8=true;AutopilotRealigned=true;local cH=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cH="::pos{"..cH.systemId..","..cH.bodyId..","..cH.latitude..","..cH.longitude..","..cH.altitude.."}"system.setWaypoint(cH)end end;AutopilotDistance=(vec3(j7)-vec3(core.getConstructWorldPos())):len()local fm,fn,fo=b8:getPlanetarySystem(0):castIntersections(iG,bf:normalize(),function(fp)if fp.noAtmosphericDensityAltitude>0 then return fp.radius+fp.noAtmosphericDensityAltitude else return fp.radius+fp.surfaceMaxAltitude*1.5 end end)local fq=fn;if fo~=nil and fn~=nil then fq=math.min(fo,fn)end;if fq~=nil and fq<AutopilotDistance and fm.name==a6.name then AutopilotDistance=fq end;local iL=true;local jd=(a6.center-(vec3(core.getConstructWorldPos())+vec3(bf):normalize()*AutopilotDistance)):len()-a6.radius;local dF,dG=getDistanceDisplayString(jd)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dF..'", "unit":"'..dG..'"}')local a2,a3;if not TurnBurn then a2,a3=GetAutopilotBrakeDistanceAndTime(bg)else a2,a3=GetAutopilotTBBrakeDistanceAndTime(bg)end;if bg>300 and AutopilotAccelerating then local dC=vec3(j7)-vec3(core.getConstructWorldPos())local je=utils.clamp(math.deg(cX(iF,bf:normalize(),dC:normalize()))*bg/500,-90,90)local jf=utils.clamp(math.deg(cX(cD,bf:normalize(),dC:normalize()))*bg/500,-90,90)if math.abs(je)<20 and math.abs(jf)<20 then je=je*2;jf=jf*2 end;if math.abs(je)<2 and math.abs(jf)<2 then je=je*2;jf=jf*2 end;local iI=-math.deg(cX(iF,cC,bf:normalize()))local iJ=-math.deg(cX(cD,cC,bf:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(jf-iJ)local jg=utils.clamp(apPitchPID:get(),-1,1)O=O+jg;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(je-iI)local jh=utils.clamp(apYawPID:get(),-1,1)P=P+jh;j8=true;if math.abs(je)>2 or math.abs(jf)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if jd<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=bb(a6):escapeAndOrbitalSpeed(jd)end end;if not AutopilotCruising and not AutopilotBraking and not j8 then iL=AlignToWorldVector((j7-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iL=AlignToWorldVector(-vec3(bf):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;cmdThrottle(AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true end;local fO=unit.getThrottle()if AtmoSpeedAssist then fO=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fO==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cmdThrottle(0)z=0 end;if AutopilotDistance<=a2 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cmdThrottle(0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then cmdThrottle(100,true)z=1 end;local _,iT=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dC;if CustomTarget~=nil then dC=CustomTarget.position-iG end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and bg<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and bg<=iT and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ai=true;local cH=zeroConvertToMapPosition(a6,AutopilotTargetCoords)cH="::pos{"..cH.systemId..","..cH.bodyId..","..cH.latitude..","..cH.longitude..","..cH.altitude.."}"system.setWaypoint(cH)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iT=bb(a6):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if bg<=iT then if CustomTarget~=nil then if bf:normalize():dot(dC:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cH=zeroConvertToMapPosition(a6,CustomTarget.position)cH="::pos{"..cH.systemId..","..cH.bodyId..","..cH.latitude..","..cH.longitude..","..cH.altitude.."}"system.setWaypoint(cH)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ai=true;BrakeIsOn=false;local cH=zeroConvertToMapPosition(a6,CustomTarget.position)cH="::pos{"..cH.systemId..","..cH.bodyId..","..cH.latitude..","..cH.longitude..","..cH.altitude.."}"system.setWaypoint(cH)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ai=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a2 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fO=unit.getThrottle()if AtmoSpeedAssist then fO=z end;if fO>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iL then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ai then AutopilotTargetCoords=vec3(a6.center)+(AutopilotTargetOrbit+a6.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iL then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then cmdThrottle(AutopilotInterplanetaryThrottle,true)z=round(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ai=true;local cH=zeroConvertToMapPosition(a6,CustomTarget.position)cH="::pos{"..cH.systemId..","..cH.bodyId..","..cH.latitude..","..cH.longitude..","..cH.altitude.."}"system.setWaypoint(cH)end;if U then be=true;local jf=0;local cm=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local ji=cm-vec3(core.getConstructWorldPos())local jj=vec3(ji):project_on(vec3(core.getConstructWorldOrientationForward())):len()local jk=vec3(ji):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ae=math.sqrt(jj*jj+jk*jk)AlignToWorldVector(ji:normalize())local jl=40;local jm=ae<jl;local jn=100;local gi=utils.clamp((ae-jl)/2,10,jn)O=0;local iL=math.abs(P)<0.1;if iL and bg<gi and not jm then BrakeIsOn=false;jf=-20 else BrakeIsOn=true;jf=0 end;local jo=0;if math.abs(jf-cF)>jo then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(jf-cF)local jg=pitchPID:get()O=jg end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cI=unit.getClosestPlanetInfluence()>0;local jp=HoldAltitude-ap;local jq=500+bg;local jr=1;if AutoTakeoff then jr=utils.clamp(bg/100,0.1,1)end;local jf=(utils.smoothstep(jp,-jq,jq)-0.5)*2*MaxPitch*jr;if not Reentry and not ai and not VectorToTarget and cC:dot(bf:normalize())<0.99 then jf=(utils.smoothstep(jp,-jq*utils.clamp(20-19*j()*10,1,20),jq*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jr end;if not AltitudeHold then jf=0 end;if LockPitch~=nil then if cI and not IntoOrbit then jf=LockPitch else LockPitch=nil end end;be=true;local js=O;if Reentry then local ReentrySpeed=math.floor(bp)local jt,ju=b9.computeDistanceAndTime(bg,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jv=ap-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and ap>planet.noAtmosphericDensityAltitude+5000 and bg<=ReentrySpeed/3.6 and bg>ReentrySpeed/3.6-10 and math.abs(bf:normalize():dot(cC))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jt>-1 and jv<=jt or ap<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cmdCruise(ReentrySpeed,true)if not J then jf=-80;if j()>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;jf=0;be=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and ap>planet.noAtmosphericDensityAltitude+5000 then be=true elseif ap<=planet.noAtmosphericDensityAltitude+5000 then cmdCruise(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bp and bg<bp/3.6+1 then J=false;Reentry=false;be=true end end end;if bg>I and not aj and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bf))end;if(VectorToTarget or aj)and AutopilotTargetIndex>0 and j()>0.01 then local dC;if CustomTarget~=nil then dC=CustomTarget.position-vec3(core.getConstructWorldPos())else dC=a6.center-iG end;local je=math.deg(cX(cE:normalize(),bf,dC))*2;local jw=math.rad(math.abs(dT))if bg>minRollVelocity and j()>0.01 then local jx=utils.clamp(90-jf*2,-90,90)bm=utils.clamp(je*2,-jx,jx)local jy=je;je=utils.clamp(utils.clamp(je,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jw)+4*(iH-jf)*math.sin(math.rad(dT)),-YawStallAngle*0.85,YawStallAngle*0.85)jf=utils.clamp(utils.clamp(jf*math.cos(jw),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jy)*math.sin(jw),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bm=0;je=utils.clamp(je,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jz=iI-je;if not bk and bg>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jz)local jh=utils.clamp(yawPID:get(),-1,1)P=P+jh elseif ao and al>-1 or bg<minRollVelocity then AlignToWorldVector(dC)elseif bk and j()>0.01 then if(iI<-YawStallAngle or iI>YawStallAngle)and j()>0.01 then AlignToWorldVector(bf)end;if(iJ<-PitchStallAngle or iJ>PitchStallAngle)and j()>0.01 then jf=utils.clamp(iH-iJ,iH-PitchStallAngle*0.85,iH+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not aj then local jA=planet:getAltitude(CustomTarget.position)local jv=math.sqrt(dC:len()^2-(ap-jA)^2)local jB=LastMaxBrakeInAtmo;if jB then jB=jB*utils.clamp(bg/100,0.1,1)*j()else jB=LastMaxBrake end;if j()<0.01 then jB=LastMaxBrake end;local jC=bf:len()-math.abs(en)local jD=vec3(core.getWorldAirFrictionAcceleration())local jE=math.sqrt(jD:len()-jD:project_on(ep):len())*n()if bg>100 then a2,a3=b9.computeDistanceAndTime(bg,100,n(),0,0,jB+jE)local jF,jG=b9.computeDistanceAndTime(100,0,n(),0,0,jB/2)a2=a2+jF else a2,a3=b9.computeDistanceAndTime(bg,0,n(),0,0,jB/2)end;StrongBrakes=true;if not aj and not Reentry and jv<=a2+bg*iE/2 and(bf:project_on_plane(cE):normalize():dot(dC:project_on_plane(cE):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cmdThrottle(0)z=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(jC<0.1 or jv<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jv)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jv end elseif VectorToTarget and j()==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(aj or Reentry or IntoOrbit)then if CustomTarget~=nil and a6.name==planet.name then local dC=CustomTarget.position-vec3(core.getConstructWorldPos())local jA=planet:getAltitude(CustomTarget.position)local jv=math.sqrt(dC:len()^2-(ap-jA)^2)local jB=LastMaxBrakeInAtmo;jB=LastMaxBrake;a2,a3=b9.computeDistanceAndTime(bg,0,n(),0,0,jB/2)StrongBrakes=true;if jv<=a2+bg*iE/2 and bf:project_on_plane(cE):normalize():dot(dC:project_on_plane(cE):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;J=true;ai=false;ak=true;Autopilot=false;BeginReentry()end end;LastDistanceToTarget=jv end end;if j()==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(aj or IntoOrbit or Reentry)then if not bA and not IntoOrbit then by=HoldAltitude;bx=true;if VectorToTarget then bw.VectorToTarget=true end;ToggleIntoOrbit()VectorToTarget=false;bu=true end end;if bk and j()>0.01 and al==-1 and bg>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bf)jf=utils.clamp(iH-iJ,iH-PitchStallAngle*0.85,iH+PitchStallAngle*0.85)end;O=js;local fX=-1;if BrakeLanding then jf=0;local jH=false;local jI=30;if ba~=nil and ba>0 then local jE=0;local dZ=utils.clamp(j(),0.4,2)local jB=LastMaxBrakeInAtmo*utils.clamp(bg/100,0.1,1)*dZ;local jJ=ba*dZ+jB+jE-bV;local jK=jB/2+jE-bV;local jL=bg-math.sqrt(math.abs(jK/2)*20/(0.5*n()))*utils.sign(jK)if jL<0 then jL=0 end;local jM;if bg>100 then local jN,_=b9.computeDistanceAndTime(bg,100,n(),0,0,jB)local jO,_=b9.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(jB))jM=jN+jO else jM=b9.computeDistanceAndTime(bg,0,n(),0,0,math.sqrt(jB))end;if jM<20 then BrakeIsOn=false else local jP=0;if jL>100 then local jQ,_=b9.computeDistanceAndTime(jL,100,n(),0,0,jJ)local jR,_=b9.computeDistanceAndTime(100,0,n(),0,0,ba*dZ+math.sqrt(jB)+jE-bV)jP=jQ+jR else jP,_=b9.computeDistanceAndTime(jL,0,n(),0,0,ba*dZ+math.sqrt(jB)+jE-bV)end;jP=(jP+15+bg*iE)*1.1;local jS=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jS then local jA=planet:getAltitude(CustomTarget.position)local jT=ap-jA-100;local dC=CustomTarget.position-vec3(core.getConstructWorldPos())local jU=math.sqrt(dC:len()^2-(ap-jA)^2)if jU>100 then jS=false elseif jT<=jP or jP==-1 then BrakeIsOn=true;jH=true else BrakeIsOn=false;jH=true end end;if not jS and CalculateBrakeLandingSpeed then if jP>=jI then BrakeIsOn=true else BrakeIsOn=false end;jH=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fX=al;if fX>-1 then be=autoRollPreference;if bg<1 or bf:normalize():dot(cE)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)aa=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bf:normalize():dot(-ep)<0.999 then BrakeIsOn=true elseif en<-brakeLandingRate and not jH then BrakeIsOn=true elseif not jH then BrakeIsOn=false end end;if AutoTakeoff or aj then local fm,fo,fn;if AutopilotTargetCoords~=nil then fm,fo,fn=b8:getPlanetarySystem(0):castIntersections(iG,(AutopilotTargetCoords-iG):normalize(),function(fp)return fp.radius+fp.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if ap>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;cmdThrottle(0)z=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(jf)<15 and ap/HoldAltitude>0.75 then AutoTakeoff=false;if not aj then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif aj and bg<I then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;cmdThrottle(0)z=0 elseif aj then cmdThrottle(0)z=0;BrakeIsOn=true end elseif aj and j()==0 and a6~=nil and(fm==nil or fm.name==a6.name)then Autopilot=true;aj=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jV=hoverDetectGround()>-1;local jW=cF;if(VectorToTarget or aj)and not jV and bg>minRollVelocity and j()>0.01 then local jw=math.rad(math.abs(dT))jW=cF*math.abs(math.cos(jw))+iJ*math.sin(jw)end;local jX=utils.clamp(jf-jW,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jX=utils.clamp(jf-jW,-85,MaxPitch)elseif j()<0.01 then jX=utils.clamp(jf-jW,-MaxPitch,MaxPitch)end;if math.abs(dT)<5 or VectorToTarget or BrakeLanding or jV or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jX)local jg=pitchPID:get()O=O+jg end end;if antigrav~=nil and(antigrav and not ExternalAGG and ap<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jY=utils.clamp(N+O+system.getControlDeviceForwardInput(),-1,1)local jZ=utils.clamp(Q+T+system.getControlDeviceYawInput(),-1,1)local j_=utils.clamp(R+P-system.getControlDeviceLeftRightInput(),-1,1)local k0=S;local k1=vec3(core.getWorldVertical())if k1==nil or k1:len()==0 then k1=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local k2=vec3(core.getConstructWorldOrientationUp())local k3=vec3(core.getConstructWorldOrientationForward())local k4=vec3(core.getConstructWorldOrientationRight())local k5=vec3(core.getWorldVelocity())local k6=vec3(core.getWorldVelocity()):normalize()local k7=getRoll(k1,k3,k4)local k8=math.abs(k7)local k9=utils.sign(k7)local j=j()local ka=vec3(core.getWorldAngularVelocity())local kb=jY*pitchSpeedFactor*k4+jZ*rollSpeedFactor*k3+j_*yawSpeedFactor*k2;if k1:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ai or AltitudeHold)then local dT=getRoll(k1,k3,k4)local dU=dT/180*math.pi;local dV=math.cos(dU)local dW=math.sin(dU)local iH=getPitch(k1,k3,k4*dV+k2*dW)if be==true and math.abs(bm-k7)>autoRollRollThreshold and jZ==0 and math.abs(iH)<85 then local kc=bm;local j4=autoRollFactor;if j==0 then j4=j4/4;bm=0;kc=0 end;if rollPID==nil then rollPID=pid.new(j4*0.01,0,j4*0.1)end;rollPID:inject(kc-k7)local kd=rollPID:get()kb=kb+kd*k3 end end;if k1:len()>0.01 and j>0.0 then local ke=20.0;if turnAssist==true and k8>ke and jY==0 and j_==0 then local kf=turnAssistFactor*0.1;local kg=turnAssistFactor*0.025;local kh=(k8-ke)/(180-ke)*180;local ki=0;if kh<90 then ki=kh/90 elseif kh<180 then ki=(180-kh)/90 end;ki=ki*ki;local kj=-k9*kg*(1.0-ki)local kk=kf*ki;kb=kb+kk*k4+kj*k2 end end;local kl=1;local km=0;local kn=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bp=utils.clamp(bp+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bp=utils.clamp(bp-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local en=-k1:dot(k5)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bp/3.6-k5:dot(k3))local ko=throttlePID:get()C=utils.clamp(ko,-1,1)if C<z and j>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(k5:len()-bp/3.6)local kp=utils.clamp(brakePID:get(),0,1)if j>0 and en<-80 or j>0.005 then A=kp end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local kq=''local kr=vec3()local ks=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,aa*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",ks,km)local kt='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kt=kt..ExtraLongitudeTags end;local ku=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kv=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kt,axisCommandId.longitudinal)local kw=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)kq=kq..' , '.."lateral airfoil , lateral ground "kr=kr+kw;if kr:len()>constants.epsilon then Nav:setEngineForceCommand(kq,kr,km,'','','',kn)end;Nav:setEngineForceCommand(kt,kv,kl)local kx='thrust analog vertical fueled 'local ky='thrust analog lateral fueled 'if ExtraLateralTags~="none"then ky=ky..ExtraLateralTags end;if ExtraVerticalTags~="none"then kx=kx..ExtraVerticalTags end;if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kx,ks,kl)else Nav:setEngineForceCommand(kx,vec3(),kl)end;if LeftAmount~=0 then Nav:setEngineForceCommand(ky,kw,kl)else Nav:setEngineForceCommand(ky,vec3(),kl)end;if k0==0 then k0=A end;local kz=-k0*(brakeSpeedFactor*k5+brakeFlatFactor*k6)Nav:setEngineForceCommand('brake',kz)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local gi=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(k5:len()-gi/3.6)local kp=utils.clamp(brakePID:get(),0,1)k0=utils.clamp(k0+kp,0,1)end;local kz=-k0*(brakeSpeedFactor*k5+brakeFlatFactor*k6)Nav:setEngineForceCommand('brake',kz)local kq=''local kr=vec3()local kA=false;local kt='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kt=kt..ExtraLongitudeTags end;local ku=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ku==axisCommandType.byThrottle then local kv=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kt,axisCommandId.longitudinal)Nav:setEngineForceCommand(kt,kv,kl)elseif ku==axisCommandType.byTargetSpeed then local kv=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)kq=kq..' , '..kt;kr=kr+kv;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then kA=true end end;local ky='thrust analog lateral 'if ExtraLateralTags~="none"then ky=ky..ExtraLateralTags end;local kB=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kB==axisCommandType.byThrottle then local kC=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ky,axisCommandId.lateral)Nav:setEngineForceCommand(ky,kC,kl)elseif kB==axisCommandType.byTargetSpeed then local kw=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)kq=kq..' , '..ky;kr=kr+kw end;local kx='thrust analog vertical 'if ExtraVerticalTags~="none"then kx=kx..ExtraVerticalTags end;local kD=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kD==axisCommandType.byThrottle then local ks=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kx,axisCommandId.vertical)if aa~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kx,ks,kl,'airfoil','ground','',kn)else Nav:setEngineForceCommand(kx,vec3(),kl)Nav:setEngineForceCommand('airfoil vertical',ks,kl,'airfoil','','',kn)Nav:setEngineForceCommand('ground vertical',ks,kl,'ground','','',kn)end elseif kD==axisCommandType.byTargetSpeed then if aa<0 then Nav:setEngineForceCommand('hover',vec3(),kl)end;local kE=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)kq=kq..' , '..kx;kr=kr+kE end;if kr:len()>constants.epsilon then if S~=0 or kA or k6:dot(k3)<0.8 then kq=kq..', brake'end;Nav:setEngineForceCommand(kq,kr,km,'','','',kn)end end;local kF=torqueFactor*(kb-ka)local kG=vec3(core.getWorldAirFrictionAngularAcceleration())kF=kF-kG;Nav:setEngineTorqueCommand('torque',kF,kl,'airfoil','','',kn)Nav:setBoosterCommand('rocket_engine')if a1 and not VanillaRockets then local bY=vec3(core.getVelocity()):len()local kH=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local kI=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bY*3.6>kI*(1-kH)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bY*3.6<kI*(1-kH)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fO=unit.getThrottle()if AtmoSpeedAssist then fO=z*100 end;local gi=fO/100;if j==0 then gi=gi*MaxGameVelocity;if bY>=gi*(1-kH)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bY<gi*(1-kH)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else gi=gi*ReentrySpeed/3.6;if bY>=gi*(1-kH)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bY<gi*(1-kH)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bJ=coroutine.resume(beginSetup)if bJ then SetupComplete=true end else Nav:update()if not bc and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kJ)if kJ=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and al==-1 and(j()>0 or ap<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;be=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kJ=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif kJ=="forward"then N=N-1 elseif kJ=="backward"then N=N+1 elseif kJ=="left"then Q=Q-1 elseif kJ=="right"then Q=Q+1 elseif kJ=="yawright"then R=R-1 elseif kJ=="yawleft"then R=R+1 elseif kJ=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kJ=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kJ=="up"then aa=aa+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kJ=="down"then aa=aa-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kJ=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X elseif IntoOrbit then by=by+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kJ=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X elseif IntoOrbit then by=by-X;if by<planet.noAtmosphericDensityAltitude+100 then by=planet.noAtmosphericDensityAltitude+100 end else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kJ=="option1"then if not Autopilot then IncrementAutopilotTargetIndex()H=false end elseif kJ=="option2"then if not Autopilot then DecrementAutopilotTargetIndex()H=false end elseif kJ=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;H=false;ToggleWidgets()elseif kJ=="option4"then ToggleAutopilot()H=false elseif kJ=="option5"then ToggleLockPitch()H=false elseif kJ=="option6"then ToggleAltitudeHold()H=false elseif kJ=="option7"then wipeSaveVariables()H=false elseif kJ=="option8"then ToggleFollowMode()H=false elseif kJ=="option9"then if gyro~=nil then gyro.toggle()as=gyro.getState()==1 end;H=false elseif kJ=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then V=true;bd=false;bc=false end elseif kJ=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kJ=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kJ=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not a1 then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;a1=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;a1=false end elseif kJ=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()z=0 elseif kJ=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kJ=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kJ=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kJ)if kJ=="forward"then N=0 elseif kJ=="backward"then N=0 elseif kJ=="left"then Q=0 elseif kJ=="right"then Q=0 elseif kJ=="yawright"then R=0 elseif kJ=="yawleft"then R=0 elseif kJ=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kJ=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kJ=="up"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kJ=="down"then aa=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kJ=="groundaltitudeup"then a0=Y;Z=X;H=false elseif kJ=="groundaltitudedown"then a0=Y;Z=X;H=false elseif kJ=="lshift"then if system.isViewLocked()==1 then V=false;ab=0;ac=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then V=false;bd=false;bc=false end elseif kJ=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kJ=="lalt"then if o()==0 and freeLookToggle then if H then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else H=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kJ)if kJ=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+a0;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+a0 end;a0=a0*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+Z;Z=Z*1.05 elseif IntoOrbit then by=by+Z;Z=Z*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kJ=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-a0;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-a0;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;a0=a0*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-Z;Z=Z*1.05 elseif IntoOrbit then by=by-Z;if by<planet.noAtmosphericDensityAltitude+100 then by=planet.noAtmosphericDensityAltitude+100 end;Z=Z*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kJ=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kJ=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dH)local i;local kK="/commands /setname /G /agg /addlocation /copydatabank"local kL,kM=nil,nil;local kN="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dH," ")kL=dH;if i~=nil then kL=string.sub(dH,0,i-1)kM=string.sub(dH,i+1)elseif not string.find(kK,kL)then for ge in string.gmatch(kN,"([^\n]+)")do c(ge)end;return end;if kL=="/setname"then if kM==nil or kM==""then W="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kM)else W="Select a saved target to rename first"end elseif kL=="/addlocation"then if kM==nil or kM==""or string.find(kM,"::")==nil then W="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kM,"::")local cs=string.sub(kM,1,i-2)local cm=string.sub(kM,i)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cn='::pos{'..q..','..q..','..q..','..q..','..q..'}'local co,cp,cj,ck,ci=string.match(cm,cn)local planet=b2[tonumber(co)][tonumber(cp)]AddNewLocationByWaypoint(cs,planet,cm)W="Added "..cs.." to saved locations,\nplanet "..planet.name.." at "..cm;ad=5 elseif kL=="/agg"then if kM==nil or kM==""then W="Usage: /agg targetheight"return end;kM=tonumber(kM)if kM<1000 then kM=1000 end;AntigravTargetAltitude=kM;W="AGG Target Height set to "..kM elseif kL=="/G"then if kM==nil or kM==""then W="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kM=="dump"then for bH,bI in pairs(a)do if type(_G[bI])=="boolean"then if _G[bI]==true then c(bI.." true")else c(bI.." false")end elseif _G[bI]==nil then c(bI.." nil")else c(bI.." ".._G[bI])end end;return end;i=string.find(kM," ")local kO=string.sub(kM,0,i-1)local kP=string.sub(kM,i+1)for bH,bI in pairs(a)do if bI==kO then W="Variable "..kO.." changed to "..kP;local kQ=type(_G[bI])if kQ=="number"then kP=tonumber(kP)elseif kQ=="boolean"then if string.lower(kP)=="true"then kP=true else kP=false end end;_G[bI]=kP;return end end;W="No such global variable: "..kO elseif kL=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else W="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
