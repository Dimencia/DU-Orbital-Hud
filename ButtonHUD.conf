name: ButtonsHud - Dimencia and Archaegeo v4.58 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        freeLookToggle = true --export: Set to false for default free look behavior.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), use 6944.4444 for 25000km/hr
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        circleRad = 99 --export: The size of the artifical horizon circle, set to 0 to remove.
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        AutopilotInterplanetaryThrottle = 100 --export: How much throttle, in percent, you want it to use when autopiloting to another planet
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        script={}function script.onStart()system.print("onStart() called")SetupComplete=false;beginSetup=coroutine.create(function()system.print("beginSetup() called")Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})versionNumber=4.58;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;markers={}MinAutopilotSpeed=55;LastMaxBrake=0;EmergencyWarp=false;ReentryMode=false;brakeToggle=true;displayOrbit=true;mousePitchFactor=1;mouseYawFactor=1;hasGear=false;pitchInput=0;rollInput=0;yawInput=0;brakeInput=0;pitchInput2=0;rollInput2=0;yawInput2=0;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;Reentry=false;Autopilot=false;FollowMode=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotRealigned=false;VectorToTarget=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"simulatedX=0;simulatedY=0;HoldingCtrl=false;PrevViewLock=1;PreviousYawAmount=0;PreviousPitchAmount=0;msgText="empty"msgTimer=3;targetGroundAltitude=nil;gearExtended=nil;LastEccentricity=1;HoldAltitudeButtonModifier=5;isBoosting=false;distance=0;brakeDistance,brakeTime=0;maxBrakeDistance,maxBrakeTime=0;hasGear=false;hasDB=false;hasSpaceRadar=false;hasAtmoRadar=false;damageMessage=""radarMessage=""LastOdometerOutput=""peris=0;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;AutopilotPlanetGravity=0;UnitHidden=true;ResetAutoVars=false;totalDistanceTravelled=0.0;totalDistanceTrip=0;emergencyWarp=false;notTriedEmergencyWarp=true;lastTravelTime=system.getTime()core_altitude=core.getAltitude()elementsID=core.getElementIdList()atmoTanks={}spaceTanks={}rocketTanks={}eleTotalMaxHp=0;flightTime=0;totalFlightTime=0;RepairArrows=false;fuelTimeLeftR={}fuelPercentR={}FuelUpdateDelay=a(1/apTickRate)*2;fuelTimeLeftS={}fuelPercentS={}fuelTimeLeft={}fuelPercent={}SavedLocations={}LocationIndex=0;updateTanks=false;honeyCombMass=0;upAmount=0;system.print("Local variables...")local m={}local n=1;local o=0.001;local p=2560;local q=1440;local r=nil;local s=nil;local t=nil;local u=nil;local v=false;local w=false;local x=0;local y=nil;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance"}AutoVariables={"EmergencyWarp","hasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","AutoBrake","Autopilot","TurnBurn","AltitudeHold","displayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","gearExtended","targetGroundAltitude","totalDistanceTravelled","totalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake"}system.print("Condition checks...")if dbHud then local z=dbHud.hasKey;for A,B in pairs(SaveableVariables)do if z(B)then local C=c(dbHud.getStringValue(B))if C~=nil then system.print(B.." "..dbHud.getStringValue(B))_G[B]=C;v=true end end end;for A,B in pairs(AutoVariables)do if z(B)then local C=c(dbHud.getStringValue(B))if C~=nil then system.print(B.." "..dbHud.getStringValue(B))_G[B]=C end end end;if v then msgText="Loaded Saved Variables (see Lua Chat Tab for list)"autoRoll=autoRollPreference else msgText="No Saved Variables Found - Use Alt-7 to save your LUA parameters"end else msgText="No databank found"end;lastConstructMass=k()honeyCombMass=lastConstructMass-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]UpdateCount=0;titlecolR=rgb;titlecol=rgb;titlecolS=rgb;system.print("Yield...")coroutine.yield()system.print("Resume...Init Tanks and Elements")for A in pairs(elementsID)do local D=h(elementsID[A])if D=="landing gear"then hasGear=true end;if D=="dynamic core"then local E=e(elementsID[A])coreOffset=16;if E>10000 then coreOffset=128 elseif E>1000 then coreOffset=64 elseif E>150 then coreOffset=32 end end;eleTotalMaxHp=eleTotalMaxHp+e(elementsID[A])if D=="atmospheric fuel-tank"or D=="space fuel-tank"or D=="rocket fuel-tank"then local E=e(elementsID[A])local F=j(elementsID[A])local G=0;local H=system.getTime()if D=="atmospheric fuel-tank"then local I=400;local J=35.03;if E>10000 then I=51200;J=5480 elseif E>1300 then I=6400;J=988.67 elseif E>150 then I=1600;J=182.67 end;G=F-J;if fuelTankOptimizationAtmo>0 then I=I+I*fuelTankOptimizationAtmo*0.2 end;if G>I then I=G end;atmoTanks[#atmoTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end;if D=="rocket fuel-tank"then local I=320;local J=173.42;if E>65000 then I=40000;J=25740 elseif E>6000 then I=5120;J=4720 elseif E>700 then I=640;J=886.72 end;G=F-J;if fuelTankOptimizationRocket>0 then I=I+I*fuelTankOptimizationRocket*0.1 end;if G>I then I=G end;rocketTanks[#rocketTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end;if D=="space fuel-tank"then local I=2400;local J=182.67;if E>10000 then I=76800;J=5480 elseif E>1300 then I=9600;J=988.67 end;G=F-J;if fuelTankOptimizationSpace>0 then I=I+I*fuelTankOptimizationSpace*0.2 end;if G>I then I=G end;spaceTanks[#spaceTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end end end;system.print("Checking gyro and radar...")if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;system.print("Close door, retract ramp...")if door then for _,B in pairs(door)do B.deactivate()end end;if forcefield then for _,B in pairs(forcefield)do B.deactivate()end end;system.print("Show antigrav...")_autoconf.displayCategoryPanel(weapon,weapon_size,"Weapons","weapon",true)system.print("Check antigrav...")if antigrav~=nil then antigrav.show()end;system.print("Unfreeze remote...")if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;system.print("Calibrate altitude...")if targetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(targetGroundAltitude)end;if hasGear then if gearExtended==nil then gearExtended=Nav.control.isAnyLandingGearExtended()==1;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if targetGroundAltitude==nil then if gearExtended then Nav.axisCommandManager:setTargetGroundAltitude(0)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end elseif targetGroundAltitude==nil then if f()==0 then gearExtended=false;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else gearExtended=true;Nav.axisCommandManager:setTargetGroundAltitude(0)end end;if f()>0 and not dbHud and(gearExtended or not hasGear)then BrakeIsOn=true end;unit.hide()system.print("Defining functions...")function refreshLastMaxBrake(K,L)if K==nil then K=core.g()end;K=round(K,5)if L~=nil and L or(y==nil or y~=K)then local M=c(unit.getData()).maxBrake;if M~=nil then LastMaxBrake=M end;y=K end end;function MakeButton(N,O,P,Q,R,S,T,U,V)local W={enableName=N,disableName=O,width=P,height=Q,x=R,y=S,toggleVar=T,toggleFunction=U,drawCondition=V,hovered=false}table.insert(m,W)return W end;function AddLocationsToAtlas()for A,B in pairs(SavedLocations)do table.insert(atlas[0],B)end end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local D=#SavedLocations..". "..planet.name;if radar_1 then local X,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if X~=nil and X~=""then D=D.." "..radar_1.getConstructName(X)end end;local Y={position=position,name=D,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=Y;table.insert(atlas[0],Y)msgText="Location saved as "..D else msgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local Z=-1;for A,B in pairs(atlas[0])do if B.name and B.name==CustomTarget.name then Z=A end end;if Z>-1 then table.remove(atlas[0],Z)end;Z=-1;for A,B in pairs(SavedLocations)do if B.name and B.name==CustomTarget.name then msgText=B.name.." saved location cleared"Z=A;break end end;if Z~=-1 then table.remove(SavedLocations,Z)end;DecrementAutopilotTargetIndex()end;function DrawDeadZone(newContent)newContent[#newContent+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope","Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar","Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;peris=0 end end;function ToggleWidgets()if UnitHidden then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel","Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel","Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel","Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;UnitHidden=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;UnitHidden=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(a0,a1,R,S,P,Q)if a0>R and a0<R+P and a1>S and a1<S+Q then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then AutoBrake=false;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not gearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=core_altitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function toggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=gearExtended;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;gearExtended=OldGearExtended;if gearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end end else msgText="Follow Mode only works with Remote controller"FollowMode=false end end;function AutopilotToggle()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ToggleAutoBrake()if AutopilotTargetPlanetName~="None"and brakeInput==0 and not AutoBrake then AutoBrake=true;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false else AutoBrake=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;local a2="Off"if ProgradeIsOn then a2="On"end end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;local a3="Off"if RetrogradeIsOn then a3="On"end end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(newContent)local a4=0;damageMessage=""currentConstructMass=k()local a5=eleTotalMaxHp;local a6=0;local a7=100;local a8=0;local a9=0;local aa=0;local ab=""for A in pairs(elementsID)do local E=0;local ac=0;ac=e(elementsID[A])E=g(elementsID[A])a6=a6+E;if E<ac then if E==0 then a9=a9+1 else a8=a8+1 end;if RepairArrows and#markers==0 then position=vec3(core.getElementPositionById(elementsID[A]))local coreOffset=16;local R=position.x-coreOffset;local S=position.y-coreOffset;local ad=position.z-coreOffset;table.insert(markers,core.spawnArrowSticker(R,S,ad+1,"down"))table.insert(markers,core.spawnArrowSticker(R,S,ad+1,"down"))core.rotateSticker(markers[2],0,0,90)table.insert(markers,core.spawnArrowSticker(R+1,S,ad,"north"))table.insert(markers,core.spawnArrowSticker(R+1,S,ad,"north"))core.rotateSticker(markers[4],90,90,0)table.insert(markers,core.spawnArrowSticker(R-1,S,ad,"south"))table.insert(markers,core.spawnArrowSticker(R-1,S,ad,"south"))core.rotateSticker(markers[6],90,-90,0)table.insert(markers,core.spawnArrowSticker(R,S-1,ad,"east"))table.insert(markers,core.spawnArrowSticker(R,S-1,ad,"east"))core.rotateSticker(markers[8],90,0,90)table.insert(markers,core.spawnArrowSticker(R,S+1,ad,"west"))table.insert(markers,core.spawnArrowSticker(R,S+1,ad,"west"))core.rotateSticker(markers[10],-90,0,90)table.insert(markers,elementsID[A])end elseif RepairArrows and#markers>0 and markers[11]==elementsID[A]then for ae in pairs(markers)do core.deleteSticker(markers[ae])end;markers={}end end;a4=a(a6*100/a5)if currentConstructMass<lastConstructMass then a7=math.ceil(100*(currentConstructMass-updateMass())/honeyCombMass)lastConstructMass=currentConstructMass end;if a7<100 or a4<100 then newContent[#newContent+1]=[[<g class="pbright txt">]]if a7<100 then aa=a(a7*2.55)ab=b("rgb(%d,%d,%d)",255-aa,aa,0)newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],ab,a7)end;aa=a(a4*2.55)ab=b("rgb(%d,%d,%d)",255-aa,aa,0)if a4<100 then newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],ab,a4)if a9>0 then newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],ab,a9,a8)elseif a8>0 then newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],ab,a8)end end;newContent[#newContent+1]=[[<\g>]]end end;function DrawCursorLine(newContent)local af=a(utils.clamp(distance/(p/4)*255,0,255))newContent[#newContent+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",simulatedX,simulatedY,a(PrimaryR+0.5)+af,a(PrimaryG+0.5)-af,a(PrimaryB+0.5)-af)end;function getPitch(ag,ah,ai)local aj=ag:cross(ai):normalize_inplace()local ak=math.acos(utils.clamp(aj:dot(-ah),-1,1))*constants.rad2deg;if aj:cross(-ah):dot(ai)<0 then ak=-ak end;return ak end;function saveVariables()if not dbHud then msgText="No Databank Found, unable to save. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"msgTimer=5 elseif v then if w then for A,B in pairs(SaveableVariables)do dbHud.setStringValue(B,d(nil))end;msgText="Databank wiped. Get out of the seat, set the savable variables, \nthen re-enter seat and hit ALT-7 again"msgTimer=5;w=false;v=false else msgText="Press ALT-7 again to confirm wipe"w=true end else for A,B in pairs(SaveableVariables)do dbHud.setStringValue(B,d(_G[B]))end;msgText="Saved Variables to Datacore"ResetAutoVars=false;v=true end end;function CheckButtons()for _,B in pairs(m)do if B.hovered then B.toggleFunction()B.hovered=false end end end;function SetButtonContains()local R=simulatedX+p/2,simulatedY+q/2;local S=simulatedY+q/2;for _,B in pairs(m)do B.hovered=Contains(R,S,B.x,B.y,B.width,B.height)end end;function DrawButton(newContent,al,hover,R,S,am,an,ao,ap,aq,ar)newContent[#newContent+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",R,S,am,an)if al then newContent[#newContent+1]=b("%s'",ao)else newContent[#newContent+1]=ap end;if hover then newContent[#newContent+1]=" style='stroke:white; stroke-width:2'"else newContent[#newContent+1]=" style='stroke:black; stroke-width:1'"end;newContent[#newContent+1]="></rect>"newContent[#newContent+1]=b("<text x='%f' y='%f' font-size='24' fill='",R+am/2,S+an/2+5)if al then newContent[#newContent+1]="black"else newContent[#newContent+1]="white"end;newContent[#newContent+1]="' text-anchor='middle' font-family='Montserrat'>"if al then newContent[#newContent+1]=b("%s</text>",aq)else newContent[#newContent+1]=b("%s</text>",ar)end end;function DrawButtons(newContent)local as="rgb(50,50,50)'"local at="rgb(210,200,200)"local au=DrawButton;for _,B in pairs(m)do local O=B.disableName;local N=B.enableName;if type(O)=="function"then O=O()end;if type(N)=="function"then N=N()end;if not B.drawCondition or B.drawCondition()then au(newContent,B.toggleVar(),B.hovered,B.x,B.y,B.width,B.height,at,as,O,N)end end end;function DrawTank(newContent,updateTanks,R,av,aw,ax,ay,az)local aA=1;local aB=2;local aC=3;local aD=4;local aE=5;local aF=6;local aG=""local aH=0;local aI=350;local aJ=360;if l()==1 then aI=aI-50;aJ=aJ-50 end;newContent[#newContent+1]=[[<g class="pdim txtfuel">]]if aw=="ATMO"then aG="atmofueltank"elseif aw=="SPACE"then aG="spacefueltank"else aG="rocketfueltank"end;aH=_G[aG.."_size"]if#ax>0 then for i=1,#ax do local D=string.sub(ax[i][aB],1,12)local aK=0;for ae=1,aH do if ax[i][aB]==json.decode(unit[aG.."_"..ae].getData()).name then aK=ae;break end end;if updateTanks or ay[i]==nil or az[i]==nil then local aL=0;local aM=0;local aN=0;local aO=0;local H=system.getTime()if aK~=0 then az[i]=json.decode(unit[aG.."_"..aK].getData()).percentage;ay[i]=json.decode(unit[aG.."_"..aK].getData()).timeLeft;if ay[i]=="n/a"then ay[i]=0 end else aN=j(ax[i][aA])-ax[i][aD]aL=ax[i][aC]az[i]=a(0.5+aN*100/aL)aM=ax[i][aE]aO=ax[i][aF]if aM<=aN then ay[i]=0 else ay[i]=a(0.5+aN/((aM-aN)/(H-aO)))end;ax[i][aE]=aN;ax[i][aF]=H end end;if D==av then D=b("%s %d",aw,i)end;if aK==0 then D=D.." *"end;local aP;if ay[i]==0 then aP="n/a"else aP=FormatTimeString(ay[i])end;if az[i]~=nil then local aa=a(az[i]*2.55)local ab=b("rgb(%d,%d,%d)",255-aa,aa,0)local aQ=""if aP~="n/a"and ay[i]<120 or az[i]<5 then if updateTanks then aQ=[[class="red"]]end end;newContent[#newContent+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],R,aI,aQ,D,R,aJ,ab,az[i],aP)aI=aI+30;aJ=aJ+30 end end end;newContent[#newContent+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local ak=-math.deg(math.atan(velocity.y,velocity.z))+180;ak=ak-90;if ak<0 then ak=360+ak end;if ak>180 then ak=-180+ak-180 end;return-ak end;function getRelativeYaw(velocity)velocity=vec3(velocity)return math.deg(math.atan(velocity.y,velocity.x))-90 end;function AlignToWorldVector(aR,aS)if aS==nil then aS=o end;aR=vec3(aR):normalize()local aT=vec3(core.getConstructWorldOrientationForward())-aR;local aU=-getMagnitudeInDirection(aT,core.getConstructWorldOrientationRight())*n;local aV=-getMagnitudeInDirection(aT,core.getConstructWorldOrientationUp())*n;yawInput2=yawInput2-(aU+(aU-PreviousYawAmount)*DampingMultiplier)pitchInput2=pitchInput2+aV+(aV-PreviousPitchAmount)*DampingMultiplier;PreviousYawAmount=aU;PreviousPitchAmount=aV;if math.abs(aU)<aS and math.abs(aV)<aS then return true end;return false end;function getAPEnableName()local D=AutopilotTargetName;if D==nil then D=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if D==nil then D="None"end;return"Engage Autopilot: "..D end;function getAPDisableName()local D=AutopilotTargetName;if D==nil then D=CustomTarget.name end;if D==nil then D="None"end;return"Disable Autopilot: "..D end;local aW=50;local aX=260;local aY=MakeButton("Enable Brake Toggle","Disable Brake Toggle",aX,aW,p/2-aX/2,q/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then msgText="Brakes in Toggle Mode"else msgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",aX,aW,p/2-aX/2-50-aY.width,q/2-aW+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",aX,aW,p/2-aX/2+aY.width+50,q/2-aW+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local aZ=MakeButton(getAPEnableName,getAPDisableName,600,60,p/2-600/2,q/2-60/2-400,function()return Autopilot end,AutopilotToggle)MakeButton("Save Position","Save Position",200,aZ.height,aZ.x+aZ.width+30,aZ.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,aZ.height,aZ.x-200-30,aZ.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)aW=60;aX=300;local R=10;local S=q/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",aX,aW,R,S,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",aX,aW,R+aX+20,S,function()return AltitudeHold end,ToggleAltitudeHold)S=S+aW+20;MakeButton("Engage Autoland","Disable Autoland",aX,aW,R,S,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",aX,aW,R+aX+20,S,function()return AutoTakeoff end,ToggleAutoTakeoff)S=S+aW+20;MakeButton("Engage Follow Mode","Disable Follow Mode",aX,aW,R,S,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Engage Glide Reentry","Disable Glide Reentry",aX,aW,R+aX+20,S,function()return ReentryMode end,function()ReentryMode=not ReentryMode;if ReentryMode then msgText="Reentry Mode Enabled. Press G when aligned with planet for reentry"else msgText="Reentry Mode Disabled.  Normal Landing with G"end end)S=S+aW+20;MakeButton("Enable Emergency Warp","Disable Emergency Warp",aX,aW,R,S,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then msgText="Emergency Warp Enabled"else msgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)MakeButton("Show Orbit Display","Hide Orbit Display",aX,aW,R+aX+20,S,function()return displayOrbit end,function()displayOrbit=not displayOrbit;if displayOrbit then msgText="Orbit Display Enabled"else msgText="Orbit Display Disabled"end end)coroutine.yield()S=S+aW+20;MakeButton("Enable Repair Arrows","Disable Repair Arrows",aX,aW,R+aX+20,S,function()return RepairArrows end,function()RepairArrows=not RepairArrows;if RepairArrows then msgText="Repair Arrows Enabled"else msgText="Repair Arrows Diabled"end end,function()return l()==1 end)function updateHud(newContent)local a_=core_altitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local b0=vec3(core.getWorldVertical())local b1=vec3(core.getConstructWorldOrientationForward())local b2=vec3(core.getConstructWorldOrientationRight())local b3=vec3(core.getConstructWorldOrientationUp())local ak=getPitch(b0,b1,b2)local b4=getRoll(b0,b1,b2)local b5=b4;local b6=a(ak)local b7="ROLL"local b8=core.getWorldGravity()local K=vec3(b8):len()local b9=f()local ba=a(unit.getThrottle())local bb=speed*3.6;local bc=unit.getAxisCommandValue(0)local bd=GetFlightStyle()if b9==0 then if speed>5 then ak=getRelativePitch(velocity)b4=getRelativeYaw(velocity)else ak=0;b4=0 end;b7="YAW"end;newContent[#newContent+1]=LastOdometerOutput;newContent[#newContent+1]=damageMessage;newContent[#newContent+1]=radarMessage;if UpdateCount%FuelUpdateDelay==0 then updateTanks=true end;DrawTank(newContent,updateTanks,1700,"Atmospheric ","ATMO",atmoTanks,fuelTimeLeft,fuelPercent)DrawTank(newContent,updateTanks,1800,"Space fuel t","SPACE",spaceTanks,fuelTimeLeftS,fuelPercentS)DrawTank(newContent,updateTanks,1600,"Rocket fuel ","ROCKET",rocketTanks,fuelTimeLeftR,fuelPercentR)if updateTanks then updateTanks=false;UpdateCount=0 end;UpdateCount=UpdateCount+1;DrawVerticalSpeed(newContent,a_,b9)if l()==0 then DrawPitchDisplay(newContent,ak)if not IsInFreeLook()then DrawArtificialHorizon(newContent,b6,b5,b9)end;DrawRollDisplay(newContent,b4,b7)DrawAltitudeDisplay(newContent,a_,b9)end;DrawThrottle(newContent,bd,ba,bc)DrawSpeed(newContent,bb)DrawWarnings(newContent)DisplayOrbit(newContent)if screen_2 then local be=vec3(core.getConstructWorldPos())local R=960+be.x/MapXRatio;local S=450+be.y/MapYRatio;screen_2.moveContent(YouAreHere,(R-80)/19.2,(S-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(newContent)local bf=rgb;local bg=rgbdim;local bh=rgb;local bi=rgbdim;if IsInFreeLook()and not brightHud then bf=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bg=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;newContent[#newContent+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bf,bf,bh,bh,bg,bg,bi,bi)end;function HUDEpilogue(newContent)newContent[#newContent+1]="</svg>"end;function DrawSpeed(newContent,bb)local bj=375;local bk=390;local bl=1200;local bm=710;local bn=720;newContent[#newContent+1]=[[<g class="pdim txt txtend">]]if l()==1 then bj=60;bk=75;bl=1120;bm=55;bn=65 end;newContent[#newContent+1]=b([[
                        <g class="pbright txtmid">
                            <text x="960" y="%d">SPEED</text>
                            <text class="txtbig" x="960" y="%d">%d km/h</text>
                        </g>
                    </g>]],bj,bk,a(bb))end;function DrawOdometer(newContent,totalDistanceTrip,totalDistanceTravelled,bd,flightTime)local bl=1200;local bm=710;local bn=720;local b9=f()local K=core.g()local bo=0;local bp=0;refreshLastMaxBrake(K)maxThrust=Nav:maxForceForward()x=k()local bq=vec3(core.getWorldAcceleration()):len()/9.80665;if K>0.1 then bp=x*K;maxMass=maxThrust/K end;newContent[#newContent+1]=[[<g class="pdim txt txtend">]]if l()==1 then bl=1120;bm=55;bn=65 else newContent[#newContent+1]=b([[
                            <text x="770" y="710">ATMOSPHERE</text>
                            <text x="770" y="720">%.2f</text>
                        ]],b9)end;newContent[#newContent+1]=b([[
                        <g class="pbright txtmid">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bl,bm,bl,bn,K/9.80665,bl,bm+20,bl,bn+20,bq)newContent[#newContent+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then newContent[#newContent+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="360">%s</text>
                        ]],totalDistanceTrip,totalDistanceTravelled/1000,FormatTimeString(flightTime),FormatTimeString(totalFlightTime),x/1000,LastMaxBrake/1000,maxThrust/1000,bd)if K>0.1 then newContent[#newContent+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],maxMass/1000,bp/1000)else newContent[#newContent+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else newContent[#newContent+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bd)end;newContent[#newContent+1]="</g>"end;function DrawThrottle(newContent,bd,ba,bc)local aI=665;local aJ=675;if l()==1 then aI=55;aJ=65 end;local br="CRUISE"local unit="km/h"local bs=bc;if bd=="TRAVEL"or bd=="AUTOPILOT"then br="THROT"unit="%"bs=ba;local bt="dim"if ba<0 then bt="red"end;newContent[#newContent+1]=b([[<g class="%s">
                            <path class="linethick" d="M 792 550 L 785 550 L 785 650 L 792 650"/>
                            <g transform="translate(0 %d)">
                                <polygon points="798,650 810,647 810,653"/>
                            </g>]],bt,1-math.abs(ba))end;newContent[#newContent+1]=b([[
                        <g class="pbright txtstart">
                                <text x="783" y="%d">%s</text>
                                <text x="783" y="%d">%d %s</text>
                        </g>
                    </g>]],aI,br,aJ,bs,unit)end;function DrawVerticalSpeed(newContent,a_,b9)if a_<200000 and b9==0 or a_ and b9>0 then local velocity=vec3(core.getWorldVelocity())local bu=vec3(core.getWorldVertical())*-1;local bv=velocity.x*bu.x+velocity.y*bu.y+velocity.z*bu.z;local bw=0;if math.abs(bv)>1 then bw=45*math.log(math.abs(bv),10)if bv<0 then bw=-bw end end;newContent[#newContent+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(1525 250) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],a(bv),a(bw))end end;function DrawPitchDisplay(newContent,ak)local bx=a(ak)local by=0;local bz=540;local bA=[[<path class="dim line" d="]]newContent[#newContent+1]=[[<g class="dim txttick">]]for i=a(bx-25-bx%5+0.5),a(bx+25+bx%5+0.5),5 do if i%10==0 then num=i;if num>180 then num=-180+num-180 elseif num<-180 then num=180+num+180 end;newContent[#newContent+1]=b([[
                                    <text x="1195" y="%f">%d</text>]],bz+-i*5+ak*5+5,num)end;if i%10==0 then by=30 elseif i%5==0 then by=20 else by=7 end;local S=bz+-i*5+ak*5;bA=b([[%s M 1140 %f h %d]],bA,S,by)end;newContent[#newContent+1]="</g>"newContent[#newContent+1]=bA;newContent[#newContent+1]=b([["/>
                        <polygon class="bright" points="1138,540 1120,535 1120,545"/>
                        <g class="pdim txt">
                            <text x="1180" y="380">PITCH</text>
                            <text x="1180" y="390">%d deg</text>
                        </g>
                    ]],bx)end;function DrawAltitudeDisplay(newContent,a_,b9)if a_<200000 and b9==0 or a_ and b9>0 then local bB=a(a_/10)local num=0;local by=0;local bz=540;local bA=[[<path class="dim line" d="]]newContent[#newContent+1]=[[<g class="dim txttick txtend">]]for i=a(bB-25-bB%5+0.5),a(bB+25+bB%5+0.5),5 do if i%10==0 then num=i*10;newContent[#newContent+1]=b([[<text x="745" y="%f">%d</text>]],bz+-i*5+a_*.5+5,num)end;by=5;if i%10==0 then by=30 elseif i%5==0 then by=15 end;bA=b([[%s M 780 %f h %d]],bA,bz+-i*5+a_*.5,-by)end;newContent[#newContent+1]="</g>"newContent[#newContent+1]=bA;newContent[#newContent+1]=b([["/>
                        <polygon class="bright" points="782,540 800,535 800,545"/>
                        <g class="pdim txt">
                            <text x="770" y="380">ALTITUDE</text>
                            <text x="770" y="390">%d m</text>
                        </g>]],a(a_))end end;function DrawArtificialHorizon(newContent,b6,b5,b9)local bC=circleRad;if bC>0 and unit.getClosestPlanetInfluence()>0 then if b6>90 and b9==0 then b6=90-(b6-90)elseif b6<-90 and b9==0 then b6=-90-(b6+90)end;newContent[#newContent+1]=b([[
                            <circle class="ah" r="%f" cx="960" cy="540"/>
                                <clipPath id="cut"><circle r="%f" cx="960" cy="540"/></clipPath>
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" clip-path="url(#cut)" transform="rotate(%f 960 540)"/>]],bC,bC-1,960-bC,540+bC*b6/90,bC*2,bC*2,-1*b5)end end;function DrawRollDisplay(newContent,b4,b7)local bD=a(b4)local bE=0;local num=0;local by=0;newContent[#newContent+1]=[[<g class="txttick dim">]]for i=a(bD-30-bD%5+0.5),a(bD+30+bD%5+0.5),5 do local bF=i-b4;newContent[#newContent+1]=b([[<g transform="rotate(%f,960,460)">]],bF)if i%10==0 then bE=i/math.abs(i)if i==0 then bE=0 end;num=math.abs(i)if num>180 then num=180+180-num end;newContent[#newContent+1]=b([[
                                <text x="960" y="760">%d</text>]],a(bE*num+0.5))end;by=5;if i%10==0 then by=15 elseif i%5==0 then by=10 end;newContent[#newContent+1]=b([[<line x1="960" y1="730" x2="960" y2="%d"/></g>]],730+by)end;newContent[#newContent+1]=b([[</g>
                        <polygon class="bright" points="960,725 955,707 965,707"/>
                        <g class="pdim txt txtmid">
                            <text x="960" y="688">%s</text>
                            <text x="960" y="698">%d deg</text>
                        </g>]],b7,a(b4))end;function DrawWarnings(newContent)newContent[#newContent+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],versionNumber)newContent[#newContent+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then newContent[#newContent+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]newContent[#newContent+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]newContent[#newContent+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local bG=960;local bH=860;local bI=900;local bJ=930;local bK=225;local bL=150;local bM=960;if l()==1 then bH=135;bI=155;bJ=175;bK=115;bL=95 end;if BrakeIsOn then newContent[#newContent+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],bG,bH)end;if GyroIsOn then newContent[#newContent+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],bG,bM)end;if gearExtended then if hasGear then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],bG,bI)else newContent[#newContent+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],bG,bI)end;newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],bG,bJ,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if AutoBrake and AutopilotTargetPlanetName~="None"then if brakeInput==0 then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Auto-Braking when within %s of %s</text>]],bG,bK,getDistanceDisplayString(maxBrakeDistance),AutopilotTargetPlanet.name)else newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Auto-Braking until eccentricity: %f begins to increase</text>]],bG,bK,round(orbit.eccentricity,2))end elseif Autopilot and AutopilotTargetPlanetName~="None"then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],bG,bK,AutopilotStatus)elseif FollowMode then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],bG,bK)elseif AltitudeHold then if AutoTakeoff then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],bG,bK,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then newContent[#newContent+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],bG,bK+50)end else newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],bG,bK,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then newContent[#newContent+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],bG,bK)else newContent[#newContent+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],bG,bK)end end;if TurnBurn then newContent[#newContent+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],bG,bL)end;if VectorToTarget then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],bG,bL,VectorStatus)end;newContent[#newContent+1]="</g>"end;function DisplayOrbit(newContent)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and displayOrbit then local bN=75;local bO=0;local bP=250;local bQ=4;bO=bO+bQ;local bR=15;local R=bN+bP+bN/2+bQ;local S=bO+bP/2+5+bQ;local bS,bT,bU,bV;bS=bP/4;bV=0;newContent[#newContent+1]=[[<g class="pbright txtorb txtmid">]]newContent[#newContent+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',bP+bN*2,bP+bO,bQ,bQ)if orbit.periapsis~=nil and orbit.apoapsis~=nil then bU=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(bS*2)bT=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/bU*(1-orbit.eccentricity)bV=bS-orbit.periapsis.altitude/bU-planet.radius/bU;local bW=""if orbit.periapsis.altitude<=0 then bW='redout'end;newContent[#newContent+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],bW,bN+bP/2+bV+bQ,bO+bP/2+bQ,bS,bT)newContent[#newContent+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',bN+bP/2+bQ,bO+bP/2+bQ,planet.radius/bU)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>0 then newContent[#newContent+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],R-35,S-5,bN+bP/2+bS+bV,S-5)newContent[#newContent+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],R,S)S=S+bR;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getDistanceDisplayString(orbit.apoapsis.altitude))S=S+bR;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,FormatTimeString(orbit.timeToApoapsis))S=S+bR;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getSpeedDisplayString(orbit.apoapsis.speed))end;S=bO+bP/2+5+bQ;R=bN-bN/2+10+bQ;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>0 then newContent[#newContent+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],R+35,S-5,bN+bP/2-bS+bV,S-5)newContent[#newContent+1]=b([[<text x="%f" y="%f">Periapsis</text>]],R,S)S=S+bR;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getDistanceDisplayString(orbit.periapsis.altitude))S=S+bR;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,FormatTimeString(orbit.timeToPeriapsis))S=S+bR;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getSpeedDisplayString(orbit.periapsis.speed))end;newContent[#newContent+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],bN+bP/2+bQ,20+bQ,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil then local bX=orbit.timeToApoapsis/orbit.period*2*math.pi;local bY=bS*math.cos(bX)local bZ=bT*math.sin(bX)newContent[#newContent+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',bN+bP/2+bY+bV+bQ,bO+bP/2+bZ+bQ)end;newContent[#newContent+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000}}}end;atlas=Atlas()for A,B in pairs(atlas[0])do if r==nil or B.center.x<r then r=B.center.x end;if s==nil or B.center.x>s then s=B.center.x end;if t==nil or B.center.y<t then t=B.center.y end;if u==nil or B.center.y>u then u=B.center.y end end;GalaxyMapHTML=""local b_=1.1*(s-r)/1920;local c0=1.4*(u-t)/1080;for A,B in pairs(atlas[0])do local R=960+B.center.x/b_;local S=540+B.center.y/c0;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..R..'" cy="'..S..'" r="'..B.radius/b_*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(B.name,"Moon")and not string.match(B.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..R.."' y='"..S+B.radius/b_*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..B.name.."</text>"end end;local be=vec3(core.getConstructWorldPos())local R=960+be.x/b_;local S=540+be.y/c0;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..R..'" cy="'..S..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..R.."' y='"..S-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=b_;MapYRatio=c0;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local be=vec3(core.getConstructWorldPos())local R=960+be.x/b_;local S=540+be.y/c0;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((R-80)/19.20,(S-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function c1(c2)return type(c2)=='number'end;local function c3(c2)return type(tonumber(c2))=='number'end;local function c4(c5)return type(c5)=='table'end;local function c6(c7)return type(c7)=='string'end;local function c8(B)return c4(B)and c1(B.x and B.y and B.z)end;local function c9(ca)return c4(ca)and c1(ca.latitude and ca.longitude and ca.altitude and ca.bodyId and ca.systemId)end;local cb=math.pi/180;local cc=180/math.pi;local epsilon=1e-10;local num=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cd='::pos{'..num..','..num..','..num..','..num..','..num..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local ce=utils.clamp;local function cf(cg,ch)if cg==0 then return math.abs(ch)<1e-09 end;if ch==0 then return math.abs(cg)<1e-09 end;return math.abs(cg-ch)<math.max(math.abs(cg),math.abs(ch))*epsilon end;local function ci(c2)local C=string.gsub(string.reverse(b('%.4f',c2)),'^0*%.?','')return C==''and'0'or string.reverse(C)end;local function cj(ck)if c8(ck)then return b('{x=%.3f,y=%.3f,z=%.3f}',ck.x,ck.y,ck.z)end;if c4(ck)and not getmetatable(ck)then local cl={}local cm=next(ck)if type(cm)=='nil'or cm==1 then cl=ck else for A,B in pairs(ck)do local bs=cj(B)if type(A)=='number'then table.insert(cl,b('[%s]=%s',A,bs))else table.insert(cl,b('%s=%s',A,bs))end end end;return b('{%s}',table.concat(cl,','))end;if c6(ck)then return b("'%s'",ck:gsub("'",[[\']]))end;return tostring(ck)end;local cn={}cn.__index=cn;cn.__tostring=function(ck,co)local cp=co or''local cq={}for A in pairs(ck)do table.insert(cq,A)end;table.sort(cq)local cl={}for _,A in ipairs(cq)do local bs=cj(ck[A])if type(A)=='number'then table.insert(cl,b('[%s]=%s',A,bs))else table.insert(cl,b('%s=%s',A,bs))end end;if co then return b('%s%s',co,table.concat(cl,',\n'..co))end;return b('{%s}',table.concat(cl,','))end;cn.__eq=function(cr,cs)return cr.planetarySystemId==cs.planetarySystemId and cr.bodyId==cs.bodyId and cf(cr.radius,cs.radius)and cf(cr.center.x,cs.center.x)and cf(cr.center.y,cs.center.y)and cf(cr.center.z,cs.center.z)and cf(cr.GM,cs.GM)end;local function ct(cu,cv,cw,cx,cy)assert(c3(cu),'Argument 1 (planetarySystemId) must be a number:'..type(cu))assert(c3(cv),'Argument 2 (bodyId) must be a number:'..type(cv))assert(c3(cw),'Argument 3 (radius) must be a number:'..type(cw))assert(c4(cx),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cx))assert(c3(cy),'Argument 5 (GM) must be a number:'..type(cy))return setmetatable({planetarySystemId=tonumber(cu),bodyId=tonumber(cv),radius=tonumber(cw),center=vec3(cx),GM=tonumber(cy)},cn)end;local cz={}cz.__index=cz;cz.__tostring=function(cA)return b('::pos{%d,%d,%s,%s,%s}',cA.systemId,cA.bodyId,ci(cA.latitude*cc),ci(cA.longitude*cc),ci(cA.altitude))end;cz.__eq=function(cr,cs)return cr.bodyId==cs.bodyId and cr.systemId==cs.systemId and cf(cr.latitude,cs.latitude)and cf(cr.altitude,cs.altitude)and(cf(cr.longitude,cs.longitude)or cf(cr.latitude,math.pi/2)or cf(cr.latitude,-math.pi/2))end;local function cB(cC,cv,cD,cE,a_)local cu=cC;if c6(cC)and not cE and not a_ and not cv and not cD then cu,cv,cD,cE,a_=string.match(cC,cd)assert(cu,'Argument 1 (position string) is malformed.')else assert(c3(cu),'Argument 1 (systemId) must be a number:'..type(cu))assert(c3(cv),'Argument 2 (bodyId) must be a number:'..type(cv))assert(c3(cD),'Argument 3 (latitude) must be in degrees:'..type(cD))assert(c3(cE),'Argument 4 (longitude) must be in degrees:'..type(cE))assert(c3(a_),'Argument 5 (altitude) must be in meters:'..type(a_))end;cu=tonumber(cu)cv=tonumber(cv)cD=tonumber(cD)cE=tonumber(cE)a_=tonumber(a_)if cv==0 then return setmetatable({latitude=cD,longitude=cE,altitude=a_,bodyId=cv,systemId=cu},cz)end;return setmetatable({latitude=cb*ce(cD,-90,90),longitude=cb*(cE%360),altitude=a_,bodyId=cv,systemId=cu},cz)end;local cF={}cF.__index=cF;cF.__tostring=function(ck,co)local cp=co and co..'  'local cG={}local cq={}for A in pairs(ck)do table.insert(cq,A)end;table.sort(cq)for _,cH in ipairs(cq)do bdy=ck[cH]local cI=cn.__tostring(bdy,cp)if co then table.insert(cG,b('[%s]={\n%s\n%s}',cH,cI,co))else table.insert(cG,b('  [%s]=%s',cH,cI))end end;if co then return b('\n%s%s%s',co,table.concat(cG,',\n'..co),co)end;return b('{\n%s\n}',table.concat(cG,',\n'))end;local function cJ(cK)local atlas={}local pid;for _,B in pairs(cK)do local X=B.planetarySystemId;if type(X)~='number'then error('Invalid planetary system ID: '..tostring(X))elseif pid and X~=pid then error('Mismatch planetary system IDs: '..X..' and '..pid)end;local cL=B.bodyId;if type(cL)~='number'then error('Invalid body ID: '..tostring(cL))elseif atlas[cL]then error('Duplicate body ID: '..tostring(cL))end;setmetatable(B.center,getmetatable(vec3.unit_x))atlas[cL]=setmetatable(B,cn)pid=X end;return setmetatable(atlas,cF)end;PlanetaryReference={}local function cM(cK)return setmetatable({galaxyAtlas=cK or{}},PlanetaryReference)end;PlanetaryReference.__index=function(c5,i)if type(i)=='number'then local system=c5.galaxyAtlas[i]return cJ(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(ck)return function(c5,A)local cN,nv=next(c5,A)return cN,nv and cJ(nv)end,ck.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(ck)local cO={}for _,cP in pairs(ck or{})do local cQ=cP:getPlanetarySystemId()local cR=cF.__tostring(cP,'    ')table.insert(cO,b('  [%s]={%s\n  }',cQ,cR))end;return b('{\n%s\n}\n',table.concat(cO,',\n'))end;PlanetaryReference.BodyParameters=ct;PlanetaryReference.MapPosition=cB;PlanetaryReference.PlanetarySystem=cJ;function PlanetaryReference.createBodyParameters(cS,cv,cT,cU,cV,cW,cX)assert(c3(cS),'Argument 1 (planetarySystemId) must be a number:'..type(cS))assert(c3(cv),'Argument 2 (bodyId) must be a number:'..type(cv))assert(c3(cT),'Argument 3 (surfaceArea) must be a number:'..type(cT))assert(c4(cU),'Argument 4 (aPosition) must be an array or vec3:'..type(cU))assert(c4(cV),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(cV))assert(c3(cW),'Argument 6 (altitude) must be in meters:'..type(cW))assert(c3(cX),'Argument 7 (gravityAtPosition) must be number:'..type(cX))local cw=math.sqrt(cT/4/math.pi)local distance=cw+cW;local cY=vec3(cU)+distance*vec3(cV)local cy=cX*distance*distance;return ct(cS,cv,cw,cY,cy)end;PlanetaryReference.isMapPosition=c9;function PlanetaryReference:getPlanetarySystem(cC)local cS=cC;if c9(cC)then cS=cC.systemId end;if type(cS)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=cF then system=cJ(system)end;return system end end end;function cF:castIntersections(cZ,c_,d0,d1)local d0=d0 or function(d2)return 1.05*d2.radius end;local d3={}if d1 then for _,i in ipairs(d1)do d3[i]=self[i]end else d1={}for A,d2 in pairs(self)do table.insert(d1,A)d3[A]=d2 end end;local function d4(d5,d6)local d7=d3[d5].center-cZ;local d8=d3[d6].center-cZ;return d7:len()<d8:len()end;table.sort(d1,d4)local d9=c_:normalize()for i,X in ipairs(d1)do local d2=d3[X]local da=d2.center-cZ;local cw=d0(d2)local db=da:dot(d9)local dc=db^2-(da:len2()-cw^2)if dc>=0 then local dd=math.sqrt(dc)local de=db+dd;local df=db-dd;if df>0 then return d2,de,df elseif de>0 then return d2,de,nil end end end;return nil,nil,nil end;function cF:closestBody(dg)assert(type(dg)=='table','Invalid coordinates.')local dh,d2;local di=vec3(dg)for _,dj in pairs(self)do local dk=(dj.center-di):len2()if not d2 or dk<dh then d2=dj;dh=dk end end;return d2 end;function cF:convertToBodyIdAndWorldCoordinates(cC)local dl=cC;if c6(cC)then dl=cB(cC)end;if dl.bodyId==0 then return 0,vec3(dl.latitude,dl.longitude,dl.altitude)end;local dj=self:getBodyParameters(dl)if dj then return dl.bodyId,dj:convertToWorldCoordinates(dl)end end;function cF:getBodyParameters(cC)local cv=cC;if c9(cC)then cv=cC.bodyId end;assert(c3(cv),'Argument 1 (bodyId) must be a number:'..type(cv))return self[cv]end;function cF:getPlanetarySystemId()local A,B=next(self)return B and B.planetarySystemId end;function cn:convertToMapPosition(cx)assert(c4(cx),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cx))local dm=vec3(cx)if self.bodyId==0 then return setmetatable({latitude=dm.x,longitude=dm.y,altitude=dm.z,bodyId=0,systemId=self.planetarySystemId},cz)end;local dn=dm-self.center;local distance=dn:len()local a_=distance-self.radius;local cD=0;local cE=0;if not cf(distance,0)then local dp=math.atan(dn.y,dn.x)cE=dp>=0 and dp or 2*math.pi+dp;cD=math.pi/2-math.acos(dn.z/distance)end;return setmetatable({latitude=cD,longitude=cE,altitude=a_,bodyId=self.bodyId,systemId=self.planetarySystemId},cz)end;function cn:convertToWorldCoordinates(cC)local dl=c6(cC)and cB(cC)or cC;if dl.bodyId==0 then return vec3(dl.latitude,dl.longitude,dl.altitude)end;assert(c9(dl),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(dl.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(dl.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local dq=math.cos(dl.latitude)return self.center+(self.radius+dl.altitude)*vec3(dq*math.cos(dl.longitude),dq*math.sin(dl.longitude),math.sin(dl.latitude))end;function cn:getAltitude(cx)return(vec3(cx)-self.center):len()-self.radius end;function cn:getDistance(cx)return(vec3(cx)-self.center):len()end;function cn:getGravity(cx)local dr=self.center-vec3(cx)local ds=dr:len2()return self.GM/ds*dr/math.sqrt(ds)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return cM(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function c6(c7)return type(c7)=='string'end;local function c4(c5)return type(c5)=='table'end;local function cf(cg,ch)if cg==0 then return math.abs(ch)<1e-09 end;if ch==0 then return math.abs(cg)<1e-09 end;return math.abs(cg-ch)<math.max(math.abs(cg),math.abs(ch))*epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(a_)assert(self.body)local distance=a_+self.body.radius;if not cf(distance,0)then local orbit=math.sqrt(self.body.GM/distance)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(cC,velocity)assert(self.body)assert(c4(cC)or c6(cC))assert(c4(velocity))local be=(c6(cC)or PlanetRef.isMapPosition(cC))and self.body:convertToWorldCoordinates(cC)or vec3(cC)local B=vec3(velocity)local dt=be-self.body.center;local d8=B:len2()local du=dt:len()local dv=self.body.GM;local dw=((d8-dv/du)*dt-dt:dot(B)*B)/dv;local cg=dv/(2*dv/du-d8)local dx=dw:len()local d9=dw:normalize()local dy=cg*(1-dx)local dz=cg*(1+dx)local dA=dy*d9+self.body.center;local dB=dx<=1 and-dz*d9+self.body.center or nil;local dC=math.sqrt(cg*dv*(1-dx*dx))local dD=dB and 2*math.pi*math.sqrt(cg^3/dv)local dE=math.acos(dw:dot(dt)/(dx*du))if dt:dot(B)<0 then dE=-(dE-2*math.pi)end;local dF=math.acos((math.cos(dE)+dx)/(1+dx*math.cos(dE)))local dG=dF;if dG<0 then dG=dG+2*math.pi end;local dH=dG-dx*math.sin(dG)local dI=0;local dJ=0;local dK=0;if dD~=nil then dI=dH/(2*math.pi/dD)dJ=dD-dI;dK=dJ+dD/2;if dE-math.pi>0 then dJ=dI;dK=dJ+dD/2 end;if dK>dD then dK=dK-dD end end;return{periapsis={position=dA,speed=dC/dy,circularOrbitSpeed=math.sqrt(dv/dy),altitude=dy-self.body.radius},apoapsis=dB and{position=dB,speed=dC/dz,circularOrbitSpeed=math.sqrt(dv/dz),altitude=dz-self.body.radius},currentVelocity=B,currentPosition=be,eccentricity=dx,period=dD,eccentricAnomaly=dF,meanAnomaly=dH,timeToPeriapsis=dJ,timeToApoapsis=dK}end;local function dL(dM)local dj=PlanetRef.BodyParameters(dM.planetarySystemId,dM.bodyId,dM.radius,dM.center,dM.GM)return setmetatable({body=dj},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return dL(...)end})end;function Kinematics()local Kinematic={}local dN=30000000/3600;local dO=dN*dN;local dP=100;local function dQ(B)return 1/math.sqrt(1-B*B/dO)end;function Kinematic.computeAccelerationTime(dR,dS,dT)local dU=dN*math.asin(dR/dN)return(dN*math.asin(dT/dN)-dU)/dS end;function Kinematic.computeDistanceAndTime(dR,dT,dV,dW,dX,dY)dX=dX or 0;dY=dY or 0;local dZ=dQ(dR)local d_=dR<=dT;local e0=dW*(d_ and 1 or-1)/dV;local e1=-dY/dV;local e2=e0+e1;if d_ and e2<=0 or not d_ and e2>=0 then return-1,-1 end;local e3,e4=0,0;if e0~=0 and dX>0 then local dU=math.asin(dR/dN)local e5=math.pi*(e0/2+e1)local e6=e0*dX;local e7=dN*math.pi;local B=function(c5)local am=(e5*c5-e6*math.sin(math.pi*c5/2/dX)+e7*dU)/e7;local e8=math.tan(am)return dN*e8/math.sqrt(e8*e8+1)end;local e9=d_ and function(c7)return c7>=dT end or function(c7)return c7<=dT end;e4=2*dX;if e9(B(e4))then local ea=0;while math.abs(e4-ea)>0.5 do local c5=(e4+ea)/2;if e9(B(c5))then e4=c5 else ea=c5 end end end;local eb=dR;local ec=e4/dP;for ed=1,dP do local speed=B(ed*ec)e3=e3+(speed+eb)*ec/2;eb=speed end;if e4<2*dX then return e3,e4 end;dR=eb end;local dU=dN*math.asin(dR/dN)local ee=(dN*math.asin(dT/dN)-dU)/e2;local ef=dO*math.cos(dU/dN)/e2;local distance=ef-dO*math.cos((e2*ee+dU)/dN)/e2;return distance+e3,ee+e4 end;function Kinematic.computeTravelTime(dR,dS,distance)if distance==0 then return 0 end;if dS>0 then local dU=dN*math.asin(dR/dN)local ef=dO*math.cos(dU/dN)/dS;return(dN*math.acos(dS*(ef-distance)/dO)-dU)/dS end;assert(dR>0,'Acceleration and initial speed are both zero.')return distance/dR end;function Kinematic.lorentz(B)return dQ(B)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()InAtmo=f()>0;function getDistanceDisplayString(distance)local eg=distance>100000;local C=""if eg then C=round(distance/1000/200,1).." SU"elseif distance<1000 then C=round(distance,1).." M"else C=round(distance/1000,1).." KM"end;return C end;function getDistanceDisplayString2(distance)local eg=distance>100000;local C=""if eg then C=round(distance/1000/200,2).." SU"elseif distance<1000 then C=round(distance,2).." M"else C=round(distance/1000,2).." KM"end;return C end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(eh)local ei=a(eh/3600)local ej=a(eh/60%60)local eh=a(eh%60)if eh<0 or ei<0 or ej<0 then return"0s"end;if ei>0 then return ei.."h "..ej.."m "..eh.."s"elseif ej>0 then return ej.."m "..eh.."s"else return eh.."s"end end;function getMagnitudeInDirection(aR,c_)aR=vec3(aR)c_=vec3(c_):normalize()local C=aR*c_;return C.x+C.y+C.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local ek=0;for A,B in pairs(atlas[0])do ek=ek+1;if ek==AutopilotTargetIndex then if B.center then AutopilotTargetName=B.name;AutopilotTargetPlanet=galaxyReference[0][A]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;system.addDataToWidget(widgetMaxMassText,widgetMaxMass)system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=B end end end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>tablelength(atlas[0])then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=tablelength(atlas[0])end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local el=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return el end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local em,en=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local eo,ep;if not TurnBurn then eo,ep=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else eo,ep=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local eq=0;local er=0;if brakeDistance+em<AutopilotDistance then eq=AutopilotDistance-(brakeDistance+em)er=Kinematic.computeTravelTime(8333.0556,0,eq)else local es=(AutopilotDistance-brakeDistance)/em;em=AutopilotDistance-brakeDistance;en=en*es end;if AutopilotBraking then return ep elseif AutopilotCruising then return er+ep else return en+brakeTime+er end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local et=Nav.axisCommandManager:getAxisCommandType(0)local bd="TRAVEL"if et==1 then bd="CRUISE"end;if Autopilot then bd="AUTOPILOT"end;return bd end;function round(num,eu)local ev=10^(eu or 0)return a(num*ev+0.5)/ev end;function tablelength(ew)local ek=0;for _ in pairs(ew)do ek=ek+1 end;return ek end;function BeginProfile(ex)ProfileTimeStart=system.getTime()end;function EndProfile(ex)local ey=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+ey;ProfileCount=ProfileCount+1;if ey>ProfileTimeMax then ProfileTimeMax=ey end;if ey<ProfileTimeMin then ProfileTimeMin=ey end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local ez=ProfileTimeSum;local eA=ProfileTimeSum/ProfileCount;local eB=ProfileTimeMin;local eC=ProfileTimeMax;local eD=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",ez,eA,eB,eC,eD))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")system.print("Setting up apTick timer")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)end)end;function script.onEnd()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local eE=unit.getAtmosphereDensity()if door and(eE>0 or eE==0 and core_altitude<10000)then for _,B in pairs(door)do B.activate()end end;if forcefield and(eE>0 or eE==0 and core_altitude<10000)then for _,B in pairs(forcefield)do B.activate()end end;if dbHud then if not ResetAutoVars then for A,B in pairs(AutoVariables)do dbHud.setStringValue(B,json.encode(_G[B]))end end end;if button then button.activate()end end;function script.onTick(eF)if eF=="oneSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()distance=AutopilotDistance;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(brakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(maxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(maxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not InAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=true elseif unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local eG;eG=radar_1.getData():find('identifiedConstructs":%[%]')if hasSpaceRadar and EmergencyWarp then local X,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if X~=nil and X~=""then if math.floor(distance)<EmergencyWarpDistance and notTriedEmergencyWarp then emergencyWarp=true;notTriedEmergencyWarp=false end end end;if eG==nil and perisPanelID==nil then peris=1;ToggleRadarPanel()end;if eG~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local eH=radar_1.getEntries()radarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#eH)local eI={}for A,B in pairs(eH)do if radar_1.hasMatchingTransponder(B)==1 then eI[#eI+1]=B end end;if#eI>0 then local S=15;radarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],radarMessage,S)for A,B in pairs(eI)do S=S+20;radarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],radarMessage,S,radar_1.getConstructName(B))end end elseif radar_1 then local eJ;eJ=radar_1.getData():find('worksInEnvironment":false')if eJ then radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then peris=0;ToggleRadarPanel()end end;if warpdrive~=nil then if emergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then msgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"msgTimer=5;unit.setTimer("emergencyWarpTick",5)emergencyWarp=false else msgText="Emergency Warp Condition Met - Cannot Warp, will retry in 30 seconds\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=10;emergencyWarp=false;setTimer("thirtySecond",30)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end;local newContent={}local bd=GetFlightStyle()DrawOdometer(newContent,totalDistanceTrip,totalDistanceTravelled,bd,flightTime)checkDamage(newContent)LastOdometerOutput=table.concat(newContent,"")collectgarbage("collect")elseif eF=="thirtySecond"then notTriedEmergencyWarp=true;emergencyWarp=true;unit.stopTimer("thirtySecond")elseif eF=="msgTick"then DisplayMessage(newContent,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif eF=="emergencyWarpTick"then msgText="EMERGENCY WARP ACTIVATED"msgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;unit.stopTimer("emergencyWarpTick")elseif eF=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif eF=="apTick"then local l=Nav.control.isRemoteControlled;yawInput2=0;rollInput2=0;pitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local eK=system.getMouseDeltaX()local eL=system.getMouseDeltaY()targetGroundAltitude=Nav:getTargetGroundAltitude()local eM=0.002;if BrakeIsOn then brakeInput=1 else brakeInput=0 end;core_altitude=core.getAltitude()if core_altitude==0 then core_altitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local newContent={}HUDPrologue(newContent)if showHud then updateHud(newContent)else DisplayOrbit(newContent)DrawWarnings(newContent)end;HUDEpilogue(newContent)newContent[#newContent+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if msgText~="empty"then DisplayMessage(newContent,msgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(newContent)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then simulatedX=screen_1.getMouseX()*2560;simulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(newContent)if screen_1.getMouseState()==1 then CheckButtons()end;newContent[#newContent+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then simulatedX=simulatedX+eK;simulatedY=simulatedY+eL end;SetButtonContains()DrawButtons(newContent)if not Animating and not Animated then local eN=table.concat(newContent,"")newContent={}newContent[#newContent+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"newContent[#newContent+1]=GalaxyMapHTML;newContent[#newContent+1]=eN;newContent[#newContent+1]="</body>"Animating=true;newContent[#newContent+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(newContent,"")system.setScreen(content)elseif Animated then local eN=table.concat(newContent,"")newContent={}newContent[#newContent+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"newContent[#newContent+1]=GalaxyMapHTML;newContent[#newContent+1]=eN;newContent[#newContent+1]="</body>"end;if not Animating then newContent[#newContent+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end else CheckButtons()simulatedX=0;simulatedY=0 end else simulatedX=simulatedX+eK;simulatedY=simulatedY+eL;distance=math.sqrt(simulatedX*simulatedX+simulatedY*simulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if simulatedX>0 and simulatedX>DeadZone then yawInput2=yawInput2-(simulatedX-DeadZone)*MouseXSensitivity elseif simulatedX<0 and simulatedX<DeadZone*-1 then yawInput2=yawInput2-(simulatedX+DeadZone)*MouseXSensitivity else yawInput2=0 end;if simulatedY>0 and simulatedY>DeadZone then pitchInput2=pitchInput2-(simulatedY-DeadZone)*MouseYSensitivity elseif simulatedY<0 and simulatedY<DeadZone*-1 then pitchInput2=pitchInput2-(simulatedY+DeadZone)*MouseYSensitivity else pitchInput2=0 end elseif userControlScheme=="Mouse"then simulatedX=0;simulatedY=0;pitchInput2=(-utils.smoothstep(eL,-100,100)+0.5)*2*mousePitchFactor;yawInput2=(-utils.smoothstep(eK,-100,100)+0.5)*2*mouseYawFactor else simulatedX=0;simulatedY=0 end;CheckButtons()if distance>DeadZone then DrawCursorLine(newContent)end else SetButtonContains()DrawButtons(newContent)end;newContent[#newContent+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end;newContent[#newContent+1]=[[</svg></body>]]content=table.concat(newContent,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if AutoBrake and AutopilotTargetPlanetName~="None"and(vec3(core.getConstructWorldPos())-vec3(AutopilotTargetPlanet.center)):len()<=brakeDistance then brakeInput=1;if planet.name==AutopilotTargetPlanet.name and orbit.apoapsis~=nil and orbit.eccentricity<1 then brakeInput=0;AutoBrake=false end end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)end;brakeDistance=brakeDistance;brakeTime=brakeTime;local eO=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local eP=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local eQ=getMagnitudeInDirection(eP,AutopilotShipUp)local eR=getMagnitudeInDirection(eP,AutopilotShipRight)local eS=-eR*AutopilotDistance*velMag*eM;local eT=-eQ*AutopilotDistance*velMag*eM;eO=AutopilotTargetCoords+-eS*vec3(AutopilotShipRight)+-eT*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(eO)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local eU=true;local eV=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(eV)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then eU=AlignToWorldVector((eO-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then eU=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not eU then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;brakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(newContent,"Autopilot completed, orbit established")brakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;LastApsDiff=apsDiff end elseif AutopilotCruising then if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if eU then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif eU then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local eW=0;local be=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local eX=be-vec3(core.getConstructWorldPos())local eY=vec3(eX):project_on(vec3(core.getConstructWorldOrientationForward())):len()local eZ=vec3(eX):project_on(vec3(core.getConstructWorldOrientationRight())):len()local distance=math.sqrt(eY*eY+eZ*eZ)AlignToWorldVector(eX:normalize())local e_=40;local f0=distance<e_;local f1=100;if onShip then f1=300 end;local f2=utils.clamp((distance-e_)/2,10,f1)pitchInput2=0;local eU=math.abs(yawInput2)<0.1;if eU and velMag<f2 and not f0 then BrakeIsOn=false;eW=-10 else BrakeIsOn=true;eW=0 end;local b1=vec3(core.getConstructWorldOrientationForward())local b2=vec3(core.getConstructWorldOrientationRight())local b0=vec3(core.getWorldVertical())local ak=getPitch(b0,b1,b2)local f3=1.0;if math.abs(eW-ak)>f3 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(eW-ak)local f4=pitchPID:get()pitchInput2=f4 end end;local bu=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then autoRoll=true;if Reentry then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then Reentry=false end end;local a_=core_altitude;local f5=HoldAltitude-a_;local f6=500+velMag;local eW=(utils.smoothstep(f5,-f6,f6)-0.5)*2*MaxPitch;if not AltitudeHold then eW=0 end;local f7=pitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local aT=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(aT)local f8=aT:len()-aT:project_on(bu):len()local f9=(CustomTarget.position-planet.center-planet.radius):len()local M=json.decode(unit.getData()).maxBrake;local bv=velocity.x*bu.x+velocity.y*bu.y+velocity.z*bu.z;local fa=velocity:len()-math.abs(bv)local fb=vec3(core.getWorldAirFrictionAcceleration())if M~=nil then LastMaxBrake=M;brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fa,0,core.getConstructMass(),0,0,M+(fb:len()-fb:project_on(bu):len())*core.getConstructMass())else brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fa,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if f8<=brakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and f8>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=f8 end;pitchInput2=f7;local fc=-1;if BrakeLanding then eW=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)if vBooster then fc=vBooster.distance()elseif hover then fc=hover.distance()end;local bv=velocity.x*bu.x+velocity.y*bu.y+velocity.z*bu.z;if fc>-1 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;gearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)upAmount=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and velocity:normalize():dot(-bu)<0.99 then BrakeIsOn=true elseif bv<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if eW<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;local b1=vec3(core.getConstructWorldOrientationForward())local b2=vec3(core.getConstructWorldOrientationRight())local b0=vec3(core.getWorldVertical())local ak=getPitch(b0,b1,b2)local f3=0.1;if math.abs(eW-ak)>f3 then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(eW-ak)local f4=pitchPID:get()pitchInput2=pitchInput2+f4 end end;LastEccentricity=orbit.eccentricity end end;function script.onFlush()local fd=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fd=math.max(fd,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local fe=pitchInput+pitchInput2+system.getControlDeviceForwardInput()local ff=rollInput+rollInput2+system.getControlDeviceYawInput()local fg=yawInput+yawInput2-system.getControlDeviceLeftRightInput()local fh=brakeInput;local fi=vec3(core.getWorldVertical())local fj=vec3(core.getConstructWorldOrientationUp())local fk=vec3(core.getConstructWorldOrientationForward())local fl=vec3(core.getConstructWorldOrientationRight())local fm=vec3(core.getWorldVelocity())local fn=vec3(core.getWorldVelocity()):normalize()local fo=getRoll(fi,fk,fl)local fp=math.abs(fo)local fq=utils.sign(fo)local fr=vec3(core.getWorldAngularVelocity())local fs=fe*pitchSpeedFactor*fl+ff*rollSpeedFactor*fk+fg*yawSpeedFactor*fj;if fi:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local ft=1.0;if autoRoll==true and fp>ft and ff==0 then local fu=utils.clamp(0,fp-30,fp+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(fu-fo)local fv=rollPID:get()fs=fs+fv*fk end;local fw=20.0;if turnAssist==true and fp>fw and fe==0 and fg==0 then local fx=turnAssistFactor*0.1;local fy=turnAssistFactor*0.025;local fz=(fp-fw)/(180-fw)*180;local fA=0;if fz<90 then fA=fz/90 elseif fz<180 then fA=(180-fz)/90 end;fA=fA*fA;local fB=-fq*fy*(1.0-fA)local fC=fx*fA;fs=fs+fC*fl+fB*fj end end;local fD=1;local fE=0;local fF=1;local fG=fd*(fs-fr)local fH=vec3(core.getWorldAirFrictionAngularAcceleration())fG=fG-fH;Nav:setEngineTorqueCommand('torque',fG,fD,'airfoil','','',fF)local fI=-fh*(brakeSpeedFactor*fm+brakeFlatFactor*fn)Nav:setEngineForceCommand('brake',fI)local fJ=''local fK=vec3()local fL=false;local fM='thrust analog longitudinal'local fN=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if fN==axisCommandType.byThrottle then local fO=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(fM,axisCommandId.longitudinal)Nav:setEngineForceCommand(fM,fO,fD)elseif fN==axisCommandType.byTargetSpeed then local fO=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)fJ=fJ..' , '..fM;fK=fK+fO;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then fL=true end end;local fP='thrust analog lateral'local fQ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if fQ==axisCommandType.byThrottle then local fR=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(fP,axisCommandId.lateral)Nav:setEngineForceCommand(fP,fR,fD)elseif fQ==axisCommandType.byTargetSpeed then local fS=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)fJ=fJ..' , '..fP;fK=fK+fS end;local fT='thrust analog vertical'local fU=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if fU==axisCommandType.byThrottle then local fV=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(fT,axisCommandId.vertical)if upAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(fT,fV,fD,'airfoil','ground','',fF)else Nav:setEngineForceCommand(fT,vec3(),fD)end elseif fU==axisCommandType.byTargetSpeed then local fW=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)fJ=fJ..' , '..fT;fK=fK+fW end;if fK:len()>constants.epsilon then if brakeInput~=0 or fL or math.abs(fn:dot(fk))<0.95 then fJ=fJ..', brake'end;Nav:setEngineForceCommand(fJ,fK,fE,'','','',fF)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif isboosting then unit.setEngineThrust('rocket_engine',1)end end;function script.onUpdate()if not SetupComplete then local _,C=coroutine.resume(beginSetup)if C then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(fX)if fX=="gear"then gearExtended=not gearExtended;if gearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or core_altitude<ReentryAltitude)then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;gearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif ReentryMode and unit.getAtmosphereDensity()<=0 and unit.getClosestPlanetInfluence()>0 and core_altitude>ReentryAltitude then Reentry=true;gearExtended=false;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;msgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif fX=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif fX=="forward"then pitchInput=pitchInput-1 elseif fX=="backward"then pitchInput=pitchInput+1 elseif fX=="left"then rollInput=rollInput-1 elseif fX=="right"then rollInput=rollInput+1 elseif fX=="yawright"then yawInput=yawInput-1 elseif fX=="yawleft"then yawInput=yawInput+1 elseif fX=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif fX=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif fX=="up"then upAmount=upAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif fX=="down"then upAmount=upAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif fX=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;if AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif fX=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;if AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif fX=="option1"then IncrementAutopilotTargetIndex()toggleView=false elseif fX=="option2"then DecrementAutopilotTargetIndex()toggleView=false elseif fX=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;toggleView=false;ToggleWidgets()elseif fX=="option4"then AutopilotToggle()toggleView=false elseif fX=="option5"then ToggleTurnBurn()toggleView=false elseif fX=="option6"then ToggleAltitudeHold()toggleView=false elseif fX=="option7"then saveVariables()toggleView=false elseif fX=="option8"then toggleFollowMode()toggleView=false elseif fX=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;toggleView=false elseif fX=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif fX=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif fX=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif fX=="booster"then isboosting=not isboosting;if isboosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif fX=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif fX=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif fX=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif fX=="antigravity"then if antigrav~=nil then antigrav.toggle()end elseif fX=="warp"then if warpdrive~=nil then if not emergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then msgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")emergencyWarp=false;msgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(fX)if fX=="forward"then pitchInput=pitchInput+1 elseif fX=="backward"then pitchInput=pitchInput-1 elseif fX=="left"then rollInput=rollInput+1 elseif fX=="right"then rollInput=rollInput-1 elseif fX=="yawright"then yawInput=yawInput+1 elseif fX=="yawleft"then yawInput=yawInput-1 elseif fX=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif fX=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif fX=="up"then upAmount=upAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif fX=="down"then upAmount=upAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif fX=="groundaltitudeup"then if AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end elseif fX=="groundaltitudedown"then if AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end elseif fX=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;simulatedX=0;simulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif fX=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif fX=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(fX)if fX=="groundaltitudeup"then if AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif fX=="groundaltitudedown"then if AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif fX=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif fX=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;toggleView=true;function DisplayMessage(newContent,fY)if fY~="empty"then newContent[#newContent+1]=[[<text class="msg" x="50%%" y="310" >]]for fZ in string.gmatch(fY,"([^\n]+)")do newContent[#newContent+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],fZ)end;newContent[#newContent+1]=[[</text>]]end;if msgTimer~=0 then unit.setTimer("msgTick",msgTimer)msgTimer=0 end end;function updateDistance()local H=system.getTime()local velocity=vec3(core.getWorldVelocity())local bb=vec3(velocity):len()local f_=H-lastTravelTime;if bb>1.38889 then bb=bb/1000;local g0=bb*(H-lastTravelTime)totalDistanceTravelled=totalDistanceTravelled+g0;totalDistanceTrip=totalDistanceTrip+g0 end;flightTime=flightTime+f_;totalFlightTime=totalFlightTime+f_;lastTravelTime=H end;function updateMass()local g1=0;for A in pairs(elementsID)do g1=g1+core.getElementMassById(elementsID[A])end;return g1 end;system.print("Starting the HUD...")script.onStart()
        
        
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        freeLookToggle = true --export: Set to false for default free look behavior.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), use 6944.4444 for 25000km/hr
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        circleRad = 99 --export: The size of the artifical horizon circle, set to 0 to remove.
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        AutopilotInterplanetaryThrottle = 100 --export: How much throttle, in percent, you want it to use when autopiloting to another planet
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
