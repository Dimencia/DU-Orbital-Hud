name: ButtonsHud - Dimencia and Archaegeo v5.452 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true)
        BrakeToggleDefault = true --export: (Default: true)
        RemoteFreeze = false --export: (Default: false)
        RemoteHud = false --export: (Default: false)
        brightHud = false --export: (Default: false)
        VanillaRockets = false --export: (Default: false)
        InvertMouse = false --export: (Default: false)
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920)
        ResolutionY = 1080 --export: (Default: 1080) 
        SafeR = 130 --export: (Default: 130)
        SafeG = 224 --export: (Default: 224)
        SafeB = 255 --export: (Default: 255)
        PvPR = 255 --export: (Default: 255)
        PvPG = 0 --export: (Default: 0)
        PvPB = 0 --export: (Default: 0)
        centerX = 960 --export: (Default: 960)
        centerY = 540 --export: (Default: 540)
        throtPosX = 1300 --export: (Default: 1300)
        throtPosY = 540 --export: (Default: 540)
        vSpdMeterX = 1525  --export: (Default: 1525)
        vSpdMeterY = 325 --export: (Default: 325)
        altMeterX = 550  --export: (Default: 550)
        altMeterY = 540 --export: (Default: 540) 
        fuelX = 100 --export: (Default: 100)
        fuelY = 350 --export: (Default: 350)
        circleRad = 400 --export: (Default: 400)
        DeadZone = 50 --export: (Default: 50)
        DisplayOrbit = true --export: (Default: true) 
        OrbitMapSize = 250 --export: (Default: 250)
        OrbitMapX = 75 --export: (Default: 75)
        OrbitMapY = 0 --export: (Default: 0)
        showHud = true --export: (Default: true) 
        ShowOdometer = true --export: (Default: true)
        hideHudOnToggleWidgets = true --export: (Default: true)
        ShiftShowsRemoteButtons = true --export: (Default: true)
        YawStallAngle = 35 --export: (Default: 35)
        PitchStallAngle = 35 --export: (Default: 35)
        speedChangeLarge = 5 --export: (Default: 5)
        speedChangeSmall = 1 --export: (Default: 1)
        brakeLandingRate = 30 --export: (Default: 30)
        MaxPitch = 30 --export: (Default: 30)
        ReentrySpeed = 1050 --export: (Default: 1050)
        AtmoSpeedLimit = 1050 --export: (Default: 1050)
        SpaceSpeedLimit = 30000 --export: (Default: 30000).
        ReentryAltitude = 2500 --export: (Default: 2500)
        AutoTakeoffAltitude = 1000 --export: (Default: 1000)
        TargetHoverHeight = 50 --export: (Default: 50)
        LandingGearGroundHeight = 0 --export: (Default: 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00)
        TargetOrbitRadius = 1.4 --export: (Default: 1.4)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0)
        warmup = 32 --export: (Default: 32)
        MouseYSensitivity = 0.003 --export: (Default: 0.003)
        MouseXSensitivity = 0.003 --export: (Default: 0.003)
        autoRollPreference = false --export: (Default: false)
        autoRollFactor = 2 --export: (Default: 2)
        rollSpeedFactor = 1.5 --export: (Default: 1.5)
        turnAssist = true --export: (Default: true)
        turnAssistFactor = 2 --export: (Default: 2)
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002)
        torqueFactor = 2 --export: (Default: 2)
        pitchSpeedFactor = 0.8 --export: (Default: 0.8)
        yawSpeedFactor = 1 --export: (Default: 1)
        brakeSpeedFactor = 3 --export: (Default: 3)
        brakeFlatFactor = 1 --export: (Default: 1)
        DampingMultiplier = 40 --export: (Default: 40) 
        fuelTankHandlingAtmo = 0 --export: (Default: 0)
        fuelTankHandlingSpace = 0 --export: (Default: 0)
        fuelTankHandlingRocket = 0 --export: (Default: 0)
        ContainerOptimization = 0 --export: (Default: 0)
        FuelTankOptimization = 0 --export: (Default: 0)
        ExtraLongitudeTags = "none" --export: (Default: "none")
        ExtraLateralTags = "none" --export: (Default: "none")
        ExtraVerticalTags = "none" --export: (Default: "none")
        ExternalAGG = false --export: (Default: false)
        UseSatNav = false --export: (Default: false)
        apTickRate = 0.0166667 --export: (Default: 0.0166667)  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667)
        ShouldCheckDamage = true --export: (Default: true)
        CalculateBrakeLandingSpeed = false --export: (Default: false)
        autoRollRollThreshold = 0 --export: (Default: 0)
        AtmoSpeedAssist = true --export: (Default: true)
        ForceAlignment = false --export: (Default: false)
        minRollVelocity = 150 --export: (Default: 150)
        VertTakeOffEngine = false --export: (Default: false)
        DisplayDeadZone = true --export: (Default: true)
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;VertTakeOff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LeftAmount=0;IntoOrbit=false;local a={"userControlScheme","TargetOrbitRadius","apTickRate","freeLookToggle","turnAssist","SafeR","SafeG","SafeB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","AtmoSpeedAssist","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","YawStallAngle","PitchStallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed","ForceAlignment","autoRollRollThreshold","minRollVelocity","VertTakeOffEngine","PvPR","PvPG","PvPB","DisplayDeadZone"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=math.atan;function round(q,r)local s=10^(r or 0)return d(q*s+0.5)/s end;local t=SafeR;local u=SafeB;local v=SafeG;local w=false;local x=0;local y=""local z=0;local A=0;local B=false;local C=0;local D=false;local E=round(ResolutionX/2,0)local F=round(ResolutionY/2,0)local G=false;local H=true;local I=55;local J=false;local K=1;local L=1;local M=false;local N=0;local O=0;local P=0;local Q=0;local R=0;local S=0;local T=0;local U=false;local V=false;local W="empty"local X=5;local Y=5;local Z=false;local a0,a1=0;local a2,a3=0;local a4=nil;local a5=0;local a6=0;local a7=false;local a8=0;local a9=0;local aa=0;local ab=3;local ac=0;local ad=""local ae=""local af=0;local ag=false;local ah=false;local ai=false;local aj=-1;local ak=false;local al=""local am=j()>0;local an=core.getAltitude()local ao=core.getElementIdList()local ap=system.getTime()local aq=nil;local ar=false;local as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]local at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local au={}local av=0;local aw=0;local ax=""local ay=true;local az={}local aA=1;local aB=0.001;local aC=ResolutionX;local aD=ResolutionY;local aE=nil;local aF=nil;local aG=nil;local aH=nil;local aI=false;local aJ=false;local aK=0;local aL=nil;local aM={}local aN={}local aO={}local aP=0;local aQ=false;local aR={}local aS={}local aT=d(1/apTickRate)*2;local aU={}local aV={}local aW={}local aX={}local aY=false;local aZ=16;local a_=0;local b0=nil;local b1=""local b2=nil;local b3=nil;local b4=nil;local b5=nil;local b6=nil;local b7=nil;local b8=nil;local b9=nil;local ba=false;local bb=false;local bc=autoRollPreference;local bd=vec3(core.getWorldVelocity())local be=vec3(bd):len()local bf=LandingGearGroundHeight;local bg=system.getMouseDeltaX()local bh=system.getMouseDeltaY()local bi=false;local bj=system.getTime()local bk=0;local bl=0;local bm=0;local bn=AtmoSpeedLimit;local bo=0;local bp=nil;local bq=0;local br=0;local bs=false;local bt=false;local bu={VectorToTarget=false}local bv=false;local bw=0;local bx=nil;local by=false;local bz=false;local bA=false;local bB=false;local bC=0;function LoadVariables()if dbHud_1 then local bD=dbHud_1.hasKey;if not useTheseSettings then for bE,bF in pairs(a)do if bD(bF)then local bG=f(dbHud_1.getStringValue(bF))if bG~=nil then c(bF.." "..dbHud_1.getStringValue(bF))_G[bF]=bG;aI=true end end end end;coroutine.yield()for bE,bF in pairs(b)do if bD(bF)then local bG=f(dbHud_1.getStringValue(bF))if bG~=nil then c(bF.." "..dbHud_1.getStringValue(bF))_G[bF]=bG;aI=true end end end;if useTheseSettings then W="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"ab=5 elseif aI then W="Loaded Saved Variables (see Lua Chat Tab for list)"else W="No Saved Variables Found - Stand up / leave remote to save settings"end else W="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bH=system.getTime()if LastStartTime+180<bH then LastMaxBrakeInAtmo=0 end;if aI then E=round(ResolutionX/2,0)F=round(ResolutionY/2,0)aC=ResolutionX;aD=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)bc=autoRollPreference end;LastStartTime=bH;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then W="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"ab=5 end;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=an end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;as=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]at=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]bn=AtmoSpeedLimit end;function CalculateFuelVolume(bI,bJ)if bI>bJ then bJ=bI end;if ContainerOptimization>0 then bJ=bJ-bJ*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bJ=bJ-bJ*FuelTankOptimization*0.05 end;return bJ end;function ProcessElements()local bK=fuelX~=0 and fuelY~=0;for bE in pairs(ao)do local type=l(ao[bE])if string.match(type,'^.*Space Engine$')then bB=true;if string.match(tostring(core.getElementTagsById(ao[bE])),'^.*vertical.*$')then local bL=core.getElementRotationById(ao[bE])if bL[4]<0 then if utils.round(-bL[4],0.1)==0.5 then bz=true;system.print("Space Engine Up detected")end else if utils.round(bL[4],0.1)==0.5 then bA=true;system.print("Space Engine Down detected")end end end end;if type=="Landing Gear"then M=true end;if type=="Dynamic Core Unit"then local bM=h(ao[bE])if bM>10000 then aZ=128 elseif bM>1000 then aZ=64 elseif bM>150 then aZ=32 end end;aP=aP+h(ao[bE])if bK and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bM=h(ao[bE])local bN=m(ao[bE])local bI=0;local bO=system.getTime()if type=="Atmospheric Fuel Tank"then local bJ=400;local bP=35.03;if bM>10000 then bJ=51200;bP=5480 elseif bM>1300 then bJ=6400;bP=988.67 elseif bM>150 then bJ=1600;bP=182.67 end;bI=bN-bP;if fuelTankHandlingAtmo>0 then bJ=bJ+bJ*fuelTankHandlingAtmo*0.2 end;bJ=CalculateFuelVolume(bI,bJ)aM[#aM+1]={ao[bE],core.getElementNameById(ao[bE]),bJ,bP,bI,bO}end;if type=="Rocket Fuel Tank"then local bJ=320;local bP=173.42;if bM>65000 then bJ=40000;bP=25740 elseif bM>6000 then bJ=5120;bP=4720 elseif bM>700 then bJ=640;bP=886.72 end;bI=bN-bP;if fuelTankHandlingRocket>0 then bJ=bJ+bJ*fuelTankHandlingRocket*0.1 end;bJ=CalculateFuelVolume(bI,bJ)aO[#aO+1]={ao[bE],core.getElementNameById(ao[bE]),bJ,bP,bI,bO}end;if type=="Space Fuel Tank"then local bJ=2400;local bP=182.67;if bM>10000 then bJ=76800;bP=5480 elseif bM>1300 then bJ=9600;bP=988.67 end;bI=bN-bP;if fuelTankHandlingSpace>0 then bJ=bJ+bJ*fuelTankHandlingSpace*0.2 end;bJ=CalculateFuelVolume(bI,bJ)aN[#aN+1]={ao[bE],core.getElementNameById(ao[bE]),bJ,bP,bI,bO}end end end end;function SetupChecks()if gyro~=nil then aq=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;local bQ=j()if door and(bQ>0 or bQ==0 and an<10000)then for _,bF in pairs(door)do bF.toggle()end end;if switch then for _,bF in pairs(switch)do bF.toggle()end end;if forcefield and(bQ>0 or bQ==0 and an<10000)then for _,bF in pairs(forcefield)do bF.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if M then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bR=AboveGroundLevel()if bR~=-1 or not am and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not M then GearExtended=true end else BrakeIsOn=false end;if bf~=nil then Nav.axisCommandManager:setTargetGroundAltitude(bf)if bf==0 and not M then GearExtended=true;BrakeIsOn=true end else bf=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if am and bR~=-1 then b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;userControlScheme=string.lower(userControlScheme)WasInAtmo=am end;function ConvertResolutionX(bF)if ResolutionX==1920 then return bF else return round(ResolutionX*bF/1920,0)end end;function ConvertResolutionY(bF)if ResolutionY==1080 then return bF else return round(ResolutionY*bF/1080,0)end end;function RefreshLastMaxBrake(bS,bT)if bS==nil then bS=core.g()end;bS=round(bS,5)local bU=j()if bT~=nil and bT or(aL==nil or aL~=bS)then local bd=core.getVelocity()local bV=vec3(bd):len()local bW=f(unit.getData()).maxBrake;if bW~=nil and bW>0 and am then bW=bW/utils.clamp(bV/100,0.1,1)bW=bW/bU;if bU>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bW)/2 else LastMaxBrakeInAtmo=bW end end end;if bW~=nil and bW>0 then LastMaxBrake=bW end;aL=bS end end;function MakeButton(bX,bY,bZ,b_,c0,c1,c2,c3,c4)local c5={enableName=bX,disableName=bY,width=bZ,height=b_,x=c0,y=c1,toggleVar=c2,toggleFunction=c3,drawCondition=c4,hovered=false}table.insert(az,c5)return c5 end;function UpdateAtlasLocationsList()AtlasOrdered={}for bE,bF in pairs(b0[0])do table.insert(AtlasOrdered,{name=bF.name,index=bE})end;local function c6(c7,c8)return c7.name<c8.name end;table.sort(AtlasOrdered,c6)end;function AddLocationsToAtlas()for bE,bF in pairs(SavedLocations)do table.insert(b0[0],bF)end;UpdateAtlasLocationsList()end;function float_eq(c9,ca)if c9==0 then return math.abs(ca)<1e-09 end;if ca==0 then return math.abs(c9)<1e-09 end;return math.abs(c9-ca)<math.max(math.abs(c9),math.abs(ca))*epsilon end;function zeroConvertToMapPosition(cb,cc)local cd=vec3(cc)if cb.bodyId==0 then return setmetatable({latitude=cd.x,longitude=cd.y,altitude=cd.z,bodyId=0,systemId=cb.planetarySystemId},MapPosition)end;local ce=cd-cb.center;local ac=ce:len()local cf=ac-cb.radius;local cg=0;local ch=0;if not float_eq(ac,0)then local ci=math.atan(ce.y,ce.x)ch=ci>=0 and ci or 2*math.pi+ci;cg=math.pi/2-math.acos(ce.z/ac)end;return setmetatable({latitude=math.deg(cg),longitude=math.deg(ch),altitude=cf,bodyId=cb.bodyId,systemId=cb.planetarySystemId},MapPosition)end;function zeroConvertToWorldCoordinates(cj)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ck='::pos{'..q..','..q..','..q..','..q..','..q..'}'local cl,cm,cg,ch,cf=string.match(cj,ck)if cl=="0"and cm=="0"then return vec3(tonumber(cg),tonumber(ch),tonumber(cf))end;ch=math.rad(ch)cg=math.rad(cg)local planet=b0[tonumber(cl)][tonumber(cm)]local cn=math.cos(cg)local co=vec3(cn*math.cos(ch),cn*math.sin(ch),math.sin(cg))return planet.center+(planet.radius+cf)*co end;function AddNewLocationByWaypoint(cp,planet,cj)if dbHud_1 then local cq={}local position=zeroConvertToWorldCoordinates(cj)if planet.name=="Space"then cq={position=position,name=cp,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bQ=false;if planet.hasAtmosphere then bQ=true else bQ=false end;cq={position=position,name=cp,atmosphere=bQ,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=cq;table.insert(b0[0],cq)UpdateAtlasLocationsList()else W="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local cr=planet.name..". "..#SavedLocations;if radar_1 then local cs,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if cs~=nil and cs~=""then cr=cr.." "..radar_1.getConstructName(cs)end end;local cq={}local bQ=false;if planet.hasAtmosphere then bQ=true end;cq={position=position,name=cr,atmosphere=bQ,planetname=planet.name,gravity=planet.gravity,safe=true}SavedLocations[#SavedLocations+1]=cq;table.insert(b0[0],cq)UpdateAtlasLocationsList()W="Location saved as "..cr else W="Databank must be installed to save locations"end end;function UpdatePosition(ct)local cu=-1;local cq;for bE,bF in pairs(SavedLocations)do if bF.name and bF.name==CustomTarget.name then cu=bE;break end end;if cu~=-1 then local cv;if ct~=nil then cq={position=SavedLocations[cu].position,name=ct,atmosphere=SavedLocations[cu].atmosphere,planetname=SavedLocations[cu].planetname,gravity=SavedLocations[cu].gravity}else cq={position=vec3(core.getConstructWorldPos()),name=SavedLocations[cu].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence(),safe=true}end;SavedLocations[cu]=cq;cu=-1;for bE,bF in pairs(b0[0])do if bF.name and bF.name==CustomTarget.name then cu=bE end end;if cu>-1 then b0[0][cu]=cq end;UpdateAtlasLocationsList()W=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else W="Name Not Found"end end;function ClearCurrentPosition()local cu=-1;for bE,bF in pairs(b0[0])do if bF.name and bF.name==CustomTarget.name then cu=bE end end;if cu>-1 then table.remove(b0[0],cu)end;cu=-1;for bE,bF in pairs(SavedLocations)do if bF.name and bF.name==CustomTarget.name then W=bF.name.." saved location cleared"cu=bE;break end end;if cu~=-1 then table.remove(SavedLocations,cu)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(cw)cw[#cw+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and af==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if af==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;af=0 end end;function ToggleWidgets()if ay then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ay=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ay=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not am then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;widgetTargetOrbit=system.createWidget(panelInterplanetary,"value")widgetTargetOrbitText=system.createData('{"label": "Target Altitude", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end;function Contains(cx,cy,c0,c1,bZ,b_)if cx>c0 and cx<c0+bZ and cy>c1 and cy<c1+b_ then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end elseif VertTakeOff then BrakeLanding=true;VertTakeOff=false;AltitudeHold=false else if VertTakeOffEngine then VertTakeOff=true;AltitudeHold=false else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=an+AutoTakeoffAltitude end;by=false;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleIntoOrbit()if IntoOrbit then if by then CancelIntoOrbit=false else CancelIntoOrbit=true end;by=false;IntoOrbit=false;bs=false;bq=nil;br=nil;bx=nil;bC=0 elseif unit.getClosestPlanetInfluence()>0 and j()==0 then IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;bC=0;if bx==nil then bx=planet end else W="Unable to engage orbiting, not near planet"end end;function ToggleLockPitch()if LockPitch==nil then local cz=vec3(core.getConstructWorldOrientationForward())local cA=vec3(core.getConstructWorldOrientationRight())local cB=vec3(core.getWorldVertical())local cC=getPitch(cB,cz,cA)LockPitch=cC;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()local bH=system.getTime()if bH-bl<1.5 then if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.spaceEngineMinAltitude-50 else if unit.getClosestPlanetInfluence()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end end;bl=-1;if AltitudeHold then return end end else bl=bH end;AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;U=false;BrakeLanding=false;Reentry=false;bc=true;LockPitch=nil;by=false;if hoverDetectGround()==-1 then AutoTakeoff=false;if bl>-1 then if unit.getClosestPlanetInfluence()>0 then HoldAltitude=an end end;if not am then by=false;bv=true;IntoOrbit=true;if not ah and Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end end else AutoTakeoff=true;if bl>-1 then HoldAltitude=an+AutoTakeoffAltitude end;GearExtended=false;Nav.control.retractLandingGears()BrakeIsOn=true;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end;if ah then HoldAltitude=100000 end else if IntoOrbit then ToggleIntoOrbit()end;bc=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then U=not U;if U then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;bc=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else W="Follow Mode only works with Remote controller"U=false end end;function ToggleAutopilot()local bH=system.getTime()if bH-bm<1.5 and j()>0 then if not bB then W="No space engines detected, Orbital Hop not supported"return end;if planet.hasAtmosphere then if j()>0 then HoldAltitude=planet.noAtmosphericDensityAltitude+1000 end;bm=-1;if Autopilot or VectorToTarget then return end end else bm=bH end;TargetSet=false;if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not ah then UpdateAutopilotTarget()local cD=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"system.setWaypoint(cD)if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=true;if j()>0 then by=false;if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if an>100000 or an==0 then by=false;Autopilot=true else ag=true;ProgradeIsOn=true;if AltitudeHold then ToggleAltitudeHold()end end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ah=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then local cE=unit.getClosestPlanetInfluence()>0;if CustomTarget==nil and(a4.name==planet.name and cE)then by=false;ToggleIntoOrbit()else Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;U=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;G=false;LockPitch=nil;WaypointSet=false end else ah=true;ToggleAltitudeHold()end else ah=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;G=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=an;TargetSet=false;Reentry=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;U=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;bc=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;VertTakeOff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;if IntoOrbit then ToggleIntoOrbit()end;LockPitch=nil;bc=autoRollPreference;ag=false;ai=false;a8=0 end end;function CheckDamage(cw)local cF=0;ax=""local cG=aP;local cH=0;local cI=0;local cJ=0;local cK=0;local cL=""for bE in pairs(ao)do local bM=0;local cM=0;cM=h(ao[bE])bM=k(ao[bE])cH=cH+bM;if bM<cM then if bM==0 then cJ=cJ+1 else cI=cI+1 end;if aQ and#au==0 then position=vec3(core.getElementPositionById(ao[bE]))local c0=position.x-aZ;local c1=position.y-aZ;local cN=position.z-aZ;table.insert(au,core.spawnArrowSticker(c0,c1,cN+1,"down"))table.insert(au,core.spawnArrowSticker(c0,c1,cN+1,"down"))core.rotateSticker(au[2],0,0,90)table.insert(au,core.spawnArrowSticker(c0+1,c1,cN,"north"))table.insert(au,core.spawnArrowSticker(c0+1,c1,cN,"north"))core.rotateSticker(au[4],90,90,0)table.insert(au,core.spawnArrowSticker(c0-1,c1,cN,"south"))table.insert(au,core.spawnArrowSticker(c0-1,c1,cN,"south"))core.rotateSticker(au[6],90,-90,0)table.insert(au,core.spawnArrowSticker(c0,c1-1,cN,"east"))table.insert(au,core.spawnArrowSticker(c0,c1-1,cN,"east"))core.rotateSticker(au[8],90,0,90)table.insert(au,core.spawnArrowSticker(c0,c1+1,cN,"west"))table.insert(au,core.spawnArrowSticker(c0,c1+1,cN,"west"))core.rotateSticker(au[10],-90,0,90)table.insert(au,ao[bE])end elseif aQ and#au>0 and au[11]==ao[bE]then for cO in pairs(au)do core.deleteSticker(au[cO])end;au={}end end;cF=d(cH/cG*100)if cF<100 then cw[#cw+1]=[[<g class="pbright txt">]]cK=d(cF*2.55)cL=e("rgb(%d,%d,%d)",255-cK,cK,0)if cF<100 then cw[#cw+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cL,cF)if cJ>0 then cw[#cw+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cL,cJ,cI)elseif cI>0 then cw[#cw+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cL,cI)end end;cw[#cw+1]=[[<\g>]]end end;function DrawCursorLine(cw)local cP=d(utils.clamp(ac/(aC/4)*255,0,255))cw[#cw+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a9,aa,d(t+0.5)+cP,d(v+0.5)-cP,d(u+0.5)-cP)end;function getPitch(cQ,cR,c8)local cS=cQ:cross(c8):normalize_inplace()local cC=math.acos(utils.clamp(cS:dot(-cR),-1,1))*constants.rad2deg;if cS:cross(-cR):dot(c8)<0 then cC=-cC end;return cC end;local function cT(cU,cV,cW)cV=cV:project_on_plane(cU)cW=cW:project_on_plane(cU)return p(cV:cross(cW):dot(cU),cV:dot(cW))end;function clearAll()if ak then ak=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;VertTakeOff=false;U=false;G=false;ag=false;ah=false;J=false;bc=autoRollPreference;VectorToTarget=false;TurnBurn=false;aq=false;LockPitch=nil else ak=true end end;function wipeSaveVariables()if not dbHud_1 then W="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"ab=5 else if aJ then for bE,bF in pairs(a)do dbHud_1.setStringValue(bF,g(nil))end;for bE,bF in pairs(b)do if bF~="SavedLocations"then dbHud_1.setStringValue(bF,g(nil))end end;W="Databank wiped. New variables will save after re-enter seat and exit"ab=5;aJ=false;aI=false;a7=true else W="Press ALT-7 again to confirm wipe of ALL data"aJ=true end end end;function CheckButtons()for _,bF in pairs(az)do if bF.hovered then if not bF.drawCondition or bF.drawCondition()then bF.toggleFunction()end;bF.hovered=false end end end;function SetButtonContains()local c0=a9+aC/2;local c1=aa+aD/2;for _,bF in pairs(az)do bF.hovered=Contains(c0,c1,bF.x,bF.y,bF.width,bF.height)end end;function DrawButton(cw,cX,hover,c0,c1,cY,cZ,c_,d0,d1,d2)if type(d1)=="function"then d1=d1()end;if type(d2)=="function"then d2=d2()end;cw[#cw+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",c0,c1,cY,cZ)if cX then cw[#cw+1]=e("%s'",c_)else cw[#cw+1]=d0 end;if hover then cw[#cw+1]=" style='stroke:white; stroke-width:2'"else cw[#cw+1]=" style='stroke:black; stroke-width:1'"end;cw[#cw+1]="></rect>"cw[#cw+1]=e("<text x='%f' y='%f' font-size='24' fill='",c0+cY/2,c1+cZ/2+5)if cX then cw[#cw+1]="black"else cw[#cw+1]="white"end;cw[#cw+1]="' text-anchor='middle' font-family='Montserrat'>"if cX then cw[#cw+1]=e("%s</text>",d1)else cw[#cw+1]=e("%s</text>",d2)end end;function DrawButtons(cw)local d3="rgb(50,50,50)'"local d4="rgb(210,200,200)"local d5=DrawButton;for _,bF in pairs(az)do local bY=bF.disableName;local bX=bF.enableName;if type(bY)=="function"then bY=bY()end;if type(bX)=="function"then bX=bX()end;if not bF.drawCondition or bF.drawCondition()then d5(cw,bF.toggleVar(),bF.hovered,bF.x,bF.y,bF.width,bF.height,d4,d3,bY,bX)end end end;function DrawTank(cw,aY,c0,d6,d7,d8,d9,da)local db=1;local dc=2;local dd=3;local de=4;local df=5;local dg=6;local dh=""local di=0;local dj=fuelY;local dk=fuelY+10;if o()==1 and not RemoteHud then dj=dj-50;dk=dk-50 end;cw[#cw+1]=[[<g class="pdim txtfuel">]]if d7=="ATMO"then dh="atmofueltank"elseif d7=="SPACE"then dh="spacefueltank"else dh="rocketfueltank"end;di=_G[dh.."_size"]if#d8>0 then for i=1,#d8 do local cr=string.sub(d8[i][dc],1,12)local dl=0;for cO=1,di do if d8[i][dc]==f(unit[dh.."_"..cO].getData()).name then dl=cO;break end end;if aY or d9[i]==nil or da[i]==nil then local dm=0;local dn=0;local dp=0;local dq=0;local bO=system.getTime()if dl~=0 then da[i]=f(unit[dh.."_"..dl].getData()).percentage;d9[i]=f(unit[dh.."_"..dl].getData()).timeLeft;if d9[i]=="n/a"then d9[i]=0 end else dp=m(d8[i][db])-d8[i][de]dm=d8[i][dd]da[i]=d(0.5+dp*100/dm)dn=d8[i][df]dq=d8[i][dg]if dn<=dp then d9[i]=0 else d9[i]=d(0.5+dp/((dn-dp)/(bO-dq)))end;d8[i][df]=dp;d8[i][dg]=bO end end;if cr==d6 then cr=e("%s %d",d7,i)end;if dl==0 then cr=cr.." *"end;local dr;if d9[i]==0 then dr="n/a"else dr=FormatTimeString(d9[i])end;if da[i]~=nil then local cK=d(da[i]*2.55)local cL=e("rgb(%d,%d,%d)",255-cK,cK,0)local ds=""if dr~="n/a"and d9[i]<120 or da[i]<5 then if aY then ds=[[class="red"]]end end;cw[#cw+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],c2,dm,dv,ct,c2,dn,cO,dd[i],du)dm=dm+30;dn=dn+30 end end end;cy[#cy+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(bf)bf=vec3(bf)local cE=-math.deg(math.atan(bf.y,bf.z))+180;cE=cE-90;if cE<0 then cE=360+cE end;if cE>180 then cE=-180+cE-180 end;return-cE end;function getRelativeYaw(bf)bf=vec3(bf)local dw=math.deg(math.atan(bf.y,bf.x))-90;if dw<-180 then dw=360+dw end;return dw end;function AlignToWorldVector(dx,dy,dz)if not ao or not bk or al~=-1 or bg<I then local dA=dz;if dA==nil then dA=DampingMultiplier end;if dy==nil then dy=aD end;dx=vec3(dx):normalize()local dB=vec3(core.getConstructWorldOrientationForward())-dx;local dC=-getMagnitudeInDirection(dB,core.getConstructWorldOrientationRight())*aC;local dD=-getMagnitudeInDirection(dB,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dC/2 end;if ay==0 then ay=dD/2 end;if math.abs(dC)<0.1 then P=P-dC*2 else P=P-(dC+(dC-ax)*dA)end;if math.abs(dD)<0.1 then O=O+dD*2 else O=O+dD+(dD-ay)*dA end;ax=dC;ay=dD;if math.abs(dC)<dy and math.abs(dD)<dy then return true end;return false elseif bk and al==-1 then dx=vec3(core.getWorldVelocity())local dA=dz;if dA==nil then dA=DampingMultiplier end;if dy==nil then dy=aD end;dx=vec3(dx):normalize()local dB=vec3(core.getConstructWorldOrientationForward())-dx;local dC=-getMagnitudeInDirection(dB,core.getConstructWorldOrientationRight())*aC;local dD=-getMagnitudeInDirection(dB,core.getConstructWorldOrientationUp())*aC;if ax==0 then ax=dC/2 end;if ay==0 then ay=dD/2 end;if math.abs(dC)<0.1 then P=P-dC*5 else P=P-(dC+(dC-ax)*dA)end;if math.abs(dD)<0.1 then O=O+dD*5 else O=O+dD+(dD-ay)*dA end;ax=dC;ay=dD;if math.abs(dC)<dy and math.abs(dD)<dy then return true end;return false end end;function getAPEnableName()local ct=AutopilotTargetName;if ct==nil then local dE,dF=getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())ct=CustomTarget.name.." "..dE..dF end;if ct==nil then ct="None"end;return"Engage Autopilot: "..ct end;function getAPDisableName()local ct=AutopilotTargetName;if ct==nil then ct=CustomTarget.name end;if ct==nil then ct="None"end;return"Disable Autopilot: "..ct end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ap end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then W="Re-Entry cancelled"Reentry=false;be=autoRollPreference;AltitudeHold=false elseif not planet.hasAtmosphere then W="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"ad=5 elseif not J then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then W="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;be=true;BrakeIsOn=false;W="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;AltitudeHold=true;be=true;BrakeIsOn=false;HoldAltitude=planet.spaceEngineMinAltitude-50;local dG,dH=getDistanceDisplayString(HoldAltitude)W="Beginning Re-entry.  Target speed: "..bp.." Target Altitude: "..dG..dH;cmdCruise(math.floor(bp))end;AutoTakeoff=false end;function SetupButtons()local dI=50;local dJ=260;local dK=MakeButton("Enable Brake Toggle","Disable Brake Toggle",dJ,dI,aE/2-dJ/2,aF/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then W="Brakes in Toggle Mode"else W="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",dJ,dI,aE/2-dJ/2-50-dK.width,aF/2-dI+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",dJ,dI,aE/2-dJ/2+dK.width+50,aF/2-dI+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local dL=MakeButton(getAPEnableName,getAPDisableName,600,60,aE/2-600/2,aF/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,dL.height,dL.x+dL.width+30,dL.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,dL.height,dL.x+dL.width+30,dL.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,dL.height,dL.x-200-30,dL.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)dI=60;dJ=300;local c2=10;local c3=aF/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",dJ,dI,c2,c3,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",dJ,dI,c2+dJ+20,c3,function()return AltitudeHold end,ToggleAltitudeHold)c3=c3+dI+20;MakeButton("Engage Autoland","Disable Autoland",dJ,dI,c2,c3,function()return AutoLanding end,ToggleAutoLanding)local dM,dN,dO;if VertTakeOffEngine then dM="Engage Vertical Takeoff"dN="Disable Vertical Takeoff"dO=VertTakeOff else dM="Engage Auto Takeoff"dN="Disable Auto Takeoff"dO=AutoTakeoff end;MakeButton(dM,dN,dJ,dI,c2+dJ+20,c3,function()return dO end,ToggleAutoTakeoff)c3=c3+dI+20;MakeButton("Show Orbit Display","Hide Orbit Display",dJ,dI,c2,c3,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then W="Orbit Display Enabled"else W="Orbit Display Disabled"end end)MakeButton("Engage Orbiting","Cancel Orbiting",dJ,dI,c2+dJ+20,c3,function()return IntoOrbit end,ToggleIntoOrbit,function()return j()==0 and unit.getClosestPlanetInfluence()>0 end)c3=c3+dI+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",dJ,dI,c2,c3,function()return Reentry end,function()ai=true;ProgradeToggle()end,function()return ap>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",dJ,dI,c2+dJ+20,c3,function()return Reentry end,BeginReentry,function()return ap>ReentryAltitude end)c3=c3+dI+20;MakeButton("Engage Follow Mode","Disable Follow Mode",dJ,dI,c2,c3,function()return U end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",dJ,dI,c2+dJ+20,c3,function()return aS end,function()aS=not aS;if aS then W="Repair Arrows Enabled"else W="Repair Arrows Diabled"end end,function()return o()==1 end)c3=c3+dI+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",dJ,dI,c2,c3,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;c3=c3+dI+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,dJ*2,dI,c2,c3,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local dP=Nav.axisCommandManager:getAxisCommandType(0)local dQ="TRAVEL"if dP==1 then dQ="CRUISE"end;if Autopilot then dQ="AUTOPILOT"end;return dQ end;function UpdateHud(cy)local ch=ap;local bf=core.getVelocity()local bX=vec3(bf):len()local cD=vec3(core.getWorldVertical())local cB=vec3(core.getConstructWorldOrientationForward())local cC=vec3(core.getConstructWorldOrientationRight())local dR=vec3(core.getConstructWorldOrientationUp())local dS=getRoll(cD,cB,cC)local dT=dS/180*math.pi;local dU=math.cos(dT)local dV=math.sin(dT)local cE=getPitch(cD,cB,cC*dU+dR*dV)local dW=dS;local dX=cE;local dY=j()local dZ=d(unit.getThrottle())local d_=bX*3.6;local e0=unit.getAxisCommandValue(0)local e1=ConvertResolutionX(1770)local e2=ConvertResolutionY(310)if AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then e0=z;dZ=z*100 end;local dQ=GetFlightStyle()local e3="ROLL"local cH=unit.getClosestPlanetInfluence()>0;if dZ==nil then dZ=0 end;if not cH then if bX>5 then cE=getRelativePitch(bf)dS=getRelativeYaw(bf)else cE=0;dS=0 end;e3="YAW"end;if x>50000 and not ao then local e4;if x>200000 then e4=round(x/200000,2).." su"else e4=round(x/1000,1).." km"end;cy[#cy+1]=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">PvP Boundary: %s</text>]],e1,e2,e4)end;cy[#cy+1]=ag;cy[#cy+1]=az;cy[#cy+1]=af;if b1%aV==0 then a_=true end;if fuelX~=0 and fuelY~=0 then DrawTank(cy,a_,fuelX,"Atmospheric ","ATMO",aO,aY,aZ)DrawTank(cy,a_,fuelX+100,"Space fuel t","SPACE",aP,aW,aX)DrawTank(cy,a_,fuelX+200,"Rocket fuel ","ROCKET",aQ,aT,aU)end;if a_ then a_=false;b1=0 end;b1=b1+1;DrawVerticalSpeed(cy,ch)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cH then DrawRollLines(cy,centerX,centerY,dW,e3,cH)DrawArtificialHorizon(cy,dX,dW,centerX,centerY,cH,d(getRelativeYaw(bf)),bX)else DrawRollLines(cy,centerX,centerY,dS,e3,cH)DrawArtificialHorizon(cy,cE,dS,centerX,centerY,cH,d(dS),bX)end;DrawAltitudeDisplay(cy,ch,cH)DrawPrograde(cy,bf,bX,centerX,centerY)end end;DrawThrottle(cy,dQ,dZ,e0)DrawSpeed(cy,d_)DrawWarnings(cy)DisplayOrbitScreen(cy)if screen_2 then local cl=vec3(core.getConstructWorldPos())local c2=960+cl.x/b4;local c3=450+cl.y/b5;screen_2.moveContent(b6,(c2-80)/19.2,(c3-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(cy)if not w then t=PvPR;v=PvPG;u=PvPB else t=SafeR;v=SafeG;u=SafeB end;au=[[rgb(]]..d(t+0.5)..","..d(v+0.5)..","..d(u+0.5)..[[)]]av=[[rgb(]]..d(t*0.9+0.5)..","..d(v*0.9+0.5)..","..d(u*0.9+0.5)..[[)]]local e5=au;local e6=av;local e7=au;local e8=av;if IsInFreeLook()and not brightHud then e5=[[rgb(]]..d(t*0.4+0.5)..","..d(v*0.4+0.5)..","..d(u*0.3+0.5)..[[)]]e6=[[rgb(]]..d(t*0.3+0.5)..","..d(v*0.3+0.5)..","..d(u*0.2+0.5)..[[)]]end;cy[#cy+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],e5,e5,e7,e7,e6,e6,e8,e8,ResolutionX,ResolutionY)end;function HUDEpilogue(cy)cy[#cy+1]="</svg>"end;function DrawSpeed(cy,d_)local e9=throtPosY-10;local ea=throtPosX+10;cy[#cy+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then e9=75 end;cy[#cy+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],ea,e9,d(d_))end;function DrawOdometer(cy,a7,TotalDistanceTravelled,dQ,a8,dY)local eb=ConvertResolutionX(1240)local ec=ConvertResolutionY(55)local ed=ec+10;local dY=j()local bU=core.g()local ee=0;local ef=0;local eg=0;RefreshLastMaxBrake(bU)if ao then eg=LastMaxBrakeInAtmo else eg=LastMaxBrake end;maxThrust=Nav:maxForceForward()aM=n()if not ShowOdometer then return end;local eh=vec3(core.getWorldAcceleration()):len()/9.80665;if bU>0.1 then ef=aM*bU;ee=maxThrust/bU end;cy[#cy+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then eb=ConvertResolutionX(1120)ec=ConvertResolutionY(55)ed=ec+10 elseif ao then local ei=ConvertResolutionX(770)cy[#cy+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],ei,ec,ei,ed,dY)end;cy[#cy+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],eb,ec,eb,ed,bU/9.80665,eb,ec+20,eb,ed+20,eh)cy[#cy+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then cy[#cy+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),a7,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(a8),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aM/1000,ConvertResolutionX(1240),ConvertResolutionY(10),eg/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),dQ)if bU>0.1 then cy[#cy+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ee/1000,ConvertResolutionX(1240),ConvertResolutionY(20),ef/1000)else cy[#cy+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else cy[#cy+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),dQ)end;cy[#cy+1]="</g>"end;function DrawThrottle(cy,dQ,dZ,e0)dZ=math.floor(dZ+0.5)local dm=throtPosY+10;local dn=throtPosY+20;if o()==1 and not RemoteHud then dm=55;dn=65 end;local ej="CRUISE"local unit="km/h"local ek=e0;if dQ=="TRAVEL"or dQ=="AUTOPILOT"then ej="THROT"unit="%"ek=dZ;local el="dim"if dZ<0 then el="red"end;cy[#cy+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %.0f)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],el,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dZ),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;cy[#cy+1]=e([[
                <g class="pbright txtstart">
                        <text x="%s" y="%s">%s</text>
                        <text x="%s" y="%s">%.0f %s</text>
                </g>
            </g>]],throtPosX+10,dm,ej,throtPosX+10,dn,ek,unit)if ao and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and B then dZ=math.floor(C*100+0.5)local el="red"if dZ<0 then el="red"end;cy[#cy+1]=e([[<g class="%s">
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g></g>]],el,1-math.abs(dZ),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)cy[#cy+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%s" y="%s">%s</text>
                                <text x="%s" y="%s">%d %s</text>
                        </g>]],throtPosX+10,dm+40,"LIMIT",throtPosX+10,dn+40,dZ,"%")end;if ao and AtmoSpeedAssist or Reentry then cy[#cy+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dm-40,"LIMIT: ",bp.." km/h")elseif not ao and Autopilot then cy[#cy+1]=e([[
                    <g class="dim txtstart">
                        <text x="%s" y="%s">%s %s</text>
                    </g>
                ]],throtPosX+10,dm-40,"LIMIT: ",math.floor(MaxGameVelocity*3.6+0.5).." km/h")end end;function DrawVerticalSpeed(cy,ch)if ch<200000 and not ao or ch and ao then local em=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local en=0;if math.abs(em)>1 then en=45*math.log(math.abs(em),10)if em<0 then en=-en end end;cy[#cy+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(em),d(en))end end;function getHeading(cU)local eo=-vec3(core.getWorldVertical())cU=cU-cU:project_on(eo)local ep=vec3(0,0,1)ep=ep-ep:project_on(eo)local eq=ep:cross(eo)local en=ep:angle_between(cU)*constants.rad2deg;if cU:dot(eq)<0 then en=360-en end;return en end;function DrawRollLines(cy,centerX,centerY,dW,e3,cH)local er=circleRad;local es=20;es=d(es)local et=d(dW)if cH then for i=-45,45,5 do local eu=i;cy[#cy+1]=e([[<g transform="rotate(%f,%d,%d)">]],eu,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;cy[#cy+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+er+es-len,centerX,centerY+er+es)end;cy[#cy+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+er+es-35,e3,centerX,centerY+er+es-25,et)cy[#cy+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dW,centerX,centerY)cy[#cy+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+er+es-20,centerX+5,centerY+er+es-20,centerX,centerY+er+es-15)cy[#cy+1]="</g>"end;local dw=et;if cH then dw=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local ev=20;local ew=d(dw)local ex=0;local ey=centerY+er+es+20;local ez=centerX;if e3~="YAW"then ey=ConvertResolutionY(130)ez=ConvertResolutionX(960)end;local eA=[[<path class="txttick line" d="]]for i=d(ew-(ev+10)-ew%5+0.5),d(ew+ev+10+ew%5+0.5),5 do local c2=ez+-i*5+dw*5;if i%10==0 then ex=10;local q=i;if q==360 then q=0 elseif q>360 then q=q-360 elseif q<0 then q=q+360 end;cy[#cy+1]=e([[
                            <text x="%f" y="%f">%d</text>]],c2+5,ey-12,q)elseif i%5==0 then ex=5 end;if ex==10 then eA=e([[%s M %f %f v %d]],eA,c2,ey-5,ex)else eA=e([[%s M %f %f v %d]],eA,c2,ey-2.5,ex)end end;cy[#cy+1]=eA..[["/>]]cy[#cy+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],ez-5,ey+10,ez+5,ey+10,ez,ey+5)if cH then e3="HDG"end;cy[#cy+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],ez,ey+25,ew,ez,ey+35,e3)end;function DrawArtificialHorizon(cy,dX,dW,centerX,centerY,cH,eB,bX)local er=circleRad;local eC=d(er*3/5)if er>0 then local eD=d(dX)local len=0;local eA=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*dW,centerX,centerY)if not ao then eA=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;cy[#cy+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],er-1,centerX,centerY)cy[#cy+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(eD-30-eD%5+0.5),d(eD+30+eD%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local c3=centerY+-i*5+dX*5;if len==30 then eA=e([[%s M %d %f h %d]],eA,centerX-eC-len,c3,len)if ao then cy[#cy+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dW,centerX,centerY,centerX-eC+10,c3,i)cy[#cy+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*dW,centerX,centerY,centerX+eC-10,c3,i)if i==0 or i==180 or i==-180 then cy[#cy+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dW,centerX,centerY,centerX-eC+20,c3,eC*2-40)end else cy[#cy+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-eC+10,c3,i)cy[#cy+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+eC-10,c3,i)end;eA=e([[%s M %d %f h %d]],eA,centerX+eC,c3,len)else eA=e([[%s M %d %f h %d]],eA,centerX-eC-len,c3,len)eA=e([[%s M %d %f h %d]],eA,centerX+eC,c3,len)end end;cy[#cy+1]=eA..[["/>]]local eE="PITCH"if not cH then eE="REL PITCH"end;if dX>90 and not ao then dX=90-(dX-90)elseif dX<-90 and not ao then dX=-90-(dX+90)end;if er>200 then if ao then if bX>I then cy[#cy+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,eB)end;cy[#cy+1]=e([[<g transform="rotate(%f,%d,%d)">]],-dW,centerX,centerY)else cy[#cy+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;cy[#cy+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-eC+25,centerY-5,centerX-eC+20,centerY,centerX-eC+25,centerY+5,centerX-eC+50,centerY+4,eD)cy[#cy+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+eC-25,centerY-5,centerX+eC-20,centerY,centerX+eC-25,centerY+5,centerX+eC-30,centerY+4,eD)cy[#cy+1]="</g>"end;local eF=d(er/3)cy[#cy+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-eF,centerY,er-eF)if not ao and cH then cy[#cy+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*dW,centerX,centerY,centerX-eC+10,centerY,eC*2-20)end;cy[#cy+1]="</g>"if er<200 then if ao and bX>I then cy[#cy+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-er,eE,centerX,centerY-er+10,eD,centerX,centerY-15,"Yaw",centerX,centerY+20,eB)else cy[#cy+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-er,eE,centerX,centerY-er+15,eD)end end end end;function DrawAltitudeDisplay(cy,ch,cH)local eG=altMeterX;local eH=altMeterY;local eI=78;local eJ=19;local eK=AboveGroundLevel()if eK~=-1 then table.insert(cy,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],eG+eI,eH+eJ+20,eK))end;if cH and(ch<200000 and not ao or ch and ao)then table.insert(cy,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],eG-1,eH-4,eI+2,eJ+6,eG+1,eH-1,eI-4,eJ))local cw=0;local eL=1;local eM=0;local eN=ch<0;local eO=9;if eN then eO=0 end;local ch=math.abs(ch)while cw<6 do local eP=11;local eQ=16;local eR=9;local eS=14;local dv="altsm"if cw>2 then eQ=eQ+3;eP=eP+2;eS=eS+2;eR=eR-6;dv="altbig"end;if eN then dv=dv.." red"end;local eT=ch/eL%10;local eU=d(eT)local eV=d((eU+1)%10)local eW=eM;if cw==0 then eW=eT-eU;if eN then eW=1-eW end end;if eN and(cw==0 or eM~=0)then local eX=eV;eV=eU;eU=eX end;local eY=eQ*(eW-1)local eZ=eY+eQ;local c2=eG+eR+(6-cw)*eP;local c3=eH+eS;table.insert(cy,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],dv,c2,c3+eY,eV,c2,c3+eZ,eU))cw=cw+1;eL=eL*10;if eU==eO then eM=eW else eM=0 end end;table.insert(cy,[[</g></g>]])end end;function DrawPrograde(cy,bf,bX,centerX,centerY)if bX>5 and not ao or bX>I then local er=circleRad;local e_=20;local f0=20;local f1=vec3(bf)local f2=getRelativePitch(f1)local f3=getRelativeYaw(f1)local f4=14;local f5=f4/2;local f6=-f3/f0*er;local f7=f2/e_*er;local c2=centerX+f6;local c3=centerY+f7;local ae=math.sqrt(f6^2+f7^2)local f8=[[<circle
                cx="]]..c2 ..[["
                cy="]]..c3 ..[["
                r="]]..f5/f4 ..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..c2 ..[["
                cy="]]..c3 ..[["
                r="]]..f5 ..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..c2-f4 ..[[,]]..c3 ..[[ h ]]..f5 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c2+f5 ..[[,]]..c3 ..[[ h ]]..f5 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..c2 ..[[,]]..c3-f4 ..[[ v ]]..f5 ..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if ae<er then cy[#cy+1]=f8 else local en=math.atan(f7,f6)local f9=4;local fa=centerX+er*math.cos(en)local fb=centerY+er*math.sin(en)cy[#cy+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',en*180/math.pi,fa,fb,fa-f9,fb-f9/2,f9*2,f9,fa+f9,fb-f9,f9,f9,-f9,f9)end;if not ao then f2=getRelativePitch(-f1)f3=getRelativeYaw(-f1)f6=-f3/f0*er;f7=f2/e_*er;c2=centerX+f6;c3=centerY+f7;ae=math.sqrt(f6^2+f7^2)if ae<er then local fc=[[<circle
                        cx="]]..c2 ..[["
                        cy="]]..c3 ..[["
                        r="]]..f5 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..c2 ..[[,]]..c3-f4 ..[[ v ]]..f5 ..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..c2 ..[[,]]..c3 ..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..c2 ..[[,]]..c3 ..[[)" />
                     <path
                        d="M ]]..c2-f5 ..[[,]]..c3 ..[[ h ]]..f4 ..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..c2 ..[[,]]..c3 ..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..c0 ..[[,]]..c1 ..[[)"/>]]cw[#cw+1]=f9 end end end end;function DrawWarnings(cw)cw[#cw+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)cw[#cw+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then cw[#cw+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))cw[#cw+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))cw[#cw+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local fa=ConvertResolutionX(960)local fb=ConvertResolutionY(860)local fc=ConvertResolutionY(880)local fd=ConvertResolutionY(900)local fe=ConvertResolutionY(960)local ff=ConvertResolutionY(200)local fg=ConvertResolutionY(150)local fh=ConvertResolutionY(960)if o()==1 and not RemoteHud then fb=ConvertResolutionY(135)fc=ConvertResolutionY(155)fd=ConvertResolutionY(175)ff=ConvertResolutionY(115)fg=ConvertResolutionY(95)end;if BrakeIsOn then cw[#cw+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],fa,fb)elseif A>0 then cw[#cw+1]=e([[<text x="%d" y="%d" style="opacity:%s">Auto-Brake Engaged</text>]],fa,fb,A)end;if am and bi and hoverDetectGround()==-1 then cw[#cw+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],fa,ff+50)end;if aq then cw[#cw+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],fa,fh)end;if GearExtended then if M then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],fa,fc)else cw[#cw+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],fa,fc)end;local dB,dC=getDistanceDisplayString(Nav:getTargetGroundAltitude())cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],fa,fd,dB..dC)end;if Z then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],fa,fe+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(an-antigrav.getBaseAltitude())<501 then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fa,ff+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else cw[#cw+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],fa,ff+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],fa,ff+20,AutopilotStatus)elseif LockPitch~=nil then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],fa,ff+20,d(LockPitch))elseif U then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],fa,ff+20)elseif Reentry then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Re-entry in Progress</text>]],fa,ff+20)end;local fi,fj,fk=b6:getPlanetarySystem(0):castIntersections(vec3(core.getConstructWorldPos()),bd:normalize(),function(fl)if fl.noAtmosphericDensityAltitude>0 then return fl.radius+fl.noAtmosphericDensityAltitude else return fl.radius+fl.surfaceMaxAltitude*1.5 end end)local fm=fj;if fk~=nil and fj~=nil then fm=math.min(fk,fj)end;if AltitudeHold then if AutoTakeoff and not IntoOrbit then local dB,dC=getDistanceDisplayString(HoldAltitude)cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],fa,ff,dB..dC)if BrakeIsOn then cw[#cw+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],fa,ff+50)end else local dB,dC=getDistanceDisplayString2(HoldAltitude)cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],fa,ff,dB..dC)end end;if VertTakeOff and(antigrav~=nil and antigrav)then if j()>0.1 then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Beginning ascent</text>]],fa,ff)elseif j()<0.09 and j()>0.05 then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Aligning trajectory</text>]],fa,ff)elseif j()<0.05 then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">Leaving atmosphere</text>]],fa,ff)end end;if IntoOrbit then if bp~=nil then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fa,ff,bp)end end;if BrakeLanding then if StrongBrakes then cw[#cw+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],fa,ff)else cw[#cw+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],fa,ff)end end;if ProgradeIsOn then cw[#cw+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],fa,ff)end;if RetrogradeIsOn then cw[#cw+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],fa,ff)end;if TurnBurn then cw[#cw+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],fa,fg)elseif fm~=nil and j()==0 then local dB,dC=getDistanceDisplayString(fm)local travelTime=b7.computeTravelTime(be,0,fm)local fn="Collision"if fi.noAtmosphericDensityAltitude>0 then fn="Atmosphere"end;cw[#cw+1]=e([[<text class="crit" x="%d" y="%d">%s %s In %s (%s)</text>]],fa,fg,fi.name,fn,FormatTimeString(travelTime),dB..dC)end;if VectorToTarget and not IntoOrbit then cw[#cw+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],fa,ff+30,VectorStatus)end;cw[#cw+1]="</g>"end;function DisplayOrbitScreen(cw)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local fo=OrbitMapX;local fp=OrbitMapY;local fq=OrbitMapSize;local fr=4;fp=fp+fr;local fs=15;local c0=fo+fq+fo/2+fr;local c1=fp+fq/2+5+fr;local ft,fu,fv,fw;ft=fq/4;fw=0;cw[#cw+1]=[[<g class="pbright txtorb txtmid">]]cw[#cw+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',fq+fo*2,fq+fp,fr,fr)if orbit.periapsis~=nil and orbit.apoapsis~=nil then fv=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ft*2)fu=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/fv*(1-orbit.eccentricity)fw=ft-orbit.periapsis.altitude/fv-planet.radius/fv;local fx=""if orbit.periapsis.altitude<=0 then fx='redout'end;cw[#cw+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],fx,fo+fq/2+fw+fr,fp+fq/2+fr,ft,fu)cw[#cw+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',fo+fq/2+fr,fp+fq/2+fr,planet.radius/fv)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then cw[#cw+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c0-35,c1-5,fo+fq/2+ft+fw,c1-5)cw[#cw+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],c0,c1)c1=c1+fs;local dB,dC=getDistanceDisplayString(orbit.apoapsis.altitude)cw[#cw+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,dB..dC)c1=c1+fs;cw[#cw+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,FormatTimeString(orbit.timeToApoapsis))c1=c1+fs;cw[#cw+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,getSpeedDisplayString(orbit.apoapsis.speed))end;c1=fp+fq/2+5+fr;c0=fo-fo/2+10+fr;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then cw[#cw+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],c0+35,c1-5,fo+fq/2-ft+fw,c1-5)cw[#cw+1]=e([[<text x="%f" y="%f">Periapsis</text>]],c0,c1)c1=c1+fs;local dB,dC=getDistanceDisplayString(orbit.periapsis.altitude)cw[#cw+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,dB..dC)c1=c1+fs;cw[#cw+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,FormatTimeString(orbit.timeToPeriapsis))c1=c1+fs;cw[#cw+1]=e([[<text x="%f" y="%f">%s</text>]],c0,c1,getSpeedDisplayString(orbit.periapsis.speed))end;cw[#cw+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],fo+fq/2+fr,20+fr,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local fy=orbit.timeToApoapsis/orbit.period*2*math.pi;local fz=ft*math.cos(fy)local fA=fu*math.sin(fy)cw[#cw+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',fo+fq/2+fz+fw+fr,fp+fq/2+fA+fr)end;cw[#cw+1]=[[</g>]]end end;function getDistanceDisplayString(ac)local fB=ac>100000;local bG,dC=""if fB then bG,dC=round(ac/1000/200,1),"SU"elseif ac<1000 then bG,dC=round(ac,1),"m"else bG,dC=round(ac/1000,1),"Km"end;return bG,dC end;function getDistanceDisplayString2(ac)local fB=ac>100000;local bG,dC=""if fB then bG,dC=round(ac/1000/200,2)," SU"elseif ac<1000 then bG,dC=round(ac,2)," M"else bG,dC=round(ac/1000,2)," KM"end;return bG,dC end;function getSpeedDisplayString(bV)return d(round(bV*3.6,0)+0.5).." km/h"end;function FormatTimeString(fC)local fD=0;local fE=0;local fF=0;if fC<60 then fC=d(fC)elseif fC<3600 then fD=d(fC/60)fC=d(fC%60)elseif fC<86400 then fE=d(fC/3600)fD=d(fC%3600/60)else fF=d(fC/86400)fE=d(fC%86400/3600)end;if fF>0 then return fF.."d "..fE.."h "elseif fE>0 then return fE.."h "..fD.."m "elseif fD>0 then return fD.."m "..fC.."s"elseif fC>0 then return fC.."s"else return"0s"end end;function getMagnitudeInDirection(du,fG)du=vec3(du)fG=vec3(fG):normalize()local bG=du*fG;return bG.x+bG.y+bG.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"a4=nil;CustomTarget=nil;return true end;local fH=AtlasOrdered[AutopilotTargetIndex].index;local fI=b0[0][fH]if fI.center then AutopilotTargetName=fI.name;a4=b6[0][fH]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;if system.updateData(widgetTargetOrbitText,widgetTargetOrbit)~=1 then system.addDataToWidget(widgetTargetOrbitText,widgetTargetOrbit)end end;CustomTarget=nil else CustomTarget=fI;for _,bF in pairs(b6[0])do if bF.name==CustomTarget.planetname then a4=bF;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(a4.center)else AutopilotTargetCoords=CustomTarget.position end;if a4.planetname~="Space"then if a4.hasAtmosphere then AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.noAtmosphericDensityAltitude)else AutopilotTargetOrbit=math.floor(a4.radius*(TargetOrbitRadius-1)+a4.surfaceMaxAltitude)end else AutopilotTargetOrbit=1000 end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fH=AtlasOrdered[AutopilotTargetIndex].index;local fI=b0[0][fH]if fI.name=="Space"then IncrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;if AutopilotTargetIndex==0 then UpdateAutopilotTarget()else local fH=AtlasOrdered[AutopilotTargetIndex].index;local fI=b0[0][fH]if fI.name=="Space"then DecrementAutopilotTargetIndex()else UpdateAutopilotTarget()end end end;function GetAutopilotMaxMass()local fJ=LastMaxBrakeInAtmo/a4:getGravity(a4.center+vec3(0,0,1)*a4.radius):len()return fJ end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(a4.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local bd=core.getWorldVelocity()local bV=vec3(bd):len()local fK=unit.getThrottle()/100;if AtmoSpeedAssist then fK=z end;local fL,fM=b7.computeDistanceAndTime(vec3(bd):len(),MaxGameVelocity,n(),Nav:maxForceForward()*fK,warmup,0)local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fN;if not TurnBurn and bV>0 then _,fN=GetAutopilotBrakeDistanceAndTime(bV)else _,fN=GetAutopilotTBBrakeDistanceAndTime(bV)end;local fO=0;local fP=0;if AutopilotCruising or not Autopilot and bV>5 then fP=b7.computeTravelTime(bV,0,AutopilotDistance)elseif a0+fL<AutopilotDistance then fO=AutopilotDistance-(a0+fL)fP=b7.computeTravelTime(8333.0556,0,fO)else local fQ=(AutopilotDistance-a0)/fL;fL=AutopilotDistance-a0;fM=fM*fQ end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fP elseif AutopilotBraking then return fN elseif AutopilotCruising then return fP+fN else return fM+a1+fP end end;function GetAutopilotBrakeDistanceAndTime(bV)if not am then RefreshLastMaxBrake()return b7.computeDistanceAndTime(bV,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return b7.computeDistanceAndTime(bV,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bV)RefreshLastMaxBrake()return b7.computeDistanceAndTime(bV,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local fR=-1;local fS=-1;if vBooster then fR=vBooster.distance()end;if hover then fS=hover.distance()end;if fR~=-1 and fS~=-1 then if fR<fS then return fR else return fS end elseif fR~=-1 then return fR elseif fS~=-1 then return fS else return-1 end end;function AboveGroundLevel()local fT=-1;local fU=hoverDetectGround()if telemeter_1 then fT=telemeter_1.getDistance()end;if fU~=-1 and fT~=-1 then if fU<fT then return fU else return fT end elseif fU~=-1 then return fU else return fT end end;function tablelength(fV)local fW=0;for _ in pairs(fV)do fW=fW+1 end;return fW end;function BeginProfile(fX)ProfileTimeStart=system.getTime()end;function EndProfile(fX)local fY=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fY;ProfileCount=ProfileCount+1;if fY>ProfileTimeMax then ProfileTimeMax=fY end;if fY<ProfileTimeMin then ProfileTimeMin=fY end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fZ=ProfileTimeSum;local f_=ProfileTimeSum/ProfileCount;local g0=ProfileTimeMin;local g1=ProfileTimeMax;local g2=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fZ,f_,g0,g1,g2))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local g3=radar_1.getEntries()local g4=radar_1.getData()local g5=ConvertResolutionX(1770)local g6=ConvertResolutionY(330)if#g3>0 then local g7=g4:find('identifiedConstructs":%[%]')if g7==nil and perisPanelID==nil then af=1;ToggleRadarPanel()end;if g7~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;ad=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],g5,g6,#g3)local g8={}for bE,bF in pairs(g3)do if radar_1.hasMatchingTransponder(bF)==1 then table.insert(g8,bF)end end;if#g8>0 then local c1=ConvertResolutionY(15)local c0=ConvertResolutionX(1370)ad=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],ad,c0,c1)for bE,bF in pairs(g8)do c1=c1+20;ad=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],ad,c0,c1,radar_1.getConstructName(bF))end end else local g9;g9=g4:find('worksInEnvironment":false')if g9 then ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],g5,g6)else ad=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],g5,g6)end;if radarPanelID~=nil then af=0;ToggleRadarPanel()end end end end;function DisplayMessage(cw,dB)if dB~="empty"then cw[#cw+1]=[[<text class="msg" x="50%%" y="310" >]]for ga in string.gmatch(dB,"([^\n]+)")do cw[#cw+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],ga)end;cw[#cw+1]=[[</text>]]end;if ab~=0 then unit.setTimer("msgTick",ab)ab=0 end end;function updateDistance()local bO=system.getTime()local bd=vec3(core.getWorldVelocity())local dX=vec3(bd):len()local gb=bO-ap;if dX>1.38889 then dX=dX/1000;local gc=dX*(bO-ap)TotalDistanceTravelled=TotalDistanceTravelled+gc;a5=a5+gc end;a6=a6+gb;TotalFlightTime=TotalFlightTime+gb;ap=bO end;function composeAxisAccelerationFromTargetSpeedV(gd,ge)local gf=vec3()local gg=vec3()if gd==axisCommandId.longitudinal then gf=vec3(core.getConstructOrientationForward())gg=vec3(core.getConstructWorldOrientationForward())elseif gd==axisCommandId.vertical then gf=vec3(core.getConstructOrientationUp())gg=vec3(core.getConstructWorldOrientationUp())elseif gd==axisCommandId.lateral then gf=vec3(core.getConstructOrientationRight())gg=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gh=vec3(core.getWorldGravity())local gi=gh:dot(gg)local gj=vec3(core.getWorldAirFrictionAcceleration())local gk=gj:dot(gg)local gl=vec3(core.getVelocity())local gm=gl:dot(gf)local gn=ge*constants.kph2m;if targetSpeedPID2==nil then targetSpeedPID2=pid.new(10,0,10.0)end;targetSpeedPID2:inject(gn-gm)local go=targetSpeedPID2:get()local gp=(go-gk-gi)*gg;return gp end;function composeAxisAccelerationFromTargetSpeed(gd,ge)local gf=vec3()local gg=vec3()if gd==axisCommandId.longitudinal then gf=vec3(core.getConstructOrientationForward())gg=vec3(core.getConstructWorldOrientationForward())elseif gd==axisCommandId.vertical then gf=vec3(core.getConstructOrientationUp())gg=vec3(core.getConstructWorldOrientationUp())elseif gd==axisCommandId.lateral then gf=vec3(core.getConstructOrientationRight())gg=vec3(core.getConstructWorldOrientationRight())else return vec3()end;local gh=vec3(core.getWorldGravity())local gi=gh:dot(gg)local gj=vec3(core.getWorldAirFrictionAcceleration())local gk=gj:dot(gg)local gl=vec3(core.getVelocity())local gm=gl:dot(gf)local gn=ge*constants.kph2m;if targetSpeedPID==nil then targetSpeedPID=pid.new(10,0,10.0)end;targetSpeedPID:inject(gn-gm)local go=targetSpeedPID:get()local gp=(go-gk-gi)*gg;return gp end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0,noAtmosphericDensityAltitude=0,surfaceMaxAltitude=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()b0=Atlas()for bE,bF in pairs(b0[0])do if aE==nil or bF.center.x<aE then aE=bF.center.x end;if aF==nil or bF.center.x>aF then aF=bF.center.x end;if aG==nil or bF.center.y<aG then aG=bF.center.y end;if aH==nil or bF.center.y>aH then aH=bF.center.y end end;b1=""local gq=1.1*(aF-aE)/1920;local gr=1.4*(aH-aG)/1080;for bE,bF in pairs(b0[0])do local c0=960+bF.center.x/gq;local c1=540+bF.center.y/gr;b1=b1 ..'<circle cx="'..c0 ..'" cy="'..c1 ..'" r="'..bF.radius/gq*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bF.name,"Moon")and not string.match(bF.name,"Sanctuary")and not string.match(bF.name,"Space")then b1=b1 .."<text x='"..c0 .."' y='"..c1+bF.radius/gq*30+20 .."' font-size='28' fill="..as.." text-anchor='middle' font-family='Montserrat'>"..bF.name.."</text>"end end;local cj=vec3(core.getConstructWorldPos())local c0=960+cj.x/gq;local c1=540+cj.y/gr;b1=b1 ..'<circle cx="'..c0 ..'" cy="'..c1 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='"..c0 .."' y='"..c1-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"b1=b1 ..[[</svg>]]b2=gq;b3=gr;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..b1)local cj=vec3(core.getConstructWorldPos())local c0=960+cj.x/gq;local c1=540+cj.y/gr;b1='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'b1=b1 .."<text x='80' y='105' font-size='18' fill="..as.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"b4=screen_2.addContent((c0-80)/19.20,(c1-80)/10.80,b1)end end;function PlanetRef()local function gs(gt)return type(gt)=='number'end;local function gu(gt)return type(tonumber(gt))=='number'end;local function gv(gw)return type(gw)=='table'end;local function gx(gy)return type(gy)=='string'end;local function gz(bF)return gv(bF)and gs(bF.x and bF.y and bF.z)end;local function gA(gB)return gv(gB)and gs(gB.latitude and gB.longitude and gB.altitude and gB.bodyId and gB.systemId)end;local gC=math.pi/180;local gD=180/math.pi;local epsilon=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ck='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local gE=utils.clamp;local function float_eq(c9,ca)if c9==0 then return math.abs(ca)<1e-09 end;if ca==0 then return math.abs(c9)<1e-09 end;return math.abs(c9-ca)<math.max(math.abs(c9),math.abs(ca))*epsilon end;local function gF(gt)local bG=string.gsub(string.reverse(e('%.4f',gt)),'^0*%.?','')return bG==''and'0'or string.reverse(bG)end;local function gG(gH)if gz(gH)then return e('{x=%.3f,y=%.3f,z=%.3f}',gH.x,gH.y,gH.z)end;if gv(gH)and not getmetatable(gH)then local gI={}local gJ=next(gH)if type(gJ)=='nil'or gJ==1 then gI=gH else for bE,bF in pairs(gH)do local eh=gG(bF)if type(bE)=='number'then table.insert(gI,e('[%s]=%s',bE,eh))else table.insert(gI,e('%s=%s',bE,eh))end end end;return e('{%s}',table.concat(gI,','))end;if gx(gH)then return e("'%s'",gH:gsub("'",[[\']]))end;return tostring(gH)end;local gK={}gK.__index=gK;gK.__tostring=function(gH,gL)local gM={}for bE in pairs(gH)do table.insert(gM,bE)end;table.sort(gM)local gI={}for _,bE in ipairs(gM)do local eh=gG(gH[bE])if type(bE)=='number'then table.insert(gI,e('[%s]=%s',bE,eh))else table.insert(gI,e('%s=%s',bE,eh))end end;if gL then return e('%s%s',gL,table.concat(gI,',\n'..gL))end;return e('{%s}',table.concat(gI,','))end;gK.__eq=function(gN,gO)return gN.planetarySystemId==gO.planetarySystemId and gN.bodyId==gO.bodyId and float_eq(gN.radius,gO.radius)and float_eq(gN.center.x,gO.center.x)and float_eq(gN.center.y,gO.center.y)and float_eq(gN.center.z,gO.center.z)and float_eq(gN.GM,gO.GM)end;local function gP(cl,cm,gQ,cc,gR)assert(gu(cl),'Argument 1 (planetarySystemId) must be a number:'..type(cl))assert(gu(cm),'Argument 2 (bodyId) must be a number:'..type(cm))assert(gu(gQ),'Argument 3 (radius) must be a number:'..type(gQ))assert(gv(cc),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cc))assert(gu(gR),'Argument 5 (GM) must be a number:'..type(gR))return setmetatable({planetarySystemId=tonumber(cl),bodyId=tonumber(cm),radius=tonumber(gQ),center=vec3(cc),GM=tonumber(gR)},gK)end;local MapPosition={}MapPosition.__index=MapPosition;MapPosition.__tostring=function(gS)return e('::pos{%d,%d,%s,%s,%s}',gS.systemId,gS.bodyId,gF(gS.latitude*gD),gF(gS.longitude*gD),gF(gS.altitude))end;MapPosition.__eq=function(gN,gO)return gN.bodyId==gO.bodyId and gN.systemId==gO.systemId and float_eq(gN.latitude,gO.latitude)and float_eq(gN.altitude,gO.altitude)and(float_eq(gN.longitude,gO.longitude)or float_eq(gN.latitude,math.pi/2)or float_eq(gN.latitude,-math.pi/2))end;local function gT(gU,cm,cg,ch,cf)local cl=gU;if gx(gU)and not ch and not cf and not cm and not cg then cl,cm,cg,ch,cf=string.match(gU,ck)assert(cl,'Argument 1 (position string) is malformed.')else assert(gu(cl),'Argument 1 (systemId) must be a number:'..type(cl))assert(gu(cm),'Argument 2 (bodyId) must be a number:'..type(cm))assert(gu(cg),'Argument 3 (latitude) must be in degrees:'..type(cg))assert(gu(ch),'Argument 4 (longitude) must be in degrees:'..type(ch))assert(gu(cf),'Argument 5 (altitude) must be in meters:'..type(cf))end;cl=tonumber(cl)cm=tonumber(cm)cg=tonumber(cg)ch=tonumber(ch)cf=tonumber(cf)if cm==0 then return setmetatable({latitude=cg,longitude=ch,altitude=cf,bodyId=cm,systemId=cl},MapPosition)end;return setmetatable({latitude=gC*gE(cg,-90,90),longitude=gC*(ch%360),altitude=cf,bodyId=cm,systemId=cl},MapPosition)end;local gV={}gV.__index=gV;gV.__tostring=function(gH,gL)local gW=gL and gL..'  'local gX={}local gM={}for bE in pairs(gH)do table.insert(gM,bE)end;table.sort(gM)for _,gY in ipairs(gM)do bdy=gH[gY]local gZ=gK.__tostring(bdy,gW)if gL then table.insert(gX,e('[%s]={\n%s\n%s}',gY,gZ,gL))else table.insert(gX,e('  [%s]=%s',gY,gZ))end end;if gL then return e('\n%s%s%s',gL,table.concat(gX,',\n'..gL),gL)end;return e('{\n%s\n}',table.concat(gX,',\n'))end;local function g_(h0)local b0={}local pid;for _,bF in pairs(h0)do local cs=bF.planetarySystemId;if type(cs)~='number'then error('Invalid planetary system ID: '..tostring(cs))elseif pid and cs~=pid then error('Mismatch planetary system IDs: '..cs..' and '..pid)end;local h1=bF.bodyId;if type(h1)~='number'then error('Invalid body ID: '..tostring(h1))elseif b0[h1]then error('Duplicate body ID: '..tostring(h1))end;setmetatable(bF.center,getmetatable(vec3.unit_x))b0[h1]=setmetatable(bF,gK)pid=cs end;return setmetatable(b0,gV)end;b5={}local function h2(h0)return setmetatable({galaxyAtlas=h0 or{}},b5)end;b5.__index=function(gw,i)if type(i)=='number'then local system=gw.galaxyAtlas[i]return g_(system)end;return rawget(b5,i)end;b5.__pairs=function(gH)return function(gw,bE)local h3,nv=next(gw,bE)return h3,nv and g_(nv)end,gH.galaxyAtlas,nil end;b5.__tostring=function(gH)local h4={}for _,h5 in pairs(gH or{})do local h6=h5:getPlanetarySystemId()local h7=gV.__tostring(h5,'    ')table.insert(h4,e('  [%s]={%s\n  }',h6,h7))end;return e('{\n%s\n}\n',table.concat(h4,',\n'))end;b5.BodyParameters=gP;b5.MapPosition=gT;b5.PlanetarySystem=g_;function b5.createBodyParameters(h8,cm,h9,ha,hb,hc,hd)assert(gu(h8),'Argument 1 (planetarySystemId) must be a number:'..type(h8))assert(gu(cm),'Argument 2 (bodyId) must be a number:'..type(cm))assert(gu(h9),'Argument 3 (surfaceArea) must be a number:'..type(h9))assert(gv(ha),'Argument 4 (aPosition) must be an array or vec3:'..type(ha))assert(gv(hb),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(hb))assert(gu(hc),'Argument 6 (altitude) must be in meters:'..type(hc))assert(gu(hd),'Argument 7 (gravityAtPosition) must be number:'..type(hd))local gQ=math.sqrt(h9/4/math.pi)local ac=gQ+hc;local he=vec3(ha)+ac*vec3(hb)local gR=hd*ac*ac;return gP(h8,cm,gQ,he,gR)end;b5.isMapPosition=gA;function b5:getPlanetarySystem(gU)if i==nil then i=0 end;if nv==nil then nv=0 end;local h8=gU;if gA(gU)then h8=gU.systemId end;if type(h8)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=gV then system=g_(system)end;return system end end end;function gV:castIntersections(hf,fG,hg,hh)local hg=hg or function(fl)return 1.05*fl.radius end;local hi={}if hh then for _,i in ipairs(hh)do hi[i]=self[i]end else hh={}for bE,fl in pairs(self)do table.insert(hh,bE)hi[bE]=fl end end;local function hj(hk,hl)local hm=hi[hk].center-hf;local hn=hi[hl].center-hf;return hm:len()<hn:len()end;table.sort(hh,hj)local ho=fG:normalize()for i,cs in ipairs(hh)do local fl=hi[cs]local hp=fl.center-hf;local gQ=hg(fl)local hq=hp:dot(ho)local hr=hq^2-(hp:len2()-gQ^2)if hr>=0 then local hs=math.sqrt(hr)local fj=hq+hs;local fk=hq-hs;if fk>0 then return fl,fj,fk elseif fj>0 then return fl,fj,nil end end end;return nil,nil,nil end;function gV:closestBody(ht)assert(type(ht)=='table','Invalid coordinates.')local hu,fl;local hv=vec3(ht)for _,hw in pairs(self)do local hx=(hw.center-hv):len2()if(not fl or hx<hu)and hw.name~="Space"then fl=hw;hu=hx end end;return fl end;function gV:convertToBodyIdAndWorldCoordinates(gU)local hy=gU;if gx(gU)then hy=gT(gU)end;if hy.bodyId==0 then return 0,vec3(hy.latitude,hy.longitude,hy.altitude)end;local hw=self:getBodyParameters(hy)if hw then return hy.bodyId,hw:convertToWorldCoordinates(hy)end end;function gV:getBodyParameters(gU)local cm=gU;if gA(gU)then cm=gU.bodyId end;assert(gu(cm),'Argument 1 (bodyId) must be a number:'..type(cm))return self[cm]end;function gV:getPlanetarySystemId()local _,bF=next(self)return bF and bF.planetarySystemId end;function gK:convertToMapPosition(cc)assert(gv(cc),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cc))local cd=vec3(cc)if self.bodyId==0 then return setmetatable({latitude=cd.x,longitude=cd.y,altitude=cd.z,bodyId=0,systemId=self.planetarySystemId},MapPosition)end;local ce=cd-self.center;local ac=ce:len()local cf=ac-self.radius;local cg=0;local ch=0;if not float_eq(ac,0)then local ci=math.atan(ce.y,ce.x)ch=ci>=0 and ci or 2*math.pi+ci;cg=math.pi/2-math.acos(ce.z/ac)end;return setmetatable({latitude=cg,longitude=ch,altitude=cf,bodyId=self.bodyId,systemId=self.planetarySystemId},MapPosition)end;function gK:convertToWorldCoordinates(gU)local hy=gx(gU)and gT(gU)or gU;if hy.bodyId==0 then return vec3(hy.latitude,hy.longitude,hy.altitude)end;assert(gA(hy),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(hy.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(hy.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local cn=math.cos(hy.latitude)return self.center+(self.radius+hy.altitude)*vec3(cn*math.cos(hy.longitude),cn*math.sin(hy.longitude),math.sin(hy.latitude))end;function gK:getAltitude(cc)return(vec3(cc)-self.center):len()-self.radius end;function gK:getDistance(cc)return(vec3(cc)-self.center):len()end;function gK:getGravity(cc)local hz=self.center-vec3(cc)local hA=hz:len2()return self.GM/hA*hz/math.sqrt(hA)end;return setmetatable(b5,{__call=function(_,...)return h2(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function gx(gy)return type(gy)=='string'end;local function gv(gw)return type(gw)=='table'end;local function float_eq(c9,ca)if c9==0 then return math.abs(ca)<1e-09 end;if ca==0 then return math.abs(c9)<1e-09 end;return math.abs(c9-ca)<math.max(math.abs(c9),math.abs(ca))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cf)assert(self.body)local ac=cf+self.body.radius;if not float_eq(ac,0)then local orbit=math.sqrt(self.body.GM/ac)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(gU,bd)assert(self.body)assert(gv(gU)or gx(gU))assert(gv(bd))local cj=(gx(gU)or PlanetRef.isMapPosition(gU))and self.body:convertToWorldCoordinates(gU)or vec3(gU)local bF=vec3(bd)local hB=cj-self.body.center;local hn=bF:len2()local hC=hB:len()local hD=self.body.GM;local hE=((hn-hD/hC)*hB-hB:dot(bF)*bF)/hD;local c9=hD/(2*hD/hC-hn)local hF=hE:len()local ho=hE:normalize()local hG=c9*(1-hF)local hH=c9*(1+hF)local hI=hG*ho+self.body.center;local hJ=hF<=1 and-hH*ho+self.body.center or nil;local hK=math.sqrt(c9*hD*(1-hF*hF))local hL=hJ and 2*math.pi*math.sqrt(c9^3/hD)local hM=math.acos(hE:dot(hB)/(hF*hC))if hB:dot(bF)<0 then hM=-(hM-2*math.pi)end;local hN=math.acos((math.cos(hM)+hF)/(1+hF*math.cos(hM)))local hO=hN;if hO<0 then hO=hO+2*math.pi end;local hP=hO-hF*math.sin(hO)local hQ=0;local hR=0;local hS=0;if hL~=nil then hQ=hP/(2*math.pi/hL)hR=hL-hQ;hS=hR+hL/2;if hM-math.pi>0 then hR=hQ;hS=hR+hL/2 end;if hS>hL then hS=hS-hL end end;return{periapsis={position=hI,speed=hK/hG,circularOrbitSpeed=math.sqrt(hD/hG),altitude=hG-self.body.radius},apoapsis=hJ and{position=hJ,speed=hK/hH,circularOrbitSpeed=math.sqrt(hD/hH),altitude=hH-self.body.radius},currentVelocity=bF,currentPosition=cj,eccentricity=hF,period=hL,eccentricAnomaly=hN,meanAnomaly=hP,timeToPeriapsis=hR,timeToApoapsis=hS}end;local function hT(hU)local hw=PlanetRef.BodyParameters(hU.planetarySystemId,hU.bodyId,hU.radius,hU.center,hU.GM)return setmetatable({body=hw},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return hT(...)end})end;function Kinematics()local b7={}local hV=30000000/3600;local hW=hV*hV;local hX=100;local function hY(bF)return 1/math.sqrt(1-bF*bF/hW)end;function b7.computeAccelerationTime(hZ,h_,i0)local i1=hV*math.asin(hZ/hV)return(hV*math.asin(i0/hV)-i1)/h_ end;function b7.computeDistanceAndTime(hZ,i0,i2,i3,i4,i5)i4=i4 or 0;i5=i5 or 0;local i6=hZ<=i0;local i7=i3*(i6 and 1 or-1)/i2;local i8=-i5/i2;local i9=i7+i8;if i6 and i9<=0 or not i6 and i9>=0 then return-1,-1 end;local ia,ib=0,0;if i7~=0 and i4>0 then local i1=math.asin(hZ/hV)local ic=math.pi*(i7/2+i8)local id=i7*i4;local ie=hV*math.pi;local bF=function(gw)local cY=(ic*gw-id*math.sin(math.pi*gw/2/i4)+ie*i1)/ie;local ig=math.tan(cY)return hV*ig/math.sqrt(ig*ig+1)end;local ih=i6 and function(gy)return gy>=i0 end or function(gy)return gy<=i0 end;ib=2*i4;if ih(bF(ib))then local ii=0;while math.abs(ib-ii)>0.5 do local gw=(ib+ii)/2;if ih(bF(gw))then ib=gw else ii=gw end end end;local ij=hZ;local ik=ib/hX;for il=1,hX do local bV=bF(il*ik)ia=ia+(bV+ij)*ik/2;ij=bV end;if ib<2*i4 then return ia,ib end;hZ=ij end;local i1=hV*math.asin(hZ/hV)local bH=(hV*math.asin(i0/hV)-i1)/i9;local im=hW*math.cos(i1/hV)/i9;local ac=im-hW*math.cos((i9*bH+i1)/hV)/i9;return ac+ia,bH+ib end;function b7.computeTravelTime(hZ,h_,ac)if ac==0 then return 0 end;if h_>0 then local i1=hV*math.asin(hZ/hV)local im=hW*math.cos(i1/hV)/h_;return(hV*math.acos(h_*(im-ac)/hW)-i1)/h_ end;if hZ==0 then return-1 end;assert(hZ>0,'Acceleration and initial speed are both zero.')return ac/hZ end;function b7.lorentz(bF)return hY(bF)end;return b7 end;function safeZone(io)local gQ=500000;local ip,iq,ir=math.huge;local is=false;local it=vec3({13771471,7435803,-128971})local iu=18000000;ip=vec3(io):dist(it)if ip<iu then return true,math.abs(ip-iu),"Safe Zone",0 end;iq=vec3(io):dist(vec3(planet.center))if iq<gQ then is=true end;if math.abs(iq-gQ)<math.abs(ip-iu)then return is,math.abs(iq-gQ),planet.name,planet.bodyId else return is,math.abs(ip-iu),"Safe Zone",0 end end;function cmdThrottle(eh,iv)if iv==nil then iv=false end;if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byThrottle and not iv then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,eh)z=round(eh*100,0)end;function cmdCruise(eh,iv)if Nav.axisCommandManager:getAxisCommandType(0)~=axisCommandType.byTargetSpeed and not iv then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,eh)end;function SaveDataBank(iw)if dbHud_1 then if not a7 then for bE,bF in pairs(b)do dbHud_1.setStringValue(bF,g(_G[bF]))if iw and dbHud_2 then dbHud_2.setStringValue(bF,g(_G[bF]))end end;for bE,bF in pairs(a)do dbHud_1.setStringValue(bF,g(_G[bF]))if iw and dbHud_2 then dbHud_2.setStringValue(bF,g(_G[bF]))end end;c("Saved Variables to Datacore")if iw and dbHud_2 then W="Databank copied.  Remove copy when ready."end end end end;function script.onStart()VERSION_NUMBER=5.450;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()b5=PlanetRef()b6=b5(Atlas())b7=Kinematics()b9=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")coroutine.yield()unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bQ=j()if door and(bQ>0 or bQ==0 and an<10000)then for _,bF in pairs(door)do bF.toggle()end end;if switch then for _,bF in pairs(switch)do bF.toggle()end end;if forcefield and(bQ>0 or bQ==0 and an<10000)then for _,bF in pairs(forcefield)do bF.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(ix)if ix=="tenthSecond"then if j()>0 and not WasInAtmo then if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and AtmoSpeedAssist and(AltitudeHold or Reentry)then z=1;Nav.control.cancelCurrentControlMasterMode()D=false end end;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local iy=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if iy and not Autopilot then ac=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else ac=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)a2,a3=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)a2,a3=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local dB,dC=getDistanceDisplayString(ac)system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..dB..'", "unit":"'..dC..'"}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')dB,dC=getDistanceDisplayString(a0)system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..dB..'", "unit":"'..dC..'"}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(a1)..'", "unit":""}')dB,dC=getDistanceDisplayString(a2)system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..dB..'", "unit":"'..dC..'"}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(a3)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f",planetMaxMass/1000)..'", "unit":" Tons"}')dB,dC=getDistanceDisplayString(AutopilotTargetOrbit)system.updateData(widgetTargetOrbitText,'{"label": "Target Orbit", "value": "'..e("%.2f",dB)..'", "unit":"'..dC..'"}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ix=="oneSecond"then ak=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local cw={}local dN=GetFlightStyle()DrawOdometer(cw,a5,TotalDistanceTravelled,dN,a6)if ShouldCheckDamage then CheckDamage(cw)end;ae=table.concat(cw,"")collectgarbage("collect")elseif ix=="fiveSecond"then al=dbHud_1.getStringValue("SPBAutopilotTargetName")if al~=nil and al~=""and al~="SatNavNotChanged"then local bG=json.decode(dbHud_1.getStringValue("SavedLocations"))if bG~=nil then _G["SavedLocations"]=bG;local cu=-1;local cq;for bE,bF in pairs(SavedLocations)do if bF.name and bF.name=="SatNav Location"then cu=bE;break end end;if cu~=-1 then cq=SavedLocations[cu]cu=-1;for bE,bF in pairs(b0[0])do if bF.name and bF.name=="SatNav Location"then cu=bE;break end end;if cu>-1 then b0[0][cu]=cq end;UpdateAtlasLocationsList()W=cq.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==al then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ix=="msgTick"then local cw={}DisplayMessage(cw,"empty")W="empty"unit.stopTimer("msgTick")ab=3 elseif ix=="animateTick"then bb=true;ba=false;a9=0;aa=0;unit.stopTimer("animateTick")elseif ix=="hudTick"then local cw={}HUDPrologue(cw)if showHud then UpdateHud(cw)else DisplayOrbitScreen(cw)DrawWarnings(cw)end;HUDEpilogue(cw)cw[#cw+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if W~="empty"then DisplayMessage(cw,W)end;if o()==0 and userControlScheme=="virtual joystick"then if DisplayDeadZone then DrawDeadZone(cw)end end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(cw)if screen_1.getMouseState()==1 then CheckButtons()end;cw[#cw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)elseif system.isViewLocked()==0 then if o()==1 and V then SetButtonContains()DrawButtons(cw)if not ba and not bb then local iz=table.concat(cw,"")cw={}cw[#cw+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cw[#cw+1]=b1;cw[#cw+1]=iz;cw[#cw+1]="</body>"ba=true;cw[#cw+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(cw,"")system.setScreen(content)elseif bb then local iz=table.concat(cw,"")cw={}cw[#cw+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)cw[#cw+1]=b1;cw[#cw+1]=iz;cw[#cw+1]="</body>"end;if not ba then cw[#cw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end else CheckButtons()end else if not V and o()==0 then CheckButtons()if ac>DeadZone then if DisplayDeadZone then DrawCursorLine(cw)end end else SetButtonContains()DrawButtons(cw)end;cw[#cw+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],E,F,a9,aa)end;cw[#cw+1]=[[</svg></body>]]content=table.concat(cw,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ix=="apTick"then am=j()>0;local bH=system.getTime()local iA=bH-bj;bj=bH;local cz=vec3(core.getConstructWorldOrientationForward())local cA=vec3(core.getConstructWorldOrientationRight())local iB=vec3(core.getConstructWorldOrientationUp())local cB=vec3(core.getWorldVertical())local iC=vec3(core.getConstructWorldPos())local dP=getRoll(cB,cz,cA)local dQ=dP/180*math.pi;local dR=math.cos(dQ)local dS=math.sin(dQ)local cC=getPitch(cB,cz,cA)local iD=getPitch(cB,cz,cA*dR+iB*dS)local iE=-math.deg(cT(iB,bd,cz))local iF=math.deg(cT(cA,bd,cz))bi=am and iE<-YawStallAngle or iE>YawStallAngle or iF<-PitchStallAngle or iF>PitchStallAngle;bg=system.getMouseDeltaX()bh=system.getMouseDeltaY()if InvertMouse and not V then bh=-bh end;P=0;T=0;O=0;bd=vec3(core.getWorldVelocity())be=vec3(bd):len()sys=b6[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b9(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),bd)aj=hoverDetectGround()local bS=planet:getGravity(core.getConstructWorldPos()):len()*n()bk=0;b8=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]w,x,y,_=safeZone(iC)if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a9=screen_1.getMouseX()*ResolutionX;aa=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and V then if not ba then a9=a9+bg;aa=aa+bh end else a9=0;aa=0 end else a9=a9+bg;aa=aa+bh;ac=math.sqrt(a9*a9+aa*aa)if not V and o()==0 then if userControlScheme=="virtual joystick"then if a9>0 and a9>DeadZone then P=P-(a9-DeadZone)*MouseXSensitivity elseif a9<0 and a9<DeadZone*-1 then P=P-(a9+DeadZone)*MouseXSensitivity else P=0 end;if aa>0 and aa>DeadZone then O=O-(aa-DeadZone)*MouseYSensitivity elseif aa<0 and aa<DeadZone*-1 then O=O-(aa+DeadZone)*MouseYSensitivity else O=0 end elseif userControlScheme=="mouse"then a9=0;aa=0;O=(-utils.smoothstep(bh,-100,100)+0.5)*2*K;P=(-utils.smoothstep(bg,-100,100)+0.5)*2*L else a9=0;aa=0 end end end;local iG=be>8334;if be>SpaceSpeedLimit/3.6 and not am and not Autopilot and not iG then W="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0 end;if not iG and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=iG;if am and j()>0.09 then if be>bn/3.6 and not AtmoSpeedAssist and not ar then BrakeIsOn=true;ar=true elseif not AtmoSpeedAssist and ar then if be<bn/3.6 then BrakeIsOn=false;ar=false end end end;if BrakeIsOn then S=1 else S=0 end;an=core.getAltitude()if an==0 then an=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if ag then BrakeIsOn=false;local iH=false;if CustomTarget~=nil then iH=AlignToWorldVector(CustomTarget.position-iC,0.01)else iH=AlignToWorldVector(vec3(bd),0.01)end;bc=true;if iH and(math.abs(dP)<2 or math.abs(iD)>85)and be>=bn/3.6-1 then BrakeIsOn=false;ProgradeIsOn=false;J=true;ag=false;ai=true;Autopilot=false;BeginReentry()elseif am and AtmoSpeedAssist then cmdThrottle(1)else cmdCruise(math.floor(bn))z=0 end elseif be>I then AlignToWorldVector(vec3(bd),0.01)end end;if RetrogradeIsOn then if am then RetrogradeIsOn=false elseif be>I then AlignToWorldVector(-vec3(bd))end end;if not ProgradeIsOn and ag then if j()==0 then J=true;BeginReentry()ag=false;ai=true else ag=false;ToggleAutopilot()end end;local el=vec3(core.getWorldVertical())*-1;local ej=bd.x*el.x+bd.y*el.y+bd.z*el.z;if ai and CustomTarget~=nil and(an<HoldAltitude+200 and an>HoldAltitude-200)and be*3.6>bn-100 and math.abs(ej)<20 and j()>=0.1 and(CustomTarget.position-iC):len()>2000+an then ToggleAutopilot()ai=false end;if VertTakeOff then bc=true;if ej<-30 then W="Unable to achieve lift. Safety Landing."a8=0;bc=autoRollPreference;VertTakeOff=false;BrakeLanding=true elseif antigrav and not ExternalAGG and antigrav.getState()==1 then if an<antigrav.getBaseAltitude()-100 then bo=0;a8=15;BrakeIsOn=false elseif ej>0 then BrakeIsOn=true;a8=0 elseif ej<-30 then BrakeIsOn=true;a8=15 elseif an>=antigrav.getBaseAltitude()then BrakeIsOn=true;a8=0;VertTakeOff=false;W="Takeoff complete. Singularity engaged"end else if j()>0.08 then bo=0;BrakeIsOn=false;a8=20 elseif j()<0.08 and j()>0 then BrakeIsOn=false;if bA then bo=0;a8=20 else a8=0;bo=36;cmdCruise(3500)end else bc=autoRollPreference;IntoOrbit=true;by=false;CancelIntoOrbit=false;bs=false;bq=nil;br=nil;if bx==nil then bx=planet end;VertTakeOff=false end end;if bo~=nil then if vTpitchPID==nil then vTpitchPID=pid.new(2*0.01,0,2*0.1)end;local iI=utils.clamp(bo-iD,-PitchStallAngle*0.85,PitchStallAngle*0.85)vTpitchPID:inject(iI)local iJ=utils.clamp(vTpitchPID:get(),-1,1)O=iJ end end;if IntoOrbit then if bx==nil then if VectorToTarget then bx=a4 else bx=planet end end;if not bv then if bx.hasAtmosphere then bw=math.floor(bx.radius*(TargetOrbitRadius-1)+bx.noAtmosphericDensityAltitude)else bw=math.floor(bx.radius*(TargetOrbitRadius-1)+bx.surfaceMaxAltitude)end;bv=true end;if AltitudeHold or VectorToTarget then if not ah then bw=round(HoldAltitude,1)bs=true;AltitudeHold=false end;if VectorToTarget then bu.VectorToTarget=VectorToTarget;VectorToTarget=false end end;local iK,iL=b9(bx):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-bx.center):len()-bx.radius)local iM=dP;if orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.eccentricity<1 and an>bw*0.9 and an<bw*1.4 then if orbit.apoapsis~=nil then if orbit.periapsis.altitude>=bw*0.99 and orbit.apoapsis.altitude>=bw*0.99 and orbit.periapsis.altitude<orbit.apoapsis.altitude and orbit.periapsis.altitude*1.05>=orbit.apoapsis.altitude or by then if by then BrakeIsOn=false;z=0;cmdThrottle(0)by=true;bq=0;if bu.VectorToTarget then local dy=CustomTarget.position-iC;local a0,_=b7.computeDistanceAndTime(be,bn/3.6,n(),0,0,LastMaxBrake)if bd:normalize():dot(dy:normalize())>0.5 and dy:len()>15000+a0+an then bp="Orbiting to Target"else W="Orbit complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;J=true;ai=true;BeginReentry()bu.VectorToTarget=false end end;if not bu.VectorToTarget then bp=nil;bt=false;bv=false;bx=nil;bc=autoRollPreference;if not ai then W="Orbit established"end;bu.VectorToTarget=false;CancelIntoOrbit=false;IntoOrbit=false;bs=false;bq=nil;br=nil;bx=nil;by=false;bC=0 end else bC=bC+1;if bC>=2 then by=true end end else bp="Adjusting Orbit - OrbitHeight: "..bw.."m"bt=true;cmdCruise(iL*3.6+1)if VSpdPID==nil then VSpdPID=pid.new(0.5,0,10*0.1)end;local iN=ej;local iO=an-bw;local iP=math.abs(iO)if ej<10 and math.abs(iD)<10 and iP<100 then iN=ej*2 end;if iN<10 and math.abs(iD)<10 and iP<100 then iN=iN*2 end;if iN<5 and math.abs(iD)<5 and iP<100 then iN=iN*4 end;VSpdPID:inject(iN)bq=utils.clamp(-VSpdPID:get(),-90,90)if OrbitAltPID==nil then OrbitAltPID=pid.new(0.1,0,5*0.1)end;OrbitAltPID:inject(iO)bq=utils.clamp(bq-utils.clamp(OrbitAltPID:get(),-15,15),-90,90)end end else local iQ=2.75;local iR=math.abs(utils.round(iK*iQ))local iS=iR%50;if iS>0 then iR=iR-iS+50 end;BrakeIsOn=false;if not bs then local iT=false;local iU=false;if an<bw then bp="Aligning to orbital path - OrbitHeight: "..bw.."m"else bp="Aligning to orbital point - OrbitHeight: "..bw.."m"end;bq=0;br=0;if iD<=bq+1 and iD>=bq-1 then iT=true else iT=false end;if iM<=br+1 and iM>=br-1 then iU=true else iU=false end;if iT and iU then bq=nil;br=nil;bs=true end else if an<bw*0.8 then bp="Escaping planet gravity - OrbitHeight: "..bw.."m"bq=utils.map(ej,200,0,-15,80)elseif an>=bw*0.8 and an<bw*1.15 then bp="Approaching orbital corridor - OrbitHeight: "..bw.."m"iR=iR*0.75;bq=utils.map(ej,100,-100,-15,65)elseif an>=bw*1.15 and an<bw*1.5 then bp="Approaching orbital corridor - OrbitHeight: "..bw.."m"iR=iR*0.75;if ej<0 or bt then bq=utils.map(an,bw*1.5,bw*1.01,-30,0)else bq=utils.map(an,bw*0.99,bw*1.5,0,30)end elseif an>bw*1.5 then bp="Reentering orbital corridor - OrbitHeight: "..bw.."m"bq=utils.map(ej,100,-100,-65,0)iR=iR*0.75 end end;cmdCruise(math.floor(iR))end;if bq~=nil then if OrbitPitchPID==nil then OrbitPitchPID=pid.new(2*0.01,0,2*0.1)end;local iV=bq-iD;OrbitPitchPID:inject(iV)local iW=utils.clamp(OrbitPitchPID:get(),-0.5,0.5)O=iW end;if br~=nil then if iD<85 then local iX=math.max(autoRollFactor,0.01)/4;if OrbitRollPID==nil then OrbitRollPID=pid.new(iX*0.01,0,iX*0.1)end;local iY=br-iM;OrbitRollPID:inject(iY)local iZ=utils.clamp(OrbitRollPID:get(),-0.5,0.5)T=iZ end end elseif CancelIntoOrbit then bv=false;bx=nil;cmdThrottle(0)CancelIntoOrbit=false end;if Autopilot and j()==0 and not ag then local i_,j0=AutopilotTargetCoords,false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then AutopilotRealigned=true;if not TargetSet then local j1=(CustomTarget.position-a4.center):normalize()local j2=j1:project_on_plane((a4.center-iC):normalize()):normalize()local j3=a4.center+j2*(a4.radius+AutopilotTargetOrbit)local j4=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))if(iC-j3):len()<(iC-j4):len()then i_=j3;AutopilotTargetCoords=i_ else i_=CustomTarget.position+(CustomTarget.position-a4.center):normalize()*(AutopilotTargetOrbit-a4:getAltitude(CustomTarget.position))AutopilotTargetCoords=i_ end;local cD=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"system.setWaypoint(cD)j0=true;TargetSet=true end;AutopilotPlanetGravity=0 elseif CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotPlanetGravity=0;j0=true;TargetSet=true;AutopilotRealigned=true;i_=CustomTarget.position+(iC-CustomTarget.position)*AutopilotTargetOrbit elseif CustomTarget==nil then AutopilotPlanetGravity=0;if not TargetSet then local j1=(iC+bd*100000-a4.center):normalize()local j2=j1:project_on_plane((a4.center-iC):normalize()):normalize()if j2:len()<1 then j1=(iC+vec3(core.getConstructWorldOrientationForward())*100000-a4.center):normalize()j2=j1:project_on_plane((a4.center-iC):normalize()):normalize()end;i_=a4.center+j2*(a4.radius+AutopilotTargetOrbit)AutopilotTargetCoords=i_;TargetSet=true;j0=true;AutopilotRealigned=true;local cD=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"system.setWaypoint(cD)end end;AutopilotDistance=(vec3(i_)-vec3(core.getConstructWorldPos())):len()local fi,fj,fk=b6:getPlanetarySystem(0):castIntersections(iC,bd:normalize(),function(fl)if fl.noAtmosphericDensityAltitude>0 then return fl.radius+fl.noAtmosphericDensityAltitude else return fl.radius+fl.surfaceMaxAltitude*1.5 end end)local fm=fj;if fk~=nil and fj~=nil then fm=math.min(fk,fj)end;if fm~=nil and fm<AutopilotDistance and fi.name==a4.name then AutopilotDistance=fm end;local iH=true;local j5=(a4.center-(vec3(core.getConstructWorldPos())+vec3(bd):normalize()*AutopilotDistance)):len()-a4.radius;local dB,dC=getDistanceDisplayString(j5)system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..dB..'", "unit":"'..dC..'"}')local a0,a1;if not TurnBurn then a0,a1=GetAutopilotBrakeDistanceAndTime(be)else a0,a1=GetAutopilotTBBrakeDistanceAndTime(be)end;if be>300 and AutopilotAccelerating then local dy=vec3(i_)-vec3(core.getConstructWorldPos())local j6=utils.clamp(math.deg(cT(iB,bd:normalize(),dy:normalize()))*be/500,-90,90)local j7=utils.clamp(math.deg(cT(cA,bd:normalize(),dy:normalize()))*be/500,-90,90)if math.abs(j6)<20 and math.abs(j7)<20 then j6=j6*2;j7=j7*2 end;if math.abs(j6)<2 and math.abs(j7)<2 then j6=j6*2;j7=j7*2 end;local iE=-math.deg(cT(iB,cz,bd:normalize()))local iF=-math.deg(cT(cA,cz,bd:normalize()))if apPitchPID==nil then apPitchPID=pid.new(2*0.01,0,2*0.1)end;apPitchPID:inject(j7-iF)local j8=utils.clamp(apPitchPID:get(),-1,1)O=O+j8;if apYawPID==nil then apYawPID=pid.new(2*0.01,0,2*0.1)end;apYawPID:inject(j6-iE)local j9=utils.clamp(apYawPID:get(),-1,1)P=P+j9;j0=true;if math.abs(j6)>2 or math.abs(j7)>2 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end end;if j5<AutopilotTargetOrbit*1.5 then if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 elseif CustomTarget==nil then _,AutopilotEndSpeed=b9(a4):escapeAndOrbitalSpeed(j5)end end;if not AutopilotCruising and not AutopilotBraking and not j0 then iH=AlignToWorldVector((i_-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then iH=AlignToWorldVector(-vec3(bd):normalize())end;if AutopilotAccelerating then if not G then BrakeIsOn=false;cmdThrottle(AutopilotInterplanetaryThrottle)z=round(AutopilotInterplanetaryThrottle,2)G=true end;local fK=unit.getThrottle()if AtmoSpeedAssist then fK=z end;if vec3(core.getVelocity()):len()>=MaxGameVelocity or fK==0 and G then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;cmdThrottle(0)z=0 end;if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;cmdThrottle(0)z=0;G=false end elseif AutopilotBraking then if AutopilotStatus~="Orbiting to Target"then BrakeIsOn=true;S=1 end;if TurnBurn then cmdThrottle(100,true)z=1 end;local _,iL=b9(a4):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)local dy;if CustomTarget~=nil then dy=CustomTarget.position-iC end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and be<50 then W="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"elseif CustomTarget~=nil and CustomTarget.planetname~="Space"and be<=iL and(orbit.apoapsis==nil or orbit.periapsis==nil or orbit.apoapsis.altitude<=0 or orbit.periapsis.altitude<=0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ag=true;local cD=zeroConvertToMapPosition(a4,AutopilotTargetCoords)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"system.setWaypoint(cD)elseif orbit.periapsis~=nil and orbit.periapsis.altitude>0 and orbit.eccentricity<1 then AutopilotStatus="Circularizing"local _,iL=b9(a4):escapeAndOrbitalSpeed((vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius)if be<=iL then if CustomTarget~=nil then if bd:normalize():dot(dy:normalize())>0.4 then AutopilotStatus="Orbiting to Target"if not WaypointSet then BrakeIsOn=false;local cD=zeroConvertToMapPosition(a4,CustomTarget.position)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"system.setWaypoint(cD)WaypointSet=true end else W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ag=true;BrakeIsOn=false;local cD=zeroConvertToMapPosition(a4,CustomTarget.position)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"system.setWaypoint(cD)WaypointSet=false end else BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"W="Autopilot completed, orbit established"S=0;z=0;G=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;ag=true end end end end elseif AutopilotCruising then if AutopilotDistance<=a0 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;local fK=unit.getThrottle()if AtmoSpeedAssist then fK=z end;if fK>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if iH then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not ag then AutopilotTargetCoords=vec3(a4.center)+(AutopilotTargetOrbit+a4.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif iH then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not G then cmdThrottle(AutopilotInterplanetaryThrottle,true)z=round(AutopilotInterplanetaryThrottle,2)G=true;BrakeIsOn=false end end end end elseif Autopilot and(CustomTarget~=nil and CustomTarget.planetname~="Space"and j()>0)then W="Autopilot complete, proceeding with reentry"AutopilotTargetCoords=CustomTarget.position;BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;TargetSet=false;AutopilotStatus="Aligning"S=0;cmdThrottle(0)z=0;G=false;ProgradeIsOn=true;ag=true;local cD=zeroConvertToMapPosition(a4,CustomTarget.position)cD="::pos{"..cD.systemId..","..cD.bodyId..","..cD.latitude..","..cD.longitude..","..cD.altitude.."}"system.setWaypoint(cD)end;if U then bc=true;local j7=0;local cj=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local ja=cj-vec3(core.getConstructWorldPos())local jb=vec3(ja):project_on(vec3(core.getConstructWorldOrientationForward())):len()local jc=vec3(ja):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ac=math.sqrt(jb*jb+jc*jc)AlignToWorldVector(ja:normalize())local jd=40;local je=ac<jd;local jf=100;local ge=utils.clamp((ac-jd)/2,10,jf)O=0;local iH=math.abs(P)<0.1;if iH and be<ge and not je then BrakeIsOn=false;j7=-20 else BrakeIsOn=true;j7=0 end;local jg=0;if math.abs(j7-cC)>jg then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(j7-cC)local j8=pitchPID:get()O=j8 end end;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cE=unit.getClosestPlanetInfluence()>0;local jh=HoldAltitude-an;local ji=500+be;local jj=1;if AutoTakeoff then jj=utils.clamp(be/100,0.1,1)end;local j7=(utils.smoothstep(jh,-ji,ji)-0.5)*2*MaxPitch*jj;if not Reentry and not ag and not VectorToTarget and cz:dot(bd:normalize())<0.99 then j7=(utils.smoothstep(jh,-ji*utils.clamp(20-19*j()*10,1,20),ji*utils.clamp(20-19*j()*10,1,20))-0.5)*2*MaxPitch*utils.clamp(2-j()*10,1,2)*jj end;if not AltitudeHold then j7=0 end;if LockPitch~=nil then if cE and not IntoOrbit then j7=LockPitch else LockPitch=nil end end;bc=true;local jk=O;if Reentry then local ReentrySpeed=math.floor(bn)local jl,jm=b7.computeDistanceAndTime(be,ReentrySpeed/3.6,n(),0,0,LastMaxBrake-planet.gravity*9.8*n())local jn=an-(planet.noAtmosphericDensityAltitude+5000)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and an>planet.noAtmosphericDensityAltitude+5000 and be<=ReentrySpeed/3.6 and be>ReentrySpeed/3.6-10 and math.abs(bd:normalize():dot(cz))>0.9 then Nav.control.cancelCurrentControlMasterMode()z=0 elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and(jl>-1 and jn<=jl or an<=planet.noAtmosphericDensityAltitude+5000)then BrakeIsOn=true else BrakeIsOn=false end;cmdCruise(ReentrySpeed,true)if not J then j7=-80;if j()>0.02 then W="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;j7=0;bc=autoRollPreference end elseif planet.noAtmosphericDensityAltitude>0 and an>planet.noAtmosphericDensityAltitude+5000 then bc=true elseif an<=planet.noAtmosphericDensityAltitude+5000 then cmdCruise(ReentrySpeed)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==bn then J=false;Reentry=false;bc=true end end end;if be>I and not ah and not VectorToTarget and not BrakeLanding and ForceAlignment then AlignToWorldVector(vec3(bd))end;if(VectorToTarget or ah)and AutopilotTargetIndex>0 and j()>0.01 then local dy;if CustomTarget~=nil then dy=CustomTarget.position-vec3(core.getConstructWorldPos())else dy=a4.center-iC end;local j6=math.deg(cT(cB:normalize(),bd,dy))*2;local jo=math.rad(math.abs(dP))if be>minRollVelocity and j()>0.01 then local jp=utils.clamp(90-j7*2,-90,90)bk=utils.clamp(j6*2,-jp,jp)local jq=j6;j6=utils.clamp(utils.clamp(j6,-YawStallAngle*0.85,YawStallAngle*0.85)*math.cos(jo)+4*(iD-j7)*math.sin(math.rad(dP)),-YawStallAngle*0.85,YawStallAngle*0.85)j7=utils.clamp(utils.clamp(j7*math.cos(jo),-PitchStallAngle*0.85,PitchStallAngle*0.85)+math.abs(utils.clamp(math.abs(jq)*math.sin(jo),-PitchStallAngle*0.85,PitchStallAngle*0.85)),-PitchStallAngle*0.85,PitchStallAngle*0.85)else bk=0;j6=utils.clamp(j6,-YawStallAngle*0.85,YawStallAngle*0.85)end;local jr=iE-j6;if not bi and be>minRollVelocity and j()>0.01 then if yawPID==nil then yawPID=pid.new(2*0.01,0,2*0.1)end;yawPID:inject(jr)local j9=utils.clamp(yawPID:get(),-1,1)P=P+j9 elseif am and aj>-1 or be<minRollVelocity then AlignToWorldVector(dy)elseif bi and j()>0.01 then if(iE<-YawStallAngle or iE>YawStallAngle)and j()>0.01 then AlignToWorldVector(bd)end;if(iF<-PitchStallAngle or iF>PitchStallAngle)and j()>0.01 then j7=utils.clamp(iD-iF,iD-PitchStallAngle*0.85,iD+PitchStallAngle*0.85)end end;if CustomTarget~=nil and not ah then local js=planet:getAltitude(CustomTarget.position)local jn=math.sqrt(dy:len()^2-(an-js)^2)local jt=LastMaxBrakeInAtmo;if jt then jt=jt*utils.clamp(be/100,0.1,1)*j()else jt=LastMaxBrake end;if j()<0.01 then jt=LastMaxBrake end;local ju=bd:len()-math.abs(ej)local jv=vec3(core.getWorldAirFrictionAcceleration())local jw=math.sqrt(jv:len()-jv:project_on(el):len())*n()if be>100 then a0,a1=b7.computeDistanceAndTime(be,100,n(),0,0,jt+jw)local jx,jy=b7.computeDistanceAndTime(100,0,n(),0,0,jt/2)a0=a0+jx else a0,a1=b7.computeDistanceAndTime(be,0,n(),0,0,jt/2)end;StrongBrakes=true;if not ah and not Reentry and jn<=a0+be*iA/2 and(bd:project_on_plane(cB):normalize():dot(dy:project_on_plane(cB):normalize())>0.99 or VectorStatus=="Finalizing Approach")then VectorStatus="Finalizing Approach"cmdThrottle(0)z=0;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;BrakeIsOn=true elseif not AutoTakeoff then BrakeIsOn=false end;if VectorStatus=="Finalizing Approach"and(ju<0.1 or jn<0.1 or LastDistanceToTarget~=nil and LastDistanceToTarget<jn)then BrakeLanding=true;VectorToTarget=false;VectorStatus="Proceeding to Waypoint"end;LastDistanceToTarget=jn end elseif VectorToTarget and j()==0 and HoldAltitude>planet.noAtmosphericDensityAltitude and not(ah or Reentry)then if CustomTarget~=nil and a4.name==planet.name then local dy=CustomTarget.position-vec3(core.getConstructWorldPos())local js=planet:getAltitude(CustomTarget.position)local jn=math.sqrt(dy:len()^2-(an-js)^2)local jt=LastMaxBrakeInAtmo;if not by then bv=false;IntoOrbit=true else jt=LastMaxBrake;a0,a1=b7.computeDistanceAndTime(be,0,n(),0,0,jt/2)StrongBrakes=true;if jn<=a0+be*iA/2 and bd:project_on_plane(cB):normalize():dot(dy:project_on_plane(cB):normalize())>0.99 then if planet.hasAtmosphere then BrakeIsOn=false;ProgradeIsOn=false;J=true;ag=false;ai=true;Autopilot=false;BeginReentry()end end;LastDistanceToTarget=jn end end end;if j()==0 and(AltitudeHold and HoldAltitude>planet.noAtmosphericDensityAltitude)and not(ah or VectorToTarget or IntoOrbit or Reentry)then if not by then IntoOrbit=true end end;if bi and j()>0.01 and aj==-1 and be>minRollVelocity and VectorStatus~="Finalizing Approach"then AlignToWorldVector(bd)j7=utils.clamp(iD-iF,iD-PitchStallAngle*0.85,iD+PitchStallAngle*0.85)end;O=jk;local fT=-1;if BrakeLanding then j7=0;local jz=false;local jA=30;if b8~=nil and b8>0 then local jw=0;local dV=utils.clamp(j(),0.4,2)local jt=LastMaxBrakeInAtmo*utils.clamp(be/100,0.1,1)*dV;local jB=b8*dV+jt+jw-bS;local jC=jt/2+jw-bS;local jD=be-math.sqrt(math.abs(jC/2)*20/(0.5*n()))*utils.sign(jC)if jD<0 then jD=0 end;local jE;if be>100 then local jF,_=b7.computeDistanceAndTime(be,100,n(),0,0,jt)local jG,_=b7.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(jt))jE=jF+jG else jE=b7.computeDistanceAndTime(be,0,n(),0,0,math.sqrt(jt))end;if jE<20 then BrakeIsOn=false else local jH=0;if jD>100 then local jI,_=b7.computeDistanceAndTime(jD,100,n(),0,0,jB)local jJ,_=b7.computeDistanceAndTime(100,0,n(),0,0,b8*dV+math.sqrt(jt)+jw-bS)jH=jI+jJ else jH,_=b7.computeDistanceAndTime(jD,0,n(),0,0,b8*dV+math.sqrt(jt)+jw-bS)end;jH=(jH+15+be*iA)*1.1;local jK=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0 and CustomTarget.safe;if jK then local js=planet:getAltitude(CustomTarget.position)local jL=an-js-100;local dy=CustomTarget.position-vec3(core.getConstructWorldPos())local jM=math.sqrt(dy:len()^2-(an-js)^2)if jM>100 then jK=false elseif jL<=jH or jH==-1 then BrakeIsOn=true;jz=true else BrakeIsOn=false;jz=true end end;if not jK and CalculateBrakeLandingSpeed then if jH>=jA then BrakeIsOn=true else BrakeIsOn=false end;jz=true end end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)fT=aj;if fT>-1 then bc=autoRollPreference;if be<1 or bd:normalize():dot(cB)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)a8=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and bd:normalize():dot(-el)<0.999 then BrakeIsOn=true elseif ej<-brakeLandingRate and not jz then BrakeIsOn=true elseif not jz then BrakeIsOn=false end end;if AutoTakeoff or ah then local fi,fk,fj;if AutopilotTargetCoords~=nil then fi,fk,fj=b6:getPlanetarySystem(0):castIntersections(iC,(AutopilotTargetCoords-iC):normalize(),function(fl)return fl.radius+fl.noAtmosphericDensityAltitude end)end;if antigrav and antigrav.getState()==1 then if an>=HoldAltitude-50 then AutoTakeoff=false;BrakeIsOn=true;cmdThrottle(0)z=0 else HoldAltitude=antigrav.getBaseAltitude()end elseif math.abs(j7)<15 and an/HoldAltitude>0.75 then AutoTakeoff=false;if not ah then if Nav.axisCommandManager:getAxisCommandType(0)==0 and not AtmoSpeedAssist then Nav.control.cancelCurrentControlMasterMode()end elseif ah and be<I then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;cmdThrottle(0)z=0 elseif ah then cmdThrottle(0)z=0;BrakeIsOn=true end elseif ah and j()==0 and a4~=nil and(fi==nil or fi.name==a4.name)then Autopilot=true;ah=false;AltitudeHold=false;AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;AutopilotAccelerating=true end end;local jN=hoverDetectGround()>-1;local jO=cC;if(VectorToTarget or ah)and not jN and be>minRollVelocity and j()>0.01 then local jo=math.rad(math.abs(dP))jO=cC*math.abs(math.cos(jo))+iF*math.sin(jo)end;local jP=utils.clamp(j7-jO,-PitchStallAngle*0.85,PitchStallAngle*0.85)if j()<0.01 and VectorToTarget then jP=utils.clamp(j7-jO,-85,MaxPitch)elseif j()<0.01 then jP=utils.clamp(j7-jO,-MaxPitch,MaxPitch)end;if math.abs(dP)<5 or VectorToTarget or BrakeLanding or jN or AltitudeHold then if pitchPID==nil then pitchPID=pid.new(5*0.01,0,5*0.1)end;pitchPID:inject(jP)local j8=pitchPID:get()O=O+j8 end end;if antigrav~=nil and(antigrav and not ExternalAGG and an<200000)then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav~=nil and(antigrav and not ExternalAGG)then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle and D then z=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)D=false elseif Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed and not D then z=0;D=true end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local jQ=utils.clamp(N+O+system.getControlDeviceForwardInput(),-1,1)local jR=utils.clamp(Q+T+system.getControlDeviceYawInput(),-1,1)local jS=utils.clamp(R+P-system.getControlDeviceLeftRightInput(),-1,1)local jT=S;local jU=vec3(core.getWorldVertical())if jU==nil or jU:len()==0 then jU=(planet.center-vec3(core.getConstructWorldPos())):normalize()end;local jV=vec3(core.getConstructWorldOrientationUp())local jW=vec3(core.getConstructWorldOrientationForward())local jX=vec3(core.getConstructWorldOrientationRight())local jY=vec3(core.getWorldVelocity())local jZ=vec3(core.getWorldVelocity()):normalize()local j_=getRoll(jU,jW,jX)local k0=math.abs(j_)local k1=utils.sign(j_)local j=j()local k2=vec3(core.getWorldAngularVelocity())local k3=jQ*pitchSpeedFactor*jX+jR*rollSpeedFactor*jW+jS*yawSpeedFactor*jV;if jU:len()>0.01 and(j>0.0 or ProgradeIsOn or Reentry or ag or AltitudeHold)then local dP=getRoll(jU,jW,jX)local dQ=dP/180*math.pi;local dR=math.cos(dQ)local dS=math.sin(dQ)local iD=getPitch(jU,jW,jX*dR+jV*dS)if bc==true and math.abs(bk-j_)>autoRollRollThreshold and jR==0 and math.abs(iD)<85 then local k4=bk;local iX=autoRollFactor;if j==0 then iX=iX/4;bk=0;k4=0 end;if rollPID==nil then rollPID=pid.new(iX*0.01,0,iX*0.1)end;rollPID:inject(k4-j_)local k5=rollPID:get()k3=k3+k5*jW end end;if jU:len()>0.01 and j>0.0 then local k6=20.0;if turnAssist==true and k0>k6 and jQ==0 and jS==0 then local k7=turnAssistFactor*0.1;local k8=turnAssistFactor*0.025;local k9=(k0-k6)/(180-k6)*180;local ka=0;if k9<90 then ka=k9/90 elseif k9<180 then ka=(180-k9)/90 end;ka=ka*ka;local kb=-k1*k8*(1.0-ka)local kc=k7*ka;k3=k3+kc*jX+kb*jV end end;local kd=1;local ke=0;local kf=1;if system.getMouseWheel()>0 then if AltIsOn then if j>0 or Reentry then bn=utils.clamp(bn+speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity+speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z+speedChangeLarge/100,-1,1),2)end elseif system.getMouseWheel()<0 then if AltIsOn then if j>0 or Reentry then bn=utils.clamp(bn-speedChangeLarge,0,AtmoSpeedLimit)elseif Autopilot then MaxGameVelocity=utils.clamp(MaxGameVelocity-speedChangeLarge/3.6*100,0,8333.00)end;H=false else z=round(utils.clamp(z-speedChangeLarge/100,-1,1),2)end end;A=0;local ej=-jU:dot(jY)if am and AtmoSpeedAssist and Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byThrottle then if throttlePID==nil then throttlePID=pid.new(0.5,0,1)end;throttlePID:inject(bn/3.6-jY:dot(jW))local kg=throttlePID:get()C=utils.clamp(kg,-1,1)if C<z and j>0.005 then B=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,utils.clamp(C,0.01,1))else B=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jY:len()-bn/3.6)local kh=utils.clamp(brakePID:get(),0,1)if j>0 and ej<-80 or j>0.005 then A=kh end;if A>0 then if B and C==0.01 then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end else C=utils.clamp(C,0.01,1)end;local ki=''local kj=vec3()local kk=composeAxisAccelerationFromTargetSpeedV(axisCommandId.vertical,a8*1000)Nav:setEngineForceCommand("vertical airfoil , vertical ground ",kk,ke)local kl='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kl=kl..ExtraLongitudeTags end;local km=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)local kn=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kl,axisCommandId.longitudinal)local ko=composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral,LeftAmount*1000)ki=ki..' , '.."lateral airfoil , lateral ground "kj=kj+ko;if kj:len()>constants.epsilon then Nav:setEngineForceCommand(ki,kj,ke,'','','',kf)end;Nav:setEngineForceCommand(kl,kn,kd)local kp='thrust analog vertical fueled 'local kq='thrust analog lateral fueled 'if ExtraLateralTags~="none"then kq=kq..ExtraLateralTags end;if ExtraVerticalTags~="none"then kp=kp..ExtraVerticalTags end;if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kp,kk,kd)else Nav:setEngineForceCommand(kp,vec3(),kd)end;if LeftAmount~=0 then Nav:setEngineForceCommand(kq,ko,kd)else Nav:setEngineForceCommand(kq,vec3(),kd)end;if jT==0 then jT=A end;local kr=-jT*(brakeSpeedFactor*jY+brakeFlatFactor*jZ)Nav:setEngineForceCommand('brake',kr)else if AtmoSpeedAssist then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,z)end;local ge=unit.getAxisCommandValue(0)if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then if brakePID==nil then brakePID=pid.new(1*0.01,0,1*0.1)end;brakePID:inject(jY:len()-ge/3.6)local kh=utils.clamp(brakePID:get(),0,1)jT=utils.clamp(jT+kh,0,1)end;local kr=-jT*(brakeSpeedFactor*jY+brakeFlatFactor*jZ)Nav:setEngineForceCommand('brake',kr)local ki=''local kj=vec3()local ks=false;local kl='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then kl=kl..ExtraLongitudeTags end;local km=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if km==axisCommandType.byThrottle then local kn=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kl,axisCommandId.longitudinal)Nav:setEngineForceCommand(kl,kn,kd)elseif km==axisCommandType.byTargetSpeed then local kn=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ki=ki..' , '..kl;kj=kj+kn;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ks=true end end;local kq='thrust analog lateral 'if ExtraLateralTags~="none"then kq=kq..ExtraLateralTags end;local kt=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if kt==axisCommandType.byThrottle then local ku=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kq,axisCommandId.lateral)Nav:setEngineForceCommand(kq,ku,kd)elseif kt==axisCommandType.byTargetSpeed then local ko=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ki=ki..' , '..kq;kj=kj+ko end;local kp='thrust analog vertical 'if ExtraVerticalTags~="none"then kp=kp..ExtraVerticalTags end;local kv=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if kv==axisCommandType.byThrottle then local kk=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(kp,axisCommandId.vertical)if a8~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(kp,kk,kd,'airfoil','ground','',kf)else Nav:setEngineForceCommand(kp,vec3(),kd)Nav:setEngineForceCommand('airfoil vertical',kk,kd,'airfoil','','',kf)Nav:setEngineForceCommand('ground vertical',kk,kd,'ground','','',kf)end elseif kv==axisCommandType.byTargetSpeed then if a8<0 then Nav:setEngineForceCommand('hover',vec3(),kd)end;local kw=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ki=ki..' , '..kp;kj=kj+kw end;if kj:len()>constants.epsilon then if S~=0 or ks or math.abs(jZ:dot(jW))<0.8 then ki=ki..', brake'end;Nav:setEngineForceCommand(ki,kj,ke,'','','',kf)end end;local kx=torqueFactor*(k3-k2)local ky=vec3(core.getWorldAirFrictionAngularAcceleration())kx=kx-ky;Nav:setEngineTorqueCommand('torque',kx,kd,'airfoil','','',kf)Nav:setBoosterCommand('rocket_engine')if Z and not VanillaRockets then local bV=vec3(core.getVelocity()):len()local kz=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local kA=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bV*3.6>kA*(1-kz)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bV*3.6<kA*(1-kz)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local fK=unit.getThrottle()if AtmoSpeedAssist then fK=z*100 end;local ge=fK/100;if j==0 then ge=ge*MaxGameVelocity;if bV>=ge*(1-kz)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bV<ge*(1-kz)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else ge=ge*ReentrySpeed/3.6;if bV>=ge*(1-kz)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bV<ge*(1-kz)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bG=coroutine.resume(beginSetup)if bG then SetupComplete=true end else Nav:update()if not ba and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(kB)if kB=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)z=0;if(vBooster or hover)and aj==-1 and(j()>0 or an<ReentryAltitude)then StrongBrakes=true;Reentry=false;AutoTakeoff=false;VertTakeOff=false;AltitudeHold=false;BrakeLanding=true;bc=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if M and not BrakeLanding then Nav.control.extendLandingGears()end else if M then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif kB=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif kB=="forward"then N=N-1 elseif kB=="backward"then N=N+1 elseif kB=="left"then Q=Q-1 elseif kB=="right"then Q=Q+1 elseif kB=="yawright"then R=R-1 elseif kB=="yawleft"then R=R+1 elseif kB=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)LeftAmount=1 elseif kB=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)LeftAmount=-1 elseif kB=="up"then a8=a8+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif kB=="down"then a8=a8-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif kB=="groundaltitudeup"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif kB=="groundaltitudedown"then OldButtonMod=X;OldAntiMod=Y;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-X else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif kB=="option1"then if not Autopilot then IncrementAutopilotTargetIndex()H=false end elseif kB=="option2"then if not Autopilot then DecrementAutopilotTargetIndex()H=false end elseif kB=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;H=false;ToggleWidgets()elseif kB=="option4"then ToggleAutopilot()H=false elseif kB=="option5"then ToggleLockPitch()H=false elseif kB=="option6"then ToggleAltitudeHold()H=false elseif kB=="option7"then wipeSaveVariables()H=false elseif kB=="option8"then ToggleFollowMode()H=false elseif kB=="option9"then if gyro~=nil then gyro.toggle()aq=gyro.getState()==1 end;H=false elseif kB=="lshift"then if system.isViewLocked()==1 then V=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then V=true;bb=false;ba=false end elseif kB=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif kB=="lalt"then AltIsOn=true;if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif kB=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not Z then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;Z=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;Z=false end elseif kB=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()z=0 elseif kB=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)end else IncrementAutopilotTargetIndex()end elseif kB=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeLarge/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)end else DecrementAutopilotTargetIndex()end elseif kB=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(kB)if kB=="forward"then N=0 elseif kB=="backward"then N=0 elseif kB=="left"then Q=0 elseif kB=="right"then Q=0 elseif kB=="yawright"then R=0 elseif kB=="yawleft"then R=0 elseif kB=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)LeftAmount=0 elseif kB=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)LeftAmount=0 elseif kB=="up"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kB=="down"then a8=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif kB=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kB=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then Y=OldAntiMod end;if AltitudeHold then X=OldButtonMod end;H=false elseif kB=="lshift"then if system.isViewLocked()==1 then V=false;a9=0;aa=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then V=false;bb=false;ba=false end elseif kB=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif kB=="lalt"then if o()==0 and freeLookToggle then if H then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else H=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end;AltIsOn=false end end;function script.onActionLoop(kB)if kB=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+Y;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+Y end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif kB=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-Y;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;Y=Y*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-X;X=X*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif kB=="speedup"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z+speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end end elseif kB=="speeddown"then if not V then if AtmoSpeedAssist and not AltIsOn then z=utils.clamp(z-speedChangeSmall/100,-1,1)else Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end end;function script.onInputText(dD)local i;local kC="/commands /setname /G /agg /addlocation /copydatabank"local kD,kE=nil,nil;local kF="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(dD," ")kD=dD;if i~=nil then kD=string.sub(dD,0,i-1)kE=string.sub(dD,i+1)elseif not string.find(kC,kD)then for ga in string.gmatch(kF,"([^\n]+)")do c(ga)end;return end;if kD=="/setname"then if kE==nil or kE==""then W="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(kE)else W="Select a saved target to rename first"end elseif kD=="/addlocation"then if kE==nil or kE==""or string.find(kE,"::")==nil then W="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(kE,"::")local cp=string.sub(kE,1,i-2)local cj=string.sub(kE,i)local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ck='::pos{'..q..','..q..','..q..','..q..','..q..'}'local cl,cm,cg,ch,cf=string.match(cj,ck)local planet=b0[tonumber(cl)][tonumber(cm)]AddNewLocationByWaypoint(cp,planet,cj)W="Added "..cp.." to saved locations,\nplanet "..planet.name.." at "..cj;ab=5 elseif kD=="/agg"then if kE==nil or kE==""then W="Usage: /agg targetheight"return end;kE=tonumber(kE)if kE<1000 then kE=1000 end;AntigravTargetAltitude=kE;W="AGG Target Height set to "..kE elseif kD=="/G"then if kE==nil or kE==""then W="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if kE=="dump"then for bE,bF in pairs(a)do if type(_G[bF])=="boolean"then if _G[bF]==true then c(bF.." true")else c(bF.." false")end elseif _G[bF]==nil then c(bF.." nil")else c(bF.." ".._G[bF])end end;return end;i=string.find(kE," ")local kG=string.sub(kE,0,i-1)local kH=string.sub(kE,i+1)for bE,bF in pairs(a)do if bF==kG then W="Variable "..kG.." changed to "..kH;local kI=type(_G[bF])if kI=="number"then kH=tonumber(kH)elseif kI=="boolean"then if string.lower(kH)=="true"then kH=true else kH=false end end;_G[bF]=kH;return end end;W="No such global variable: "..kG elseif kD=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else W="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
